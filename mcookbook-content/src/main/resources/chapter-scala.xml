<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="scala">
  <title>Scala and Maven</title>

  <section id="scala-sect-intro">
    <title>Introduction</title>

    <para>Scala., haven't used it yet? Not surprised, few have, but everyone
    seems to be all atwitter about how amazing and transformative it is, so
    maybe you should take a look? If you are interested in Scala and you
    already use Maven, you are in luck. The Scala community has spent a great
    deal of effort making sure that the Maven integration is first-class. This
    chapter will introduce you to Scala by way of Maven.</para>
  </section>

  <section id="sect-scala-script-inline">
    <title>Running an Inline Scala Script in a Maven Build</title>

    <section>
      <title>Problem</title>

      <para>You need to execute an inline Scala script as a part of your Maven
      build.</para>
    </section>

    <section>
      <title>Solution</title>

      <para>Configure the <varname>script</varname> goal of the
      <varname>maven-scala-plugin</varname>, and pass a Scala script to the
      <varname>script</varname> configuration parameter.</para>

      <example id="ex-scala-script-inline">
        <title>Executing an Inline Scala Script with the Maven Scala
        Plugin</title>

        <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0                        
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.mcookbook&lt;/groupId&gt;
  &lt;artifactId&gt;scala-script&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;scala-script&lt;/name&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;
      &lt;artifactId&gt;maven-model&lt;/artifactId&gt;
      &lt;version&gt;2.2.0&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.scala-lang&lt;/groupId&gt;
      &lt;artifactId&gt;scala-library&lt;/artifactId&gt;
      &lt;version&gt;2.7.3&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.scala-tools&lt;/groupId&gt;
      &lt;artifactId&gt;maven-scala-plugin&lt;/artifactId&gt;
      &lt;version&gt;2.10.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.scalaforge&lt;/groupId&gt;
      &lt;artifactId&gt;scalax&lt;/artifactId&gt;
      &lt;version&gt;0.1&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.scala-tools&lt;/groupId&gt;
        &lt;artifactId&gt;maven-scala-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.10.1&lt;/version&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;phase&gt;prepare-package&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;script&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
              &lt;keepGeneratedScript&gt;true&lt;/keepGeneratedScript&gt;
              &lt;script&gt;
                &lt;![CDATA[
        import java.io.{File,  PrintWriter, FileWriter};
        import scalax.io.FileExtras;
        import scala.collection.mutable.HashSet;

        val outputDir = project.getBuild().getOutputDirectory();
        val depsFile = new FileExtras( new File( outputDir, "deps.txt" ) )
        val pw = depsFile.printWriter
        val depSet = new HashSet[String]
        for( d &lt;- project.getDependencies() ) {
          depSet += d.getGroupId + ":" + d.getArtifactId + ":" + d.getVersion
        }
        pw.writeLines( depSet.toSeq )

                ]]&gt;
              &lt;/script&gt;
            &lt;/configuration&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  &lt;repositories&gt;
    &lt;repository&gt;
      &lt;id&gt;scala-tools&lt;/id&gt;
      &lt;url&gt;http://scala-tools.org/repo-releases/&lt;/url&gt;
    &lt;/repository&gt;
  &lt;/repositories&gt;
&lt;/project&gt;
</programlisting>
      </example>

      <para>If you run <command>mvn package</command>, the
      <varname>script</varname> goal will be executed during the
      <varname>prepare-package</varname> phase.</para>

      <screen>${root.example.dir}/scala/scala-script $ <command>mvn package -Dmaven.test.skip=true</command>
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building scala-script
[INFO]    task-segment: [package]
[INFO] ------------------------------------------------------------------------
...
[INFO] [scala:script {execution: scala-magic}]
[INFO] Checking for multiple versions of scala
...
[INFO] BUILD SUCCESSFUL
</screen>

      <para>After this script executes, there will be a file named
      <filename>deps.txt</filename> in
      <filename>${basedir}/target/classes</filename> containing a list of the
      project's direct dependencies.</para>

      <programlisting>org.scalaforge:scalax:0.1
org.apache.maven:maven-model:2.2.0
org.scala-tools:maven-scala-plugin:2.10.1
org.scala-lang:scala-library:2.7.3
</programlisting>
    </section>

    <section>
      <title>Discussion</title>

      <para></para>
    </section>
  </section>

  <section>
    <title>Running an External Scala Script in a Maven Build</title>

    <section>
      <title>Problem</title>

      <para>You need to execute an external Scala script as a part of your
      Maven build.</para>
    </section>

    <section>
      <title>Solution</title>

      <para>Similar to <xref linkend="ex-scala-script-inline" />, configure
      the <varname>script</varname> goal of the Maven Scala plugin and specify
      a Scala script in the <varname>scriptFile</varname> configuration
      parameter.</para>

      <example>
        <title>Configuring the Maven Scala Plugn Script Goal to Execute an
        External Script</title>

        <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0                        
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.mcookbook&lt;/groupId&gt;
  &lt;artifactId&gt;scala-script-ex&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;scala-script-ex&lt;/name&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;
      &lt;artifactId&gt;maven-model&lt;/artifactId&gt;
      &lt;version&gt;2.2.0&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.scala-lang&lt;/groupId&gt;
      &lt;artifactId&gt;scala-library&lt;/artifactId&gt;
      &lt;version&gt;2.7.3&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.scala-tools&lt;/groupId&gt;
      &lt;artifactId&gt;maven-scala-plugin&lt;/artifactId&gt;
      &lt;version&gt;2.10.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.scalaforge&lt;/groupId&gt;
      &lt;artifactId&gt;scalax&lt;/artifactId&gt;
      &lt;version&gt;0.1&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.scala-tools&lt;/groupId&gt;
        &lt;artifactId&gt;maven-scala-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.10.1&lt;/version&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;id&gt;scala-magic&lt;/id&gt;
            &lt;phase&gt;prepare-package&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;script&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
              &lt;keepGeneratedScript&gt;true&lt;/keepGeneratedScript&gt;
              &lt;scriptFile&gt;${basedir}/src/main/scala/CreateDeps.scala&lt;/scriptFile&gt;
            &lt;/configuration&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  &lt;repositories&gt;
    &lt;repository&gt;
      &lt;id&gt;scala-tools&lt;/id&gt;
      &lt;url&gt;http://scala-tools.org/repo-releases/&lt;/url&gt;
    &lt;/repository&gt;
  &lt;/repositories&gt;
&lt;/project&gt;
</programlisting>
      </example>

      <para>The script that this build will execute is the same Scala script
      which was executed in <xref linkend="ex-scala-script-inline" />. In this
      example, the script is stored in an external file in
      ${basedir]/src/main/scala, and in <xref
      linkend="ex-scala-script-inline" />, the script was listed inline in the
      project's POM.</para>

      <example>
        <title>The CreateDeps.scala Script</title>

        <programlisting>import java.io.{File,  PrintWriter, FileWriter};
import scalax.io.FileExtras;
import scala.collection.mutable.HashSet;

val outputDir = project.getBuild().getOutputDirectory();
val depsFile = new FileExtras( new File( outputDir, "deps.txt" ) );
val pw = depsFile.printWriter;
val depSet = new HashSet[String];
for( d &lt;- project.getDependencies() ) {
  depSet += d.getGroupId + ":" + d.getArtifactId + ":" + d.getVersion;
}
pw.writeLines( depSet.toSeq );
</programlisting>
      </example>

      <para>Just like the example in <xref
      linkend="sect-scala-script-inline" />, this script creates a file named
      <filename>deps.txt</filename> in
      <filename>${basedir}/target/classes</filename> which contains a list of
      the project's dependencies.</para>

      <programlisting>org.scalaforge:scalax:0.1
org.apache.maven:maven-model:2.2.0
org.scala-tools:maven-scala-plugin:2.10.1
org.scala-lang:scala-library:2.7.3
</programlisting>
    </section>

    <section>
      <title>Discussion</title>

      <para></para>
    </section>
  </section>
</chapter>
