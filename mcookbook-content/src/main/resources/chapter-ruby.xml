<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.sonatype.com/tmp/docbook/xml/4.5/docbookx.dtd">
<chapter id="ruby">
  <title>Ruby and Maven</title>

  <section id="ruby-sect-intro">
    <title>Introduction</title>

    <para>Ant and Maven? Yes, it is true.</para>
  </section>

  <section id="writing-plugins-alternative-sect-jruby">
    <title>Writing Plugins in JRuby</title>

    <para>Ruby is an object-oriented scripting language which provides a rich
    set of facilities for meta-programming and reflection. Ruby's reliance on
    closures and blocks make for a programming style that is both compact and
    powerful. Although Ruby has been around since 1993, most people came to
    know Ruby after it was made popular by a Ruby-based web framework known as
    Ruby on Rails. JRuby is a Ruby interpreter written in Java. For more
    information about the Ruby language, see: <ulink
    url="http://www.ruby-lang.org/">http://www.ruby-lang.org/</ulink>, and for
    more information about JRuby, see: <ulink
    url="http://jruby.codehaus.org/">http://jruby.codehaus.org/</ulink>.</para>

    <section id="writing-plugins-alternative-sect-creating-jruby">
      <title>Creating a JRuby Plugin</title>

      <para>To create a Maven plugin using JRuby, you will need to have a
      <filename>pom.xml</filename> and a single Mojo implemented in Ruby. To
      get started, create a project directory named
      <varname>firstruby-maven-plugin</varname>. Place the following
      <filename>pom.xml</filename> in this directory.</para>

      <example>
        <title>POM for a JRuby Maven Plugin</title>

        <programlisting language="xml">&lt;project&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.mavenbook.plugins&lt;/groupId&gt;
  &lt;artifactId&gt;firstruby-maven-plugin&lt;/artifactId&gt;
  &lt;name&gt;Example Ruby Mojo - firstruby-maven-plugin&lt;/name&gt;
  &lt;packaging&gt;maven-plugin&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
      &lt;artifactId&gt;jruby-maven-plugin&lt;/artifactId&gt;
      &lt;version&gt;1.0-beta-4&lt;/version&gt;
      &lt;scope&gt;runtime&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-plugin-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.4&lt;/version&gt;
        &lt;dependencies&gt;
          &lt;dependency&gt;
            &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
            &lt;artifactId&gt;jruby-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;1.0-beta-4&lt;/version&gt;
          &lt;/dependency&gt;
        &lt;/dependencies&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;</programlisting>
      </example>

      <para>Next, you will need to create a Mojo implemented in Ruby. Maven is
      going to look for a Ruby Mojo in
      <filename>\${basedir}/src/main/scripts</filename>. Put the following
      Ruby class in
      <filename>\${basedir}/src/main/scripts/echo.rb</filename>.</para>

      <example>
        <title>The Echo Ruby Mojo</title>

        <programlisting># Prints a message
# @goal "echo"
# @phase "validate"
class Echo &lt; Mojo

  # @parameter type="java.lang.String" default-value="Hello Maven World" \
    expression="\${message}"
  def message
  end

  def execute
    info $message
  end

end

run_mojo Echo
</programlisting>
      </example>

      <para>The <classname>Echo</classname> class must extend
      <classname>Mojo</classname>, and it must override the
      <methodname>execute()</methodname> method. At the end of the
      <filename>echo.rb</filename> file, you will need to run the mojo with
      "<code>run_mojo Echo</code>". To install this plugin, run mvn
      install:</para>

      <screen>$ <command>mvn install</command>
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building Example Ruby Mojo - firstruby-maven-plugin
[INFO]    task-segment: [install]
[INFO] ------------------------------------------------------------------------
...
[INFO] [plugin:descriptor]
...
[INFO] Applying extractor for language: jruby
[INFO] Ruby Mojo File: /echo.rb
[INFO] Extractor for language: jruby found 1 mojo descriptors.
...
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
</screen>

      <para>During the build, you should see that the Maven Plugin Plugin's
      descriptor goal applies the JRuby extractor to create a
      <filename>plugin.xml</filename> which captures the annotations in the
      <classname>Echo</classname> class. If you've configured your default
      plugin groups to include
      <varname>org.sonatype.mavenbook.plugins</varname>, you should be able to
      run this echo goal with the following command-line:</para>

      <screen>$ <command>mvn firstruby:echo</command>
...
[INFO] [firstruby:echo]
[INFO] Hello Maven World
...</screen>
    </section>

    <section id="writing-plugins-alternative-sect-ruby-mojo">
      <title>Ruby Mojo Implementations</title>

      <para>Ruby Mojos are annotated using comments in Ruby source files. A
      single annotation like <classname>@parameter</classname> takes a number
      of attributes, and each of these attributes must be specified on the
      same line. There can be no line-breaks between an annotations attribute
      in the Ruby source. Both classes and parameters are annotated.
      Parameters are annotated with four annotations:
      <classname>@parameter</classname>, <classname>@required</classname>,
      <classname>@readonly</classname>, and
      <classname>@deprecated</classname>. The
      <classname>@parameter</classname> attribute takes the following
      attributes:</para>

      <variablelist>
        <varlistentry>
          <term>alias</term>

          <listitem>
            <para>An alias for the parameter. An alternate name which can be
            used to populate the same parameter.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>default-value</term>

          <listitem>
            <para>Provides a default value to the parameter if the supplied
            value or the parameter expression produces a null result. In
            <filename>echo.rb</filename>, we specify the default as "Hello
            Maven World".</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>expression</term>

          <listitem>
            <para>Contains an expression which can resolve to a Maven property
            or a System property.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>type</term>

          <listitem>
            <para>The fully qualified Java type of the parameter. If the type
            is not specified it will default to
            <classname>java.lang.String</classname>.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>In addition to the <classname>@parameter</classname> annotation, a
      parameter can take the following annotations:</para>

      <variablelist>
        <varlistentry>
          <term>@required "&lt;true|false&gt;"</term>

          <listitem>
            <para>Marks the parameter as being required. The default value is
            false.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>@readonly "&lt;true|false&gt;"</term>

          <listitem>
            <para>Marks the parameter as read-only. If this is true, you may
            not override the default value or the value from the expression
            from the command line. The default value is false.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>@deprecated "&lt;true|false&gt;"</term>

          <listitem>
            <para>Marks the parameter as deprecated. The default value is
            false.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Putting this altogether, a fully annotated message parameter from
      <filename>echo.rb</filename> would look like the following code:</para>

      <programlisting># @parameter type="java.lang.String" default-value="Hello Maven World" \
  expression="\${message}"
# @readonly true
# @required false
# @deprecated false
def message
end
</programlisting>

      <para>Ruby Mojo classes are annotated with the following
      attributes:</para>

      <variablelist>
        <varlistentry>
          <term>@goal</term>

          <listitem>
            <para>Specifies the name of the goal.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>@phase</term>

          <listitem>
            <para>The default phase to bind this goal to.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>@requiresDependencyResolution</term>

          <listitem>
            <para>True if the Mojo requires that dependencies be resolved
            before execution.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>@aggregator</term>

          <listitem>
            <para>Marks this mojo as an aggregator.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>@execute</term>

          <listitem>
            <para>Provides the opportunity to execute a goal or lifecycle
            phase before executing this Mojo. The @execute annotation takes
            the following attributes:</para>

            <variablelist>
              <varlistentry>
                <term>goal</term>

                <listitem>
                  <para>Name of the goal to execute</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>phase</term>

                <listitem>
                  <para>Name of the lifecycle phase to execute</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>lifecycle</term>

                <listitem>
                  <para>Name of the lifecycle (if other than default)</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>For an example of an annotated Mojo class, consider the following
      code example:</para>

      <programlisting># Completes some build task
# @goal custom-goal
# @phase install
# @requiresDependencyResolution false
# @execute phase=compile
class CustomMojo &lt; Mojo
   ...
end</programlisting>

      <para>Mojo parameters can reference Java classes and Maven properties.
      The following example shows you how to get access to the Maven Project
      object from a Ruby Mojo.</para>

      <example>
        <title>Referencing a Maven Project from a Ruby Mojo</title>

        <programlisting># This is a mojo description
# @goal test
# @phase validate
class Test &lt; Mojo
  # @parameter type="java.lang.String" default-value="nothing" alias="a_string"
  def prop
  end  

  # @parameter type="org.apache.maven.project.MavenProject" \
    expression="\${project}"
  # @required true  
  def project
  end  

  def execute    
    info "The following String was passed to prop: '#{$prop}'"    
    info "My project artifact is: #{$project.artifactId}"  
  end
end

run_mojo Test
</programlisting>

        <para>In the previous example, we can access properties on the
        <classname>Project</classname> class using standard Ruby syntax. If
        you put <filename>test.rb</filename> in
        <varname>firstruby-maven-plugin</varname>'s
        <filename>src/main/scripts</filename> directory, install the plugin,
        and then run it, you will see the following output:</para>

        <screen>$ <command>mvn install</command>
...
[INFO] [plugin:descriptor]
[INFO] Using 3 extractors.
[INFO] Applying extractor for language: java
...
[INFO] Applying extractor for language: jruby
[INFO] Ruby Mojo File: /echo.rb
[INFO] Ruby Mojo File: /test.rb
[INFO] Extractor for language: jruby found 2 mojo descriptors.
...
$ <command>mvn firstruby:test</command>
...
[INFO] [firstruby:test]
[INFO] The following String was passed to prop: 'nothing'
[INFO] My project artifact is: firstruby-maven-plugin
</screen>
      </example>
    </section>

    <section id="writing-plugins-alternative-sect-logging-ruby">
      <title>Logging from a Ruby Mojo</title>

      <para>To log from a Ruby Mojo, call the <methodname>info()</methodname>,
      <methodname>debug()</methodname>, and <methodname>error()</methodname>
      methods with a message.</para>

      <programlisting># Tests Logging
# @goal logtest
# @phase validate
class LogTest &lt; Mojo

  def execute
    info "Prints an INFO message"
    error "Prints an ERROR message"
    debug "Prints to the Console"
  end

end

run_mojo LogTest
</programlisting>
    </section>

    <section id="writing-plugins-alternative-sect-raising-mojo-error">
      <title>Raising a MojoError</title>

      <para>If there is an unrecoverable error in a Ruby Mojo, you will need
      to raise a <classname>MojoError</classname>. <xref
      linkend="ex-raise-ruby-error" /> shows you how to raise a
      <classname>MojoError</classname>. This example mojo prints out a message
      and then raises a <classname>MojoError</classname>.</para>

      <example id="ex-raise-ruby-error">
        <title>Raising a MojoError from a Ruby Mojo</title>

        <programlisting># Prints a Message
# @goal error
# @phase validate
class Error &lt; Mojo

  # @parameter type="java.lang.String" default-value="Hello Maven World" \
    expression="\${message}"
  # @required true
  # @readonly false
  # @deprecated false
  def message
  end

  def execute
    info $message
    raise MojoError.new( "This Mojo Raised a MojoError" )
  end

end

run_mojo Error
</programlisting>
      </example>

      <para>Running this Mojo, produces the following output:</para>

      <screen>$ mvn firstruby:error
...
INFO] [firstruby:error]
[INFO] Hello Maven World
[ERROR] This Mojo Raised a MojoError
</screen>
    </section>

    <section id="writing-plugins-alternative-sect-referencing-plexus-ruby">
      <title>Referencing Plexus Components from JRuby</title>

      <para>A Ruby Mojo can depend on a Plexus component. To do this, you
      would use the <varname>expression</varname> attribute of the
      <classname>@parameter</classname> annotation to specify a role and a
      hint for Plexus. The following example Ruby Mojo, depends upon an
      Archiver component which Maven will retrieve from Plexus.</para>

      <example>
        <title>Depending on a Plexus Component from a Ruby Mojo</title>

        <programlisting># This mojo tests plexus integration
# @goal testplexus
# @phase validate
class TestPlexus &lt; Mojo

  # @parameter type="org.codehaus.plexus.archiver.Archiver" \
expression="\${component.org.codehaus.plexus.archiver.Archiver#zip}"
  def archiver
  end

  def execute
    info $archiver
  end
end

run_mojo TestPlexus
</programlisting>
      </example>

      <para>Please note that the attributes for an annotation in a Ruby Mojo
      cannot span multiple lines. If you were to run this goal, you would see
      Maven attempt to retrieve a component from Plexus with a role of
      <varname>org.codehaus.plexus.arhiver.Archiver</varname> and a hint of
      <varname>zip</varname>.</para>
    </section>
  </section>
</chapter>
