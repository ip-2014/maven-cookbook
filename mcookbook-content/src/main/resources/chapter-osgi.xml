<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="osgi">
  <title>Cooking with Maven and OSGi</title>

  <section id="using-sect-intro">
    <title>Introduction</title>

    <para>OSGi is a stable, widely used framework for developing and deploying
    component-based systems. If you've been using Eclipse, you've already been
    using an OSGi container for a few years, and the pluggable and
    configurable nature of the <ulink
    url="http://www.eclipse.org">Eclipse</ulink> platform is a product of the
    OSGi standards. As a concept and as an approach, OSGi is a proven standard
    with an installed user base of millions and growing. It might feel like an
    emerging standard because solid tool support is just now emerging. Prior
    to the last year, you might have encountered OSGi "builds", but they were
    usually experienced via an IDE (such as Eclipse).</para>

    <para>Many are starting to view OSGi as the perfect solution both for
    deploying server-side applications and client-side GUI applications.. If
    you need a GUI front-end or a web application to interface with a database
    back-end, there is a rich array of standard components to choose from in
    the OSGi community. Before OSGi-based servers, if you wanted a full
    fledged application server with a Transaction provider and JMS
    integration, you had to either run some large, monolithic application
    server like <ulink
    url="http://www-01.ibm.com/software/websphere/">WebSphere</ulink>, or you
    had to hack some custom components to a lightweight servlet-container such
    as <ulink url="http://tomcat.apache.org">Apache Tomcat</ulink> or <ulink
    url="http://www.mortbay.org/jetty/">Jetty</ulink>. Today, you wouldn't
    install Jetty from scratch, you will install it as an OSGi bundle in an
    OSGi container such as <ulink
    url="http://felix.apache.org/site/index.html">Apache Felix</ulink>. If you
    needed an embedded database like <ulink
    url="http://db.apache.org/derby/">Apache Derby</ulink> or a transaction
    provider, you can now tell your container what bundles to deploy and every
    component is developed to operate in a standard operating environment.
    Once you've figured out how to instantiate an empty OSGi container such as
    Apache Felix there is no simpler deployment mechanism for your
    application, and once you've connected it to <ulink
    url="www.sonatype.com/products/nexus">Nexus Professional</ulink>, you've
    instantly solved the deployment problem in Java. This chapter takes you
    through the steps required to start using Maven and OSGi together and how
    to use Nexus Professional to support the distribution and deployment
    opportunities that are possible with an OSGi bundle repository
    (OBR).</para>

    <para>In this chapter, we introduce some tools and techniques you can use
    to start developing OSGi components (or bundles) using Maven. The
    following recipes focus on the intersection of Apache Felix, the <ulink
    url="http://www.ops4j.org/">OPS4J project</ulink>, and the Nexus
    repository manager as a bridge between Maven repositories and OSGi Bundle
    repositories. At the end of this chapter, you should have a clear picture
    of how to start developing OSGi-based applications using Maven.</para>
  </section>

  <section id="sect-osgi-generate-project">
    <title>Generating an OSGi Project with Maven</title>

    <section>
      <title>Problem</title>

      <para>You need to create a Maven multi-module project that allows you to
      develop a modular, OSGi-based web application.</para>
    </section>

    <section>
      <title>Solution</title>

      <para>Use the <ulink
      url="http://www.ops4j.org/projects/pax/construct/maven-pax-plugin/">Maven
      Pax Plugin</ulink> from OPS4J, and call the
      <varname>create-project</varname> goal. The following command-line will
      create a multi-module project with a groupId of
      <varname>org.sonatype.mcookbook</varname>, an artifactId of
      <varname>osgi-project</varname>, and a version of
      <varname>1.0-SNAPSHOT</varname>:</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">${root.example.dir}/osgi $ <command>mvn org.ops4j:maven-pax-plugin:create-project \
  -DgroupId=org.sonatype.mcookbook \
  -DartifactId=osgi-project \
  -Dversion=1.0-SNAPSHOT</command>
[INFO] Scanning for projects...
[INFO] artifact org.ops4j:maven-pax-plugin: checking for updates from central
[INFO] ------------------------------------------------------------------------
[INFO] Building Maven Default Project
[INFO]    task-segment: [org.ops4j:maven-pax-plugin:create-project] (aggregator-style)
[INFO] ------------------------------------------------------------------------
...
[INFO] [pax:create-project]
[INFO] Selecting latest archetype release within version range [1,2)
[INFO] artifact org.ops4j.pax.construct:maven-archetype-osgi-project: checking for updates from central
[INFO] ----------------------------------------------------------------------------
[INFO] Using following parameters for creating Archetype: maven-archetype-osgi-project:1.0.3
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: packageName, Value: org.sonatype.mcookbook.osgi-project
[INFO] Parameter: archetypeVersion, Value: 1.0.3
[INFO] Parameter: groupId, Value: org.sonatype.mcookbook
[INFO] Parameter: archetypeArtifactId, Value: maven-archetype-osgi-project
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: archetypeGroupId, Value: org.ops4j.pax.construct
[INFO] Parameter: basedir, Value: ${root.example.dir}/osgi
[INFO] Parameter: package, Value: org.sonatype.mcookbook.osgi-project
[INFO] Parameter: artifactId, Value: osgi-project
[INFO] ********************* End of debug info from resources from generated POM ***********************
[INFO] Archetype created in dir: ${root.example.dir}/osgi/osgi-project
</screen>

      <para>Once you've generated an OSGi project using the Pax Plugin, you
      will have the following directory structure:</para>

      <figure>
        <title>Project Structure Created by the OPS4J Pax Plugin</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/osgi_osgi-project-filesystems.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>If you want to verify that you can build the project successfully,
      run <command>mvn clean install</command>:</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">${root.example.dir}/osgi/osgi-project $ <command>mvn clean install</command>
[INFO] Reactor build order: 
[INFO]   org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]   osgi-project - plugin configuration
[INFO]   osgi-project - wrapper instructions
[INFO]   osgi-project - bundle instructions
[INFO]   osgi-project - imported bundles
[INFO] ------------------------------------------------------------------------
[INFO] Building org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]    task-segment: [clean, install]
[INFO] ------------------------------------------------------------------------
[INFO] [clean:clean]
[INFO] [site:attach-descriptor]
[INFO] [install:install]
[INFO] Installing ${root.example.dir}/osgi/osgi-project/target/pom-transformed.
xml to ${local.repo.dir}/org/sonatype/mcookbook/osgi-project/1.0-SNAPS
HOT/osgi-project-1.0-SNAPSHOT.pom
[INFO] ------------------------------------------------------------------------
[INFO] Building osgi-project - plugin configuration
[INFO]    task-segment: [clean, install]
...</screen>

      <note>
        <para>Instead of executing these goals manually, you can also download
        and install the Pax-Construct scripts which can be used to automate
        the process of creating a new OSGi project with the Pax plugin. For
        more information, see the <ulink
        url="http://www.ops4j.org/projects/pax/construct/">Pax Construct
        Quickstart page</ulink>.</para>
      </note>
    </section>

    <section>
      <title>Discussion</title>

      <para>The generated multi-module project structure contains a parent
      project with the supplied groupId, artifactId, and version, and a few
      submodules:</para>

      <variablelist>
        <varlistentry>
          <term>osgi-project/pom.xml</term>

          <listitem>
            <para>This is the parent POM</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>osgi-project/poms/compiled/pom.xml</term>

          <listitem>
            <para>This POM serves as the parent POM to all of the compiled
            OSGi components you will add to this osgi-project Maven
            project.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>osgi-project/poms/wrappers/pom.xml</term>

          <listitem>
            <para>If you can't find a particular library as an OSGi component,
            the Pax Construct tools allow you to wrap an existing dependency
            artifact into an OSGi bundle. The configuration for these wrapped
            bundles is stored in this POM.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>osgi-project/provision/pom.xml</term>

          <listitem>
            <para>This POM configures the Apache Felix runtime environment
            that you can start by running the <varname>pax:provision</varname>
            goal. If you need to import a bundle into your runtime
            environment, this is the POM that contains a reference to the
            corresponding Maven dependency.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <note>
        <para>The <filename>osgi-project/runner</filename> directory is not
        created until you run the <varname>pax:provision</varname> goal as
        shown in <xref linkend="osgi-sect-starting-osgi-container" />.</para>
      </note>
    </section>
  </section>

  <section id="osgi-sect-starting-osgi-container">
    <title>Starting an OSGi Container</title>

    <section>
      <title>Problem</title>

      <para>You created an OSGi project, not you want to see it running in an
      OSGi environment. You need to start an OSGi container and load imported
      bundles into the runtime environment.</para>
    </section>

    <section>
      <title>Solution</title>

      <para>First, creat an OSGi project by executing the commands in <xref
      linkend="sect-osgi-generate-project" />. Once you do this, you have a
      structure that has been designed to support OSGi development with Maven.
      To start the Apache Felix container, run <command>mvn install
      pax:provision</command> from the <filename>osgi-project/</filename>
      directory:</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">${root.example.dir}/osgi/osgi-project $ <command>mvn install pax:provision</command>
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]   osgi-project - plugin configuration
[INFO]   osgi-project - wrapper instructions
[INFO]   osgi-project - bundle instructions
[INFO]   osgi-project - imported bundles
...
[INFO] [pax:provision]
[INFO] ~~~~~~~~~~~~~~~~~~~
[INFO]  No bundles found! 
[INFO] ~~~~~~~~~~~~~~~~~~~
    ______  ________  __  __
   / __  / /  __   / / / / /
  /  ___/ /  __   / _\ \ _/
 /  /    /  / /  / / _\ \
/__/    /__/ /__/ /_/ /_/

Pax Runner (1.0.0) from OPS4J - http://www.ops4j.org
----------------------------------------------------

 -&gt; Using config [classpath:META-INF/runner.properties]
 -&gt; Using only arguments from command line
 -&gt; Scan bundles from [${root.example.dir}/osgi/osgi-project/runner/deploy-pom.xml]
 -&gt; Scan bundles from [scan-pom:file:/${root.example.dir}/osgi/osgi-project/runner/deploy-pom.xml]
 -&gt; Preparing framework [Felix 1.8.0]
 -&gt; Downloading bundles...
 -&gt; Using execution environment [J2SE-1.5]
 -&gt; Runner has successfully finished his job!


Welcome to Felix.
=================

-&gt; 
</screen>

      <note>
        <para>Instead of executing these goals manually, you can also download
        and install the Pax-Construct scripts which can be used to automate
        the process of running Apache Felix with the Pax plugin. For more
        information, see the <ulink
        url="http://www.ops4j.org/projects/pax/construct/">Pax Construct
        Quickstart page</ulink>.</para>
      </note>
    </section>

    <section>
      <title>Discussion</title>

      <para>When you started up Felix, notice that the line directly following
      the execution of the <varname>pax:provision</varname> goal says "No
      bundles found!". By running <varname>pax:provision</varname>, you've
      started the Felix OSGi service platform. Felix uses the configuration
      from a properties file and then scans two deploy-pom.xml files for
      bundles that it should download and install. Finding none, it presents a
      simple prompt and awaits orders. At this point, we have an empty
      container that isn't running any custom logic or downloading any OSGi
      bundles.</para>

      <para>The first time you ran <varname>pax:provision</varname>, the Pax
      plugin created a <filename>runner</filename> directory under
      <varname>osgi-project</varname> which captures the configuration of the
      runtime environment. This <filename>runner</filename> directory contains
      the following files and directories:</para>

      <variablelist>
        <varlistentry>
          <term>osgi-project/runner/deploy-pom.xml</term>

          <listitem>
            <para>This POM file is generated using Pax-Construct, it contains
            some configuration parameters for the Apache Felix
            container.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>osgi-project/runner/bundles</term>

          <listitem>
            <para>This directory contains OSGi bundles which have been
            downloaded for use in Apache Felix.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>osgi-project/runner/felix</term>

          <listitem>
            <para>This directory contains the runtime files that are required
            for Apache Felix, this includes a config.ini file and a cache
            directory.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Once you have the console for Felix loaded, you can control the
      platform, load components from remote repositories, list all of the
      running components, and start and stop components. Try executing the
      command <command>help</command> to see a list of available
      commands:</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">-&gt; <command>help</command>
bundlelevel &lt;level&gt; &lt;id&gt; ... | &lt;id&gt; - set or get bundle start level.
cd [&lt;base-URL&gt;]                     - change or display base URL.
exports &lt;id&gt; ...                    - list exported packages.
headers [&lt;id&gt; ...]                  - display bundle header properties.
help                                - display impl commands.
imports &lt;id&gt; ...                    - list imported packages.
install &lt;URL&gt; [&lt;URL&gt; ...]           - install bundle(s).
ps [-l | -s | -u]                   - list installed bundles.
refresh [&lt;id&gt; ...]                  - refresh packages.
requirers &lt;id&gt; ...                  - list requiring bundles.
requires &lt;id&gt; ...                   - list required bundles.
resolve [&lt;id&gt; ...]                  - attempt to resolve the specified bundles.
scr help                            - Declarative Services Runtime
services [-u] [-a] [&lt;id&gt; ...]       - list registered or used services.
shutdown                            - shutdown framework.
start [-t] &lt;id&gt; [&lt;id&gt; &lt;URL&gt; ...]    - start bundle(s).
startlevel [&lt;level&gt;]                - get or set framework start level.
stop [-t] &lt;id&gt; [&lt;id&gt; ...]           - stop bundle(s).
uninstall &lt;id&gt; [&lt;id&gt; ...]           - uninstall bundle(s).
update &lt;id&gt; [&lt;URL&gt;]                 - update bundle.
version                             - display version of framework.
</screen>

      <para>If you execute the <command>ps</command> command, you can see a
      list of bundles with IDs that are running in the Felix container. You
      can start and stop bundles by running <command>start</command> and
      <command>stop</command> followed by the ID of the specific bundle you
      want to control. You can also install and uninstall bundles in the
      running container. Over the next few recipes we're going to fill in this
      picture a bit by wrapping existing JARs, importing existing OSGi
      bundles, and writing a custom OSGi service.</para>
    </section>

    <section>
      <title>Resources</title>

      <para>For more information about Apache Felix, see <ulink
      url="http://felix.apache.org/site/index.html">http://felix.apache.org/site/index.html</ulink>.</para>
    </section>
  </section>

  <section>
    <title>Importing OSGi Bundles with Maven</title>

    <section>
      <title>Problem</title>

      <para>You want to configure your OSGi runtime to load bundles on
      startup.</para>
    </section>

    <section>
      <title>Solution</title>

      <para>Import OSGi bundles from the Maven repository. While the Maven
      repository wasn't designed for OSGi like the OSGi Bundle Repositoriy
      (OBR) repository format, it contains a few components which contain the
      appropriate metadata to be referenced as OSGi components. To configure
      your runtime environment to load these components at runtime, you will
      need to invoke the pax:import-bundle goal.</para>

      <para>As shown in the following screen listing, you are going to import
      several OSGi bundles from the Maven repository. First you are going to
      install the Apache Felix Web Management Console and then you are going
      to install some of its requirements. To install the first OSGi bundle
      run the following command:</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">${root.example.dir}/osgi/osgi-project $ <command>mvn pax:import-bundle \
    -DgroupId=org.apache.felix \
    -DartifactId=org.apache.felix.webconsole \
    -Dversion=1.2.8</command>
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]   osgi-project - plugin configuration
[INFO]   osgi-project - wrapper instructions
[INFO]   osgi-project - bundle instructions
[INFO]   osgi-project - imported bundles
[INFO] ------------------------------------------------------------------------
[INFO] Building org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]    task-segment: [pax:import-bundle] (aggregator-style)
[INFO] ------------------------------------------------------------------------
[INFO] [pax:import-bundle]
Downloading: http://repo1.maven.org/maven2/org/apache/felix/org.apache.felix.webconsole/1.2.8/org.apache.felix.webconsole-1.2.8.pom
6K downloaded  (org.apache.felix.webconsole-1.2.8.pom)
Downloading: http://repo1.maven.org/maven2/org/apache/felix/felix/1.0.4/felix-1.0.4.pom
14K downloaded  (felix-1.0.4.pom)
[INFO] Importing Apache Felix Web Management Console to org.sonatype.mcookbook.osgi-project.build:provision:pom:1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 6 seconds
[INFO] Finished at: Mon Jul 13 18:30:37 CDT 2009
[INFO] Final Memory: 8M/16M
[INFO] ------------------------------------------------------------------------
</screen>

      <para>After installing the Apache Felix Web Management console, you will
      need to install some of its prerequisites. The following commands
      install version 2.1 of the Java Servlet API, the Jetty HTTP server, and
      the <varname>org.apache.felix.scr</varname> component. As you can see,
      some of the OSGi bundle you are installing are simple libraries and
      APIs, while others are complex servers.</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">${root.example.dir}/osgi/osgi-project $ <command>mvn pax:import-bundle \
    -DgroupId=org.apache.felix \
    -DartifactId=javax.servlet
    -Dversion=1.0.0</command>
${root.example.dir}/osgi/osgi-project $ <command>mvn pax:import-bundle \
    -DgroupId=org.apache.felix \
    -DartifactId=org.apache.felix.scr \
    -Dversion=1.0.8</command>
${root.example.dir}/osgi/osgi-project $ <command>mvn pax:import-bundle \
    -DgroupId=org.apache.felix \
    -DartifactId=org.apache.felix.http.jetty \
    -Dversion=1.0.1</command></screen>

      <para>Once you have bundled these OSGi bundles, you can start your
      runtme environment. Because the <varname>pax:import-bundle</varname>
      goal changes some of the POMs in your <varname>osgi-project</varname>,
      you will need to run <command>mvn install</command> before you can run
      <command>mvn pax:provision</command>. After importing bundles, they will
      appear in <filename>provision/pom.xml</filename>.</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">${root.example.dir}/osgi/osgi-project $ <command>mvn install pax:provision</command>
[INFO] [pax:provision]
[INFO] Installing ${root.example.dir}/osgi/osgi-project/runner/target/pom-transformed.xml 
       to ${local.repo.dir}/org/sonatype/mcookbook/osgi-project/build/deployment/1.0-SNAPSHOT/deployment-1.0-SNAPSHOT.pom
    ______  ________  __  __
   / __  / /  __   / / / / /
  /  ___/ /  __   / _\ \ _/
 /  /    /  / /  / / _\ \
/__/    /__/ /__/ /_/ /_/

Pax Runner (1.0.0) from OPS4J - http://www.ops4j.org
----------------------------------------------------

 -&gt; Using config [classpath:META-INF/runner.properties]
 -&gt; Using only arguments from command line
 -&gt; Scan bundles from [${root.example.dir}/osgi/osgi-project/runner/deploy-pom.xml]
 -&gt; Scan bundles from [scan-pom:file:${root.example.dir}/osgi/osgi-project/runner/deploy-pom.xml]
 -&gt; Provision bundle [mvn:org.apache.felix/org.apache.felix.webconsole/1.2.8, 
at default start level, bundle will be started, bundle will be loaded from the cache]
 -&gt; Provision bundle [mvn:org.apache.felix/javax.servlet/1.0.0, at default start 
level, bundle will be started, bundle will be loaded from the cache]
 -&gt; Provision bundle [mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1, 
at default start level, bundle will be started, bundle will be loaded from the cache]
 -&gt; Provision bundle [mvn:org.apache.felix/org.apache.felix.scr/1.0.8, at default 
start level, bundle will be started, bundle will be loaded from the cache]
 -&gt; Preparing framework [Felix 1.8.0]
 -&gt; Downloading bundles...
 -&gt; mvn:org.apache.felix/org.apache.felix.webconsole/1.2.8 : 102399 bytes 
 -&gt; mvn:org.apache.felix/javax.servlet/1.0.0 : 30450 bytes @ [ 10150kBps ]
 -&gt; mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1 : 102399 bytes @ 
 -&gt; mvn:org.apache.felix/org.apache.felix.scr/1.0.8 : 112058 bytes @ [ 8619kBps ]
 -&gt; Using execution environment [J2SE-1.5]
 -&gt; Runner has successfully finished his job!


Welcome to Felix.
=================

-&gt; org.mortbay.log:Logging to org.mortbay.log via org.apache.felix.http.jetty.LogServiceLog
org.mortbay.log:Init SecureRandom.
org.mortbay.log:started org.mortbay.jetty.servlet.HashSessionIdManager@34a33d
org.mortbay.log:started org.mortbay.jetty.servlet.HashSessionManager@46ac5a
org.mortbay.log:starting OsgiServletHandler@dd7786
org.mortbay.log:started OsgiServletHandler@dd7786
org.mortbay.log:starting SessionHandler@d23e75
org.mortbay.log:started SessionHandler@d23e75
org.mortbay.log:starting org.mortbay.jetty.servlet.Context@9deddb{/,null}
org.mortbay.log:starting ErrorHandler@28bda
org.mortbay.log:started ErrorHandler@28bda
org.mortbay.log:started org.mortbay.jetty.servlet.Context@9deddb{/,null}
org.mortbay.log:jetty-6.1.x
org.mortbay.log:started Realm[OSGi HTTP Service Realm]==[]
org.mortbay.log:started org.mortbay.thread.QueuedThreadPool@f13b08
org.mortbay.log:starting Server@5a936b
org.mortbay.log:started org.mortbay.jetty.nio.SelectChannelConnector$1@9576c3
org.mortbay.log:Started SelectChannelConnector@0.0.0.0:8080
org.mortbay.log:started SelectChannelConnector@0.0.0.0:8080
org.mortbay.log:started Server@5a936b
org.mortbay.log:started /system/console/*
org.mortbay.log:started /system/console/res
</screen>

      <para>After running mvn pax:provision, you have an instance of Felix
      that is running the Apache Felix Web Management Console application.
      Fire up a web brower, and go to <ulink
      url="http://localhost:8080/system/console">http://localhost:8080/system/console</ulink>
      to load the interface. The default administrative username and password
      is <varname>admin</varname>/<varname>admin</varname>.</para>

      <figure id="fig-osgi-felix-web-management">
        <title>Apache Felix Web Management Console</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/osgi_felix-admin-console.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <note>
        <para>Instead of executing these goals manually, you can also download
        and install the Pax-Construct scripts which can be used to automate
        the process of importing bundles with the Pax plugin. For more
        information, see the <ulink
        url="http://www.ops4j.org/projects/pax/construct/">Pax Construct
        Quickstart page</ulink>.</para>
      </note>
    </section>

    <section>
      <title>Discussion</title>

      <para>Once you start the web management console for Apache Felix, you
      can start to manage the installed bundles. You can start and stop
      bundles via the interface, and you can install bundles from remote
      repositories. If you prefer to use the shell interface from the previous
      recipe, click on the Shell interface and you can enter in any of the
      commands you used at the command-line Felix management console as shown
      in <xref linkend="fig-osgi-felix-admin-console-shell" />.</para>

      <figure id="fig-osgi-felix-admin-console-shell">
        <title>Running the Apache Felix Shell via the Administrative Web
        Console</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/osgi_felix-admin-console-shell.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>You can manage Felix interactions with events and repositories,
      and you can also restart, stop, and change the default run levels.
      Clicking on the "System Information" tab will also allow you to get some
      statistics about the runtime container as shown in <xref
      linkend="fig-osgi-felix-admin-console-system" />.</para>

      <figure id="fig-osgi-felix-admin-console-system">
        <title>Managing the Apache Felix via System Information</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/osgi_felix-admin-console-system.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>When we imported these bundles into the project, they were added
      to the <filename>provision/pom.xml</filename> file, and we had to
      install all of a bundle's dependencies one by one. Instead of listing
      out each of bundle's dependencies on the command-line, we can tell the
      Pax plugin to import transitive bundle dependencies and optional
      bundles. The following command line will instruct the Pax plugin to
      install a bundle's full compile and runtime dependencies in
      <filename>provision/pom.xml</filename>.</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">${root.example.dir}/osgi/osgi-project $ <command>mvn pax:import-bundle \
                                        -DgroupId=org.apache.felix \
                                        -DartifactId=org.apache.felix.http.jetty \
                                        -Dversion=1.0.1 \
                                        -DimportTransitive=true \
                                        -DimportOptional=true \
                                        -DwidenScope=true</command></screen>

      <para>The <varname>importTransitive</varname> and
      <varname>importOptional</varname> options tell the Pax plugin to look at
      the OBR metadata to find bundle dependencies. The
      <varname>widenScope</varname> parameter tells the Pax plugin to install
      all compile and runtime dependencies as bundles in
      <filename>provision/pom.xml</filename>.</para>
    </section>

    <section>
      <title>Resources</title>

      <para>For more information about the Apache Felix Web Console, see
      <ulink
      url="http://cwiki.apache.org/confluence/display/FELIX/Apache+Felix+Web+Console">http://cwiki.apache.org/confluence/display/FELIX/Apache+Felix+Web+Console</ulink>.</para>
    </section>
  </section>

  <section>
    <title>Creating an OSGi Bundle with Maven</title>

    <section>
      <title>Problem</title>

      <para>You need to create you own OSGi bundle project to integrate with
      the runtime environment created in the previous recipes.</para>
    </section>

    <section>
      <title>Solution</title>

      <para>Run the <varname>pax:create-bundle</varname> goal. The following
      screen listing runs the <varname>pax:create-bundle</varname> to create a
      new Maven project for an OSGi bundle with a package
      org.sonatype.mcookbook and a name <varname>osgi-bundle</varname>. Run
      this command from the
      <filename>${root.example.dir}/osgi/osgi-project</filename>
      directory:</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">${root.example.dir}/osgi/osgi-project $ <command>mvn pax:create-bundle \
  -Dpackage=org.sonatype.mcookbook \
  -Dname=osgi-bundle \
  -Dversion=1.0-SNAPSHOT</command>
</screen>

      <para>Once this command has been completed, run <command>mvn install
      pax:provision</command> and then verify that the component is present by
      running <command>ps</command> at the Felix administrative
      console:</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">${root.example.dir}/osgi/osgi-project $ <command>mvn install pax:provision</command>
...
[INFO] Reactor build order: 
[INFO]   org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]   osgi-project - plugin configuration
[INFO]   osgi-project - wrapper instructions
[INFO]   osgi-project - bundle instructions
[INFO]   osgi-project - imported bundles
[INFO]   org.sonatype.mcookbook
..
[INFO] ------------------------------------------------------------------------
[INFO] Building org.sonatype.mcookbook
[INFO]    task-segment: [install]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources]
[WARNING] Using platform encoding (MacRoman actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 1 resource
[INFO] Copying 0 resource
[INFO] [pax:compile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [pax:testCompile]
[INFO] No sources to compile
...
[INFO] [install:install]
[INFO] Installing ${root.example.dir}/osgi/osgi-project/org.sonatype.mcookbook/target/org.sonatype.mcookbook-1.0-SNAPSHOT.jar to ${local.repo.dir}/.m2/repository/org/sonatype/mcookbook/osgi-project/org.sonatype.mcookbook/1.0-SNAPSHOT/org.sonatype.mcookbook-1.0-SNAPSHOT.jar
[INFO] [bundle:install]
[INFO] Parsing file:${local.repo.dir}/.m2/repository/repository.xml
[INFO] Installing org/sonatype/mcookbook/osgi-project/org.sonatype.mcookbook/1.0-SNAPSHOT/org.sonatype.mcookbook-1.0-SNAPSHOT.jar
[INFO] Writing OBR metadata
[INFO] ------------------------------------------------------------------------
[INFO] Building org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]    task-segment: [pax:provision] (aggregator-style)
[INFO] ------------------------------------------------------------------------
</screen>

      <para>The Pax plugin bundles the new OSGi bundle into a JAR file which
      is deployed to the local Maven repository in ~/.m2/repository. The
      resulting artifact has the following identifiers:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>groupId:</emphasis>
          <varname>org.sonatype.mcookbook.osgi-project</varname></para>
        </listitem>

        <listitem>
          <para><emphasis>artifactId:</emphasis>
          <varname>org.sonatype.mcookbook</varname></para>
        </listitem>

        <listitem>
          <para><emphasis>version:</emphasis>
          <varname>1.0-SNAPSHOT</varname></para>
        </listitem>
      </itemizedlist>

      <para>Continuing on with this particular execution of Maven, lines
      corresponding to this new custom OSGi bundle have been highlighted. The
      <varname>mvn:org.sonatype.mcookbook.osgi-project/org.sonatype.mcookbook/1.0-SNAPSHOT</varname>
      is provisioned to Apache Felix and after running the
      <command>ps</command> command we see that the
      <varname>org.sonatype.mcookbook</varname> bundle is deployed with ID
      5.</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">[INFO] [pax:provision]
[INFO] Installing ${root.example.dir}/osgi/osgi-project/runner/target/pom-transformed.xml to ${local.repo.dir}/.m2/repository/org/sonatype/mcookbook/osgi-project/build/deployment/1.0-SNAPSHOT/deployment-1.0-SNAPSHOT.pom

Pax Runner (1.0.0) from OPS4J - http://www.ops4j.org
----------------------------------------------------

 -&gt; Using config [classpath:META-INF/runner.properties]
 -&gt; Using only arguments from command line
 -&gt; Scan bundles from [${root.example.dir}/osgi/osgi-project/runner/deploy-pom.xml]
 -&gt; Scan bundles from [scan-pom:file:${root.example.dir}/osgi/osgi-project/runner/deploy-pom.xml]
 -&gt; Provision bundle [mvn:org.apache.felix/org.apache.felix.webconsole/1.2.8, at default start level, bundle will be started, bundle will be loaded from the cache]
 -&gt; Provision bundle [mvn:org.apache.felix/javax.servlet/1.0.0, at default start level, bundle will be started, bundle will be loaded from the cache]
 -&gt; Provision bundle [mvn:org.apache.felix/org.apache.felix.scr/1.0.8, at default start level, bundle will be started, bundle will be loaded from the cache]
 -&gt; Provision bundle [mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1, at default start level, bundle will be started, bundle will be loaded from the cache]
<emphasis> -&gt; Provision bundle [mvn:org.sonatype.mcookbook.osgi-project/org.sonatype.mcookbook/1.0-SNAPSHOT, at default start level, bundle will be started, bundle will be loaded from the cache]
</emphasis> -&gt; Preparing framework [Felix 1.8.0]
...
 -&gt; Runner has successfully finished his job!


Welcome to Felix.
=================

-&gt; org.mortbay.log:Logging to org.mortbay.log via org.apache.felix.http.jetty.LogServiceLog
STARTING org.sonatype.mcookbook
REGISTER org.sonatype.mcookbook.ExampleService
org.mortbay.log:Init SecureRandom.
...
org.mortbay.log:started /system/console/res

-&gt; <command>ps</command>
START LEVEL 6
   ID   State         Level  Name
[   0] [Active     ] [    0] System Bundle (1.8.0)
[   1] [Active     ] [    5] Apache Felix Web Management Console (1.2.8)
[   2] [Active     ] [    5] Servlet 2.1 API (1.0.0)
[   3] [Active     ] [    5] Apache Felix Declarative Services (1.0.8)
[   4] [Active     ] [    5] HTTP Service (1.0.1)
<emphasis>[   5] [Active     ] [    5] org.sonatype.mcookbook (1.0.0.SNAPSHOT)</emphasis>
[   6] [Active     ] [    1] osgi.compendium (4.1.0.build-200702212030)
[   7] [Active     ] [    1] Apache Felix Shell Service (1.2.0)
[   8] [Active     ] [    1] Apache Felix Shell TUI (1.2.0)
</screen>

      <note>
        <para>Instead of executing these goals manually, you can also download
        and install the Pax-Construct scripts. For more information, see the
        <ulink url="http://www.ops4j.org/projects/pax/construct/">Pax
        Construct Quickstart page</ulink>.</para>
      </note>
    </section>

    <section>
      <title>Discussion</title>

      <para>So you just deployed your own OSGi bundle to a OSGi runtime
      environment, but where is the code? And, what is in this OSGi bundle
      anyway? Open up your osgi-project directory and you'll see a directory
      named org.sonatype.mcookbook/ with a directory structure similar to that
      shown in <xref linkend="fig-osgi-custom-bundle" />.</para>

      <figure id="fig-osgi-custom-bundle">
        <title>Custom Bundle org.sonatype.mcookbook</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/osgi_osgi-custom-bundle-fs.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>This sample project defines a single interface named
      <classname>ExampleService</classname> which offers a single method
      <methodname>scramble()</methodname>.</para>

      <example>
        <title>ExampleService Interface</title>

        <programlisting db:wrap="force"
                        xmlns:db="http://discursive.com/plugins/docbook">package org.sonatype.mcookbook;

/**
 * Public API representing an example OSGi service
 */
public interface ExampleService
{
    // public methods go here...

    String scramble( String text );
}</programlisting>
      </example>

      <para>This <classname>ExampleService</classname> interface is
      implemented by the class <classname>ExampleServiceImpl</classname> shown
      in the following program listing.</para>

      <example>
        <title>ExampleServiceImpl Implementation of the ExampleService
        Interface</title>

        <programlisting db:wrap="force"
                        xmlns:db="http://discursive.com/plugins/docbook">package org.sonatype.mcookbook.internal;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.sonatype.mcookbook.ExampleService;

/**
 * Internal implementation of our example OSGi service
 */
public final class ExampleServiceImpl
    implements ExampleService
{
    // implementation methods go here...

    public String scramble( String text )
    {
        List charList = new ArrayList();

        char[] textChars = text.toCharArray();
        for( int i = 0; i &lt; textChars.length; i++ )
        {
            charList.add( new Character( textChars[i] ) );
        }

        Collections.shuffle( charList );

        char[] mixedChars = new char[text.length()];
        for( int i = 0; i &lt; mixedChars.length; i++ )
        {
            mixedChars[i] = ( (Character) charList.get( i ) ).charValue();
        }

        return new String( mixedChars );
    }
}
</programlisting>
      </example>

      <para>Notice how neither <classname>ExampleService</classname> nor
      <classname>ExampleServiceImpl</classname> have any knowledge of the OSGi
      environment. For the <classname>ExampleService</classname> to be made
      available to the OSGi environment, there needs to be a
      <classname>BundleActivator</classname> which can instantiate the service
      and interact with the OSGi environment. This is included in the project
      in the form of an <classname>ExampleActivator</classname> which has a
      method named <methodname>start()</methodname> which takes a
      <classname>BundleContext</classname> instance and which calls
      <methodname>registerService()</methodname> on this context with an
      instance of <classname>ExampleServiceImpl</classname>.</para>

      <example>
        <title>The BundleActivator implementation: ExampleActivator</title>

        <programlisting db:wrap="force"
                        xmlns:db="http://discursive.com/plugins/docbook">package org.sonatype.mcookbook.internal;

import java.util.Dictionary;
import java.util.Properties;

import org.osgi.framework.BundleActivator;
import org.osgi.framework.BundleContext;

import org.sonatype.mcookbook.ExampleService;

/**
 * Extension of the default OSGi bundle activator
 */
public final class ExampleActivator
    implements BundleActivator
{
    /**
     * Called whenever the OSGi framework starts our bundle
     */
    public void start( BundleContext bc )
        throws Exception
    {
        System.out.println( "STARTING org.sonatype.mcookbook" );

        Dictionary props = new Properties();
        // add specific service properties here...

        System.out.println( "REGISTER org.sonatype.mcookbook.ExampleService" );

        // Register our example service implementation in the OSGi service registry
        bc.registerService( ExampleService.class.getName(), new ExampleServiceImpl(), props );
    }

    /**
     * Called whenever the OSGi framework stops our bundle
     */
    public void stop( BundleContext bc )
        throws Exception
    {
        System.out.println( "STOPPING org.sonatype.mcookbook" );

        // no need to unregister our service - the OSGi framework handles it for us
    }
}
</programlisting>
      </example>

      <para>Lastly, the <filename>osgi.bnd</filename> file in
      <filename>${root.example.dir}/osgi/osgi-project/org.sonatype.mcookbook</filename>
      supplies the bundle configuration which identifies the
      <classname>ExampleActivator</classname> class as the appropriate
      <varname>Bundle-Activator</varname>.</para>

      <example>
        <title>osgi.bnd Bundle Configuration</title>

        <programlisting db:wrap="force"
                        xmlns:db="http://discursive.com/plugins/docbook">#-----------------------------------------------------------------
# Use this file to add customized Bnd instructions for the bundle
#-----------------------------------------------------------------

Bundle-Activator: \${bundle.namespace}.internal.ExampleActivator
</programlisting>
      </example>
    </section>
  </section>

  <section>
    <title>Starting an Alternative OSGi Framework (Knopflerfish)</title>

    <section>
      <title>Problem</title>

      <para>You want to run your OSGi bundles in the Knopflerfish OSGi runtime
      environment.</para>
    </section>

    <section>
      <title>Solution</title>

      <para>Pass in the framework configuration parameter when running the
      <varname>pax:provision</varname> goal. To start Knopflerfish, run
      <command>mvn pax:provision -Dframework=kf</command>.</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">${root.example.dir}/osgi/osgi-project $ <command>mvn pax:provision -Dframework=kf</command>
[INFO] Scanning for projects...
...
[INFO] [pax:provision]
[INFO] Installing ${root.example.dir}/osgi/osgi-project/runner/target/pom-transformed.xml to /Users/Tim/.m2/repository/org/sonatype/mcookbook/osgi-project/build/deployment/1.0-SNAPSHOT/deployment-1.0-SNAPSHOT.pom
[INFO] artifact org.ops4j.pax.runner:pax-runner: checking for updates from central
Downloading: http://repo1.maven.org/maven2/org/ops4j/pax/runner/pax-runner/1.1.1/pax-runner-1.1.1.jar
1067K downloaded  (pax-runner-1.1.1.jar)
    ______  ________  __  __
   / __  / /  __   / / / / /
  /  ___/ /  __   / _\ \ _/
 /  /    /  / /  / / _\ \
/__/    /__/ /__/ /_/ /_/

Pax Runner (1.1.1) from OPS4J - http://www.ops4j.org
----------------------------------------------------

 -&gt; Using config [classpath:META-INF/runner.properties]
 -&gt; Using only arguments from command line
 -&gt; Scan bundles from [${root.example.dir}/osgi/osgi-project/runner/deploy-pom.xml]
 -&gt; Scan bundles from [scan-pom:file:${root.example.dir}/osgi/osgi-project/runner/deploy-pom.xml]
...
 -&gt; Preparing framework [Knopflerfish 2.3.1]
 -&gt; Downloading bundles...
 -&gt; Knopflerfish 2.3.1 : 366660 bytes @ [ 160kBps ]
 -&gt; org.osgi.compendium : 689150 bytes @ [ 256kBps ]
 -&gt; Knopflerfish Console : 36329 bytes @ [ 55kBps ]
 -&gt; Knopflerfish Console TTY : 6153 bytes @ [ 1538kBps ]
 -&gt; Knopflerfish Framework Commands : 26090 bytes @ [ 158kBps ]
 -&gt; mvn:org.apache.felix/org.apache.felix.webconsole/1.2.8 : 102399 bytes @ [ 8533kBps -&gt; mvn:org.apache.felix/org.apache.felix.webconsole/1.2.8 : 204799 bytes @ [ 4654kBps -&gt; mvn:org.apache.felix/org.apache.felix.webconsole/1.2.8 : 307199 bytes @ [ 5585kBps -&gt; mvn:org.apache.felix/org.apache.felix.webconsole/1.2.8 : 409599 bytes @ [ 6206kBps -&gt; mvn:org.apache.felix/org.apache.felix.webconsole/1.2.8 : 507026 bytes @ [ 6671kBps ]
 -&gt; mvn:org.apache.felix/javax.servlet/1.0.0 : 30450 bytes @ [ 7612kBps ]
 -&gt; mvn:org.apache.felix/org.apache.felix.scr/1.0.8 : 112058 bytes @ [ 9338kBps ]
 -&gt; mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1 : 102399 bytes @ [ 2438kBps -&gt; mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1 : 204799 bytes @ [ 3938kBps -&gt; mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1 : 307199 bytes @ [ 4876kBps -&gt; mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1 : 409599 bytes @ [ 5535kBps -&gt; mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1 : 511999 bytes @ [ 5953kBps -&gt; mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1 : 614399 bytes @ [ 6334kBps -&gt; mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1 : 716799 bytes @ [ 6699kBps -&gt; mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1 : 769485 bytes @ [ 6809kBps ]
 -&gt; mvn:org.sonatype.mcookbook.osgi-project/org.sonatype.mcookbook/1.0-SNAPSHOT : conn -&gt; mvn:org.sonatype.mcookbook.osgi-project/org.sonatype.mcookbook/1.0-SNAPSHOT : 5388 bytes @ [ 128kBps ]
 -&gt; Using execution environment [J2SE-1.5]
 -&gt; Runner has successfully finished his job!

Knopflerfish OSGi framework, version 4.1.3
Copyright 2003-2009 Knopflerfish. All Rights Reserved.

See http://www.knopflerfish.org for more information.
Loading xargs url file:knopflerfish/config.ini
Installed and started: file:bundles/osgi.compendium_4.0.1.jar (id#1)
Installed and started: file:bundles/org.knopflerfish.bundle.console_2.0.1.jar (id#2)
Installed and started: file:bundles/org.knopflerfish.bundle.consoletty-IMPL_2.0.0.jar (id#3)
Installed and started: file:bundles/org.knopflerfish.bundle.frameworkcommands-IMPL_2.0.5.jar (id#4)
Installed and started: file:bundles/org.apache.felix.webconsole_1.2.8.jar (id#5)
Installed and started: file:bundles/org.apache.felix.javax.servlet_1.0.0.jar (id#6)
Installed and started: file:bundles/org.apache.felix.scr_1.0.8.jar (id#7)
Installed and started: file:bundles/org.apache.felix.http.jetty_1.0.1.jar (id#8)
Installed and started: file:bundles/org.sonatype.mcookbook_1.0.0.SNAPSHOT.jar (id#9)
&gt; STARTING org.sonatype.mcookbook
REGISTER org.sonatype.mcookbook.ExampleService
org.mortbay.log:Logging to org.mortbay.log via org.apache.felix.http.jetty.LogServiceLog
Framework launched
org.mortbay.log:Init SecureRandom.
org.mortbay.log:started org.mortbay.jetty.servlet.HashSessionIdManager@b890dc
org.mortbay.log:started org.mortbay.jetty.servlet.HashSessionManager@6321e6
org.mortbay.log:starting OsgiServletHandler@4683c0
org.mortbay.log:started OsgiServletHandler@4683c0
org.mortbay.log:starting SessionHandler@73bc22
org.mortbay.log:started SessionHandler@73bc22
org.mortbay.log:starting org.mortbay.jetty.servlet.Context@a0d346{/,null}
org.mortbay.log:starting ErrorHandler@449afc
org.mortbay.log:started ErrorHandler@449afc
org.mortbay.log:started org.mortbay.jetty.servlet.Context@a0d346{/,null}
org.mortbay.log:jetty-6.1.x
org.mortbay.log:started Realm[OSGi HTTP Service Realm]==[]
org.mortbay.log:started org.mortbay.thread.QueuedThreadPool@39491b
org.mortbay.log:starting Server@eea7f0
org.mortbay.log:started org.mortbay.jetty.nio.SelectChannelConnector$1@31db04
org.mortbay.log:Started SelectChannelConnector@0.0.0.0:8080
org.mortbay.log:started SelectChannelConnector@0.0.0.0:8080
org.mortbay.log:started Server@eea7f0
*INFO * Failed to instantiate plugin org.apache.felix.webconsole.internal.deppack.DepPackServlet. Reason: java.lang.NoClassDefFoundError: org/osgi/service/deploymentadmin/DeploymentException
*INFO * Failed to instantiate plugin org.apache.felix.webconsole.internal.misc.ShellServlet. Reason: java.lang.NoClassDefFoundError: org.apache.felix.shell.ShellService
org.mortbay.log:started /system/console/*
org.mortbay.log:started /system/console/res
</screen>

      <para>The output of this last command is going to be somewhat confusing.
      Even though we're starting the application using Knopflerfish, we're
      still deploying some OSGi components from Apache Felix, and we're
      deploying the Apache Felix Web Management Console. The interesting thing
      about OSGi: it all still works. The Apache Felix Web Management Console
      can be used to manage standard OSGi component even when it is running in
      the Knopflerfish container. To test this, go to
      http://localhost:8080/system/console, and log in with the default
      admin/admin credentials. Click on the configuration status tab, and then
      scroll down to see properties that prove that your Apache Felix web
      management console is running atop Knopflerfish.</para>
    </section>

    <section>
      <title>Discussion</title>

      <para>For more information about Knopflerfish, see <ulink
      url="http://www.knopflerfish.org">http://www.knopflerfish.org</ulink>.
      For more information about the frameworks available to the Pax plugin,
      see <ulink
      url="http://paxrunner.ops4j.org/space/Pax+Runner">http://paxrunner.ops4j.org/space/Pax+Runner</ulink>.</para>
    </section>
  </section>

  <section>
    <title>Starting an Alternative OSGi Framework (Equinox)</title>

    <section>
      <title>Problem</title>

      <para>You want to run your OSGi bundles in Eclipse's Equinox OSGi
      runtime environment.</para>
    </section>

    <section>
      <title>Solution</title>

      <para>Pass in the framework configuration parameter when running the
      <varname>pax:provision</varname> goal. To start Knopflerfish, run
      <command>mvn pax:provision -Dframework=equinox</command>.</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">${root.example.dir}/osgi/osgi-project $ <command>mvn pax:provision -Dframework=equinox</command>
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]   osgi-project - plugin configuration
[INFO]   osgi-project - wrapper instructions
[INFO]   osgi-project - bundle instructions
[INFO]   osgi-project - imported bundles
[INFO]   org.sonatype.mcookbook
[INFO] ------------------------------------------------------------------------
[INFO] Building org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]    task-segment: [pax:provision] (aggregator-style)
[INFO] ------------------------------------------------------------------------
[INFO] [pax:provision]
[INFO] Installing /Users/Tim/Library/Code/sonatype/maven-cookbook/mcookbook-examples/osgi/osgi-project/runner/target/pom-transformed.xml to /Users/Tim/.m2/repository/org/sonatype/mcookbook/osgi-project/build/deployment/1.0-SNAPSHOT/deployment-1.0-SNAPSHOT.pom
    ______  ________  __  __
   / __  / /  __   / / / / /
  /  ___/ /  __   / _\ \ _/
 /  /    /  / /  / / _\ \
/__/    /__/ /__/ /_/ /_/

Pax Runner (1.1.1) from OPS4J - http://www.ops4j.org
----------------------------------------------------

 -&gt; Using config [classpath:META-INF/runner.properties]
 -&gt; Using only arguments from command line
 -&gt; Scan bundles from [/Users/Tim/Library/Code/sonatype/maven-cookbook/mcookbook-examples/osgi/osgi-project/runner/deploy-pom.xml]
 -&gt; Scan bundles from [scan-pom:file:/Users/Tim/Library/Code/sonatype/maven-cookbook/mcookbook-examples/osgi/osgi-project/runner/deploy-pom.xml]
 -&gt; Provision bundle [mvn:org.apache.felix/org.apache.felix.webconsole/1.2.8, at default start level, bundle will be started, bundle will be loaded from the cache]
 -&gt; Provision bundle [mvn:org.apache.felix/javax.servlet/1.0.0, at default start level, bundle will be started, bundle will be loaded from the cache]
 -&gt; Provision bundle [mvn:org.apache.felix/org.apache.felix.scr/1.0.8, at default start level, bundle will be started, bundle will be loaded from the cache]
 -&gt; Provision bundle [mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1, at default start level, bundle will be started, bundle will be loaded from the cache]
 -&gt; Provision bundle [mvn:org.sonatype.mcookbook.osgi-project/org.sonatype.mcookbook/1.0-SNAPSHOT, at default start level, bundle will be started, bundle will be loaded from the cache]
 -&gt; Preparing framework [Equinox 3.5.0]
 -&gt; Downloading bundles...
 -&gt; Equinox 3.5.0 : 1122602 bytes @ [ 300kBps ]
 -&gt; Eclipse utilities : 22471 bytes @ [ 64kBps ]
 -&gt; Eclipse compendium services : 66065 bytes @ [ 113kBps ]
 -&gt; mvn:org.apache.felix/org.apache.felix.webconsole/1.2.8 : 102399 bytes @ [ 7876kBps -&gt; mvn:org.apache.felix/org.apache.felix.webconsole/1.2.8 : 204799 bytes @ [ 7876kBps -&gt; mvn:org.apache.felix/org.apache.felix.webconsole/1.2.8 : 307199 bytes @ [ 7876kBps -&gt; mvn:org.apache.felix/org.apache.felix.webconsole/1.2.8 : 409599 bytes @ [ 8031kBps -&gt; mvn:org.apache.felix/org.apache.felix.webconsole/1.2.8 : 507026 bytes @ [ 8311kBps ]
 -&gt; mvn:org.apache.felix/javax.servlet/1.0.0 : 30450 bytes @ [ 7612kBps ]
 -&gt; mvn:org.apache.felix/org.apache.felix.scr/1.0.8 : 112058 bytes @ [ 9338kBps ]
 -&gt; mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1 : 102399 bytes @ [ 9309kBps -&gt; mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1 : 204799 bytes @ [ 8904kBps -&gt; mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1 : 307199 bytes @ [ 8777kBps -&gt; mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1 : 409599 bytes @ [ 9102kBps -&gt; mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1 : 511999 bytes @ [ 9142kBps -&gt; mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1 : 614399 bytes @ [ 8653kBps -&gt; mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1 : 716799 bytes @ [ 8636kBps -&gt; mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1 : 769485 bytes @ [ 8744kBps ]
 -&gt; mvn:org.sonatype.mcookbook.osgi-project/org.sonatype.mcookbook/1.0-SNAPSHOT : conn -&gt; mvn:org.sonatype.mcookbook.osgi-project/org.sonatype.mcookbook/1.0-SNAPSHOT : 5388 bytes @ [ 5388kBps ]
 -&gt; Using execution environment [J2SE-1.5]
 -&gt; Runner has successfully finished his job!


osgi&gt; STARTING org.sonatype.mcookbook
REGISTER org.sonatype.mcookbook.ExampleService
org.mortbay.log:Logging to org.mortbay.log via org.apache.felix.http.jetty.LogServiceLog
org.mortbay.log:Init SecureRandom.
org.mortbay.log:started org.mortbay.jetty.servlet.HashSessionIdManager@9ed5d6
org.mortbay.log:started org.mortbay.jetty.servlet.HashSessionManager@fd245f
org.mortbay.log:starting OsgiServletHandler@5f00f9
org.mortbay.log:started OsgiServletHandler@5f00f9
org.mortbay.log:starting SessionHandler@38ef1d
org.mortbay.log:started SessionHandler@38ef1d
org.mortbay.log:starting org.mortbay.jetty.servlet.Context@cc3baa{/,null}
org.mortbay.log:starting ErrorHandler@da6d09
org.mortbay.log:started ErrorHandler@da6d09
org.mortbay.log:started org.mortbay.jetty.servlet.Context@cc3baa{/,null}
org.mortbay.log:jetty-6.1.x
org.mortbay.log:started Realm[OSGi HTTP Service Realm]==[]
org.mortbay.log:started org.mortbay.thread.QueuedThreadPool@f2e41d
org.mortbay.log:starting Server@5e4dbe
org.mortbay.log:started org.mortbay.jetty.nio.SelectChannelConnector$1@9a44d6
org.mortbay.log:Started SelectChannelConnector@0.0.0.0:8080
org.mortbay.log:started SelectChannelConnector@0.0.0.0:8080
org.mortbay.log:started Server@5e4dbe
*INFO * Failed to instantiate plugin org.apache.felix.webconsole.internal.deppack.DepPackServlet. Reason: java.lang.NoClassDefFoundError: org/osgi/service/deploymentadmin/DeploymentException
*INFO * Failed to instantiate plugin org.apache.felix.webconsole.internal.misc.ConfigurationRender. Reason: java.lang.NoClassDefFoundError: org/osgi/service/prefs/BackingStoreException
*INFO * Failed to instantiate plugin org.apache.felix.webconsole.internal.misc.ShellServlet. Reason: java.lang.NoClassDefFoundError: org.apache.felix.shell.ShellService
org.mortbay.log:started /system/console/*
org.mortbay.log:started /system/console/res
</screen>

      <para>Again, the output of this last command is going to be somewhat
      confusing. Even though we're starting the application using Equinox,
      we're still deploying some OSGi components from Apache Felix, and we're
      deploying the Apache Felix Web Management Console. While the Felix Web
      Management Console can also run in the Equinox OSGi runtime environment,
      take note that there are some missing classes toward the end of the
      previous console output. This is likely due to the fact that there is a
      missing bundle or some Felix-specific functionality that is present in
      the Felix management console. To test the console, go to <ulink
      url="http://localhost:8080/system/console">http://localhost:8080/system/console</ulink>,
      and log in with the default
      <varname>admin</varname>/<varname>admin</varname> credentials.</para>
    </section>

    <section>
      <title>Discussion</title>

      <para>For more information about Equinox, see <ulink
      url="http://www.eclipse.org/equinox/">http://www.eclipse.org/equinox/</ulink>.
      For more information about the frameworks available to the Pax plugin,
      see <ulink
      url="http://paxrunner.ops4j.org/space/Pax+Runner">http://paxrunner.ops4j.org/space/Pax+Runner</ulink>.</para>
    </section>
  </section>

  <section>
    <title>Deploying OSGi Bundles to a Maven Repository</title>

    <section>
      <title>Problem</title>

      <para>You need to configure your project to deploy your own custom OSGi
      bundles to a Maven repository.</para>
    </section>

    <section>
      <title>Solution</title>

      <para>The solution is to download an install Nexus Professional, and
      configure your Maven environment to deploy snapshot and release
      artifacts to a Hosted Maven repository. To install Nexus Professional,
      complete the following steps:</para>

      <orderedlist>
        <listitem>
          <para>Download Nexus Professional from <ulink
          url="http://www.sonatype.com/products/downloads">http://www.sonatype.com/products/downloads</ulink>.</para>
        </listitem>

        <listitem>
          <para>Unpack the Nexus Professional archive on your local
          workstation, or on the machine that will host Nexus Professional for
          your workgroup or organization.</para>
        </listitem>

        <listitem>
          <para>Start Nexus Professional by running the startup script in
          <command>\${nexus_install_dir}/bin/jsw/&lt;platform&gt;/nexus
          start</command> where &lt;platform&gt; is replaced with the
          appropriate platform-specific directory.</para>
        </listitem>
      </orderedlist>

      <para>The following commands will install and start Nexus Professional
      1.3.5:</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">~/programs $ <command>cp ~/Downloads/nexus-professional-webapp-1.3.5-bundle.tar.gz ~/programs</command>
~/programs $ <command>tar xvzf nexus-professional-webapp-1.3.5-bundle.tar.gz</command>
~/programs $ <command>cd nexus-professional-webapp-1.3.5</command>
~/programs/nexus-professional-webapp-1.3.5 $ <command>./bin/jsw/macosx-universal-32/nexus start</command>
Starting Sonatype Nexus Repository Manager...
Started Sonatype Nexus Repository Manager.
</screen>

      <para>Create a <filename>~/.m2/settings.xml</filename> and copy the XML
      from <xref linkend="ex-osgi-nexus-settings" /> into this new Maven
      Settings XML file.</para>

      <example id="ex-osgi-nexus-settings">
        <title>settings.xml to configure deployment credentials and mirrors
        for Nexus</title>

        <programlisting db:wrap="force"
                        xmlns:db="http://discursive.com/plugins/docbook">&lt;settings&gt;
  &lt;mirrors&gt;
    &lt;mirror&gt;
      &lt;!--This sends everything else to /public --&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;
      &lt;url&gt;http://localhost:8081/nexus/content/groups/public&lt;/url&gt;
    &lt;/mirror&gt;
  &lt;/mirrors&gt;
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;!--Enable snapshots for the built in central repo to direct --&gt;
      &lt;!--all requests to nexus via the mirror --&gt;
      &lt;repositories&gt;
        &lt;repository&gt;
          &lt;id&gt;central&lt;/id&gt;
          &lt;url&gt;http://central&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/repository&gt;
      &lt;/repositories&gt;
     &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
          &lt;id&gt;central&lt;/id&gt;
          &lt;url&gt;http://central&lt;/url&gt;
          &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
          &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
        &lt;/pluginRepository&gt;
      &lt;/pluginRepositories&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;nx-snapshots&lt;/id&gt;
      &lt;username&gt;deployment&lt;/username&gt;
      &lt;password&gt;deployment123&lt;/password&gt;
    &lt;/server&gt;
    &lt;server&gt;
      &lt;id&gt;nx-releases&lt;/id&gt;
      &lt;username&gt;deployment&lt;/username&gt;
      &lt;password&gt;deployment123&lt;/password&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
  &lt;activeProfiles&gt;
    &lt;!--make the profile active all the time --&gt;
    &lt;activeProfile&gt;nexus&lt;/activeProfile&gt;
  &lt;/activeProfiles&gt;
&lt;/settings&gt;</programlisting>
      </example>

      <para>Now, go into the <varname>osgi-project</varname> example project
      from the previous labs and add the XML from <xref
      linkend="ex-osgi-dist-management" /> into the top-level parent in
      <filename>${root.example.dir}/osgi/osgi-project/pom.xml</filename>. You
      can add the <varname>distributionManagement</varname> element as a child
      of the <varname>project</varname> element after all of the existing
      children.</para>

      <example id="ex-osgi-dist-management">
        <title>Distribution Management Settings for the osgi-project
        Project</title>

        <programlisting db:wrap="force"
                        xmlns:db="http://discursive.com/plugins/docbook">&lt;project&gt;
  ...
  &lt;distributionManagement&gt;
    &lt;repository&gt;
      &lt;id&gt;nx-releases&lt;/id&gt;
      &lt;name&gt;Nexus Releases&lt;/name&gt;
      &lt;url&gt;http://localhost:8081/nexus/content/repositories/releases&lt;/url&gt;
    &lt;/repository&gt;
    &lt;snapshotRepository&gt;
      &lt;id&gt;nx-snapshots&lt;/id&gt;
      &lt;name&gt;Nexus Snapshots&lt;/name&gt;
      &lt;url&gt;http://localhost:8081/nexus/content/repositories/snapshots&lt;/url&gt;
    &lt;/snapshotRepository&gt;
  &lt;/distributionManagement&gt;
&lt;/project&gt;</programlisting>
      </example>

      <para>Now, deploy the the bundle from your osgi-project to the Nexus
      Snapshots repository by running mvn deploy -DremoteOBR.</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">~/osgi/osgi-project $ <command>mvn deploy -DremoteOBR</command>
[INFO] Scanning for projects...
...
[INFO] [deploy:deploy]
[INFO] Retrieving previous build number from nx-snapshots
Uploading: http://localhost:8081/nexus/content/repositories/snapshots/org/sonatype/mcookbook/osgi-project/1.0-SNAPSHOT/osgi-project-1.0-20090715.030835-2.pom
2K uploaded  (osgi-project-1.0-20090715.030835-2.pom)
[INFO] Retrieving previous metadata from nx-snapshots
[INFO] Uploading repository metadata for: 'artifact org.sonatype.mcookbook:osgi-project'
[INFO] Retrieving previous metadata from nx-snapshots
[INFO] Uploading repository metadata for: 'snapshot org.sonatype.mcookbook:osgi-project:1.0-SNAPSHOT'
...
[INFO] [deploy:deploy]
[INFO] Retrieving previous build number from nx-snapshots
Uploading: http://localhost:8081/nexus/content/repositories/snapshots/org/sonatype/mcookbook/osgi-project/build/shared-plugin-settings/1.0-SNAPSHOT/shared-plugin-settings-1.0-20090715.030835-2.pom
2K uploaded  (shared-plugin-settings-1.0-20090715.030835-2.pom)
[INFO] Retrieving previous metadata from nx-snapshots
[INFO] Uploading repository metadata for: 'artifact org.sonatype.mcookbook.osgi-project.build:shared-plugin-settings'
[INFO] Retrieving previous metadata from nx-snapshots
[INFO] Uploading repository metadata for: 'snapshot org.sonatype.mcookbook.osgi-project.build:shared-plugin-settings:1.0-SNAPSHOT'
...
[INFO] [deploy:deploy]
[INFO] Retrieving previous build number from nx-snapshots
Uploading: http://localhost:8081/nexus/content/repositories/snapshots/org/sonatype/mcookbook/osgi-project/build/wrapper-bundle-settings/1.0-SNAPSHOT/wrapper-bundle-settings-1.0-20090715.030835-2.pom
1K uploaded  (wrapper-bundle-settings-1.0-20090715.030835-2.pom)
[INFO] Retrieving previous metadata from nx-snapshots
[INFO] Uploading repository metadata for: 'artifact org.sonatype.mcookbook.osgi-project.build:wrapper-bundle-settings'
[INFO] Retrieving previous metadata from nx-snapshots
[INFO] Uploading repository metadata for: 'snapshot org.sonatype.mcookbook.osgi-project.build:wrapper-bundle-settings:1.0-SNAPSHOT'
...
[INFO] [deploy:deploy]
[INFO] Retrieving previous build number from nx-snapshots
Uploading: http://localhost:8081/nexus/content/repositories/snapshots/org/sonatype/mcookbook/osgi-project/build/compiled-bundle-settings/1.0-SNAPSHOT/compiled-bundle-settings-1.0-20090715.030835-2.pom
2K uploaded  (compiled-bundle-settings-1.0-20090715.030835-2.pom)
[INFO] Retrieving previous metadata from nx-snapshots
[INFO] Uploading repository metadata for: 'snapshot org.sonatype.mcookbook.osgi-project.build:compiled-bundle-settings:1.0-SNAPSHOT'
[INFO] Retrieving previous metadata from nx-snapshots
[INFO] Uploading repository metadata for: 'artifact org.sonatype.mcookbook.osgi-project.build:compiled-bundle-settings'
...
[INFO] [deploy:deploy]
[INFO] Retrieving previous build number from nx-snapshots
Uploading: http://localhost:8081/nexus/content/repositories/snapshots/org/sonatype/mcookbook/osgi-project/build/provision/1.0-SNAPSHOT/provision-1.0-20090715.030835-2.pom
1K uploaded  (provision-1.0-20090715.030835-2.pom)
[INFO] Retrieving previous metadata from nx-snapshots
[INFO] Uploading repository metadata for: 'snapshot org.sonatype.mcookbook.osgi-project.build:provision:1.0-SNAPSHOT'
[INFO] Retrieving previous metadata from nx-snapshots
[INFO] Uploading repository metadata for: 'artifact org.sonatype.mcookbook.osgi-project.build:provision'
...
[INFO] [deploy:deploy]
[INFO] Retrieving previous build number from nx-snapshots
Uploading: http://localhost:8081/nexus/content/repositories/snapshots/org/sonatype/mcookbook/osgi-project/org.sonatype.mcookbook/1.0-SNAPSHOT/org.sonatype.mcookbook-1.0-20090715.030835-2.jar
5K uploaded  (org.sonatype.mcookbook-1.0-20090715.030835-2.jar)
[INFO] Retrieving previous metadata from nx-snapshots
[INFO] Uploading repository metadata for: 'snapshot org.sonatype.mcookbook.osgi-project:org.sonatype.mcookbook:1.0-SNAPSHOT'
[INFO] Retrieving previous metadata from nx-snapshots
[INFO] Uploading repository metadata for: 'artifact org.sonatype.mcookbook.osgi-project:org.sonatype.mcookbook'
[INFO] Uploading project information for org.sonatype.mcookbook 1.0-20090715.030835-2
...
[INFO] [bundle:deploy]
[INFO] LOCK http://localhost:8081/nexus/content/repositories/snapshots/repository.xml
[INFO] Downloading repository.xml
[INFO] Parsing file:/var/folders/qR/qRpEDfQcFPmRZpsXgPHOok+++TM/-Tmp-/12476273209637081490707781551794.xml
[INFO] Deploying org/sonatype/mcookbook/osgi-project/org.sonatype.mcookbook/1.0-SNAPSHOT/org.sonatype.mcookbook-1.0-20090715.030835-2.jar
[INFO] Writing OBR metadata
[INFO] Uploading repository.xml
[INFO] UNLOCK http://localhost:8081/nexus/content/repositories/snapshots/repository.xml
</screen>

      <para>To summarize, you downloaded and installed Nexus Professional,
      configured your Maven Settings to supply the default credentials for the
      deployment user, you added the snapshots and releases repositories to
      your project's pom.xml, and then you deployed your project's SNAPSHOT
      artifacts to he snapshot repository and updated an OBR-compatible
      repository.xml file also stored in the Nexus-hosted Maven
      repository.</para>

      <warning>
        <para>We skipped some extremely important setup tasks for Nexus
        Professional, namely changing all of the default passwords. This
        example uses the default username and password for the deployment user
        (deployment/deployment123). To change this password, log into the
        Nexus interface by going to http://localhost:8081/nexus, logging in
        with the default administrative credentials (admin/admin123), clicking
        on Users under Security in the left navigation menu, and then
        right-clicking on the deployment user in the list of users. Once you
        right-click on the deployment user, select "Set Password" and then
        supply a new password. Don't leave Nexus unprotected with the default
        username and password.</para>
      </warning>
    </section>

    <section>
      <title>Discussion</title>

      <para>To verify that your artifacts made it into the Snapshots
      repository on your local Nexus instance, go to the Nexus interface at
      http://localhost:8081/nexus and login as the administrative user. The
      default administrative credentials are the username "admin" and the
      password "admin123". Once you login as the admin user, click on
      Repositories in the left navigation menu, and then select the Snapshots
      repository. If you browse the contents of the repository you should see
      contents similar to the contents shown in <xref
      linkend="fig-osgi-deployed-snapshot" />.</para>

      <figure id="fig-osgi-deployed-snapshot">
        <title>The Contents of the Snapshots Repository after
        Deployment</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/osgi_nexus-standard-repo.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>You can see from <xref linkend="fig-osgi-deployed-snapshot" />
      that the repository contains the
      <varname>org.sonatype.mcookbook</varname> OSGi bundle under the
      <varname>org.sonatype.mcookbook.osgi-project</varname> groupId and that
      the Pax plugin took care of creating an OSGi bundle repository XML file
      at <filename>repository.xml</filename>.</para>

      <para>If you want to test how easy it would be to install this component
      directly from Nexus:</para>

      <orderedlist>
        <listitem>
          <para>Download Apache Felix from <ulink
          url="http://www.apache.org/dist/felix/felix-1.8.0.tar.gz">http://www.apache.org/dist/felix/felix-1.8.0.tar.gz</ulink>.</para>
        </listitem>

        <listitem>
          <para>Unpack the Felix distribution on your local
          workstation.</para>
        </listitem>

        <listitem>
          <para>Change directory to the Felix directory.</para>
        </listitem>

        <listitem>
          <para>Start Apache Felix with <command>java -jar
          ./bin/felix.jar</command></para>
        </listitem>

        <listitem>
          <para>Add the Snapshots repository as an OBR repository by copying
          the URL to the repository.xml and passing it to the obr command:
          <command>obr add-url
          http://localhost:8081/nexus/content/repositories/snapshots/repository.xml</command></para>
        </listitem>

        <listitem>
          <para>List the contents of the OBR repository.</para>
        </listitem>

        <listitem>
          <para>Deploy the <varname>org.sonatype.mcookbook</varname>
          bundle.</para>
        </listitem>

        <listitem>
          <para>List the installed bundles.</para>
        </listitem>
      </orderedlist>

      <para>These commands are captured in the following screen
      listing:</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">~/programs $ <command>wget http://www.apache.org/dist/felix/felix-1.8.0.tar.gz</command>
--2009-07-14 22:46:19--  http://www.apache.org/dist/felix/felix-1.8.0.tar.gz
Resolving www.apache.org... 140.211.11.130
Connecting to www.apache.org|140.211.11.130|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 901620 (880K) [application/x-gzip]
Saving to: `felix-1.8.0.tar.gz'
2009-07-14 22:46:20 (924 KB/s) - `felix-1.8.0.tar.gz' saved [901620/901620]

~/programs $ <command>tar xvzf felix-1.8.0.tar.gz</command> 
felix-1.8.0/
felix-1.8.0/bin/
felix-1.8.0/bin/felix.jar
...
felix-1.8.0/NOTICE
~/programs $ <command>cd felix-1.8.0</command>
~/programs/felix-1.8.0 $ <command>java -jar ./bin/felix.jar</command> 

Welcome to Felix.
=================

-&gt; <command>obr add-url http://localhost:8081/nexus/content/repositories/snapshots/repository.xml</command>
-&gt; <command>obr list</command>
org.sonatype.mcookbook (1.0.0.SNAPSHOT)
-&gt; <command>obr deploy org.sonatype.mcookbook</command>
Target resource(s):
-------------------
   org.sonatype.mcookbook (1.0.0.SNAPSHOT)

Deploying...done.
-&gt; <command>ps</command> 
START LEVEL 1
   ID   State         Level  Name
[   0] [Active     ] [    0] System Bundle (1.8.0)
[   1] [Active     ] [    1] Apache Felix Shell Service (1.2.0)
[   2] [Active     ] [    1] Apache Felix Shell TUI (1.2.0)
[   3] [Active     ] [    1] Apache Felix Bundle Repository (1.4.0)
[   4] [Installed  ] [    1] org.sonatype.mcookbook (1.0.0.SNAPSHOT)
-&gt; <command>start 4</command>
STARTING org.sonatype.mcookbook
REGISTER org.sonatype.mcookbook.ExampleService
-&gt; 
</screen>

      <para>In summary, you've deployed an OSGi bundle to a Maven repository
      using the Pax plugin from OPS4J and you've successfully deployed it to
      an independent instance of Apache Felix directly from your Nexus
      instance. This is a powerful demonstration because it provides a model
      for how deployment to production of staging can work once you've
      standardized on a Maven repository manager and OSGi as a deployment
      framework.</para>

      <note>
        <para>You can also setup and install Nexus Open Source, and rely on
        the first-class support that the the Pax plugin provides for OSGi
        bundles stored in a standard Maven repository. In the context of OSGi
        development, the main difference between Nexus Professional and Nexus
        Open Source is that Nexus Professional provides direct support for OBR
        repositories, allowing you to proxy, host, and group OSGi bundle
        repositories and convert existing Maven repositories to OSGi bundle
        repositories.</para>
      </note>
    </section>
  </section>

  <section>
    <title>Transforming a Maven Repository into an OSGi Bundle
    Repository</title>

    <para>In the previous recipe, you published an OSGi bundle to a Maven
    repository, and you relied on the Pax plugin to read and write the
    repository.xml file. While this approximates an OBR repository, you'd like
    Nexus to take care of generating the OBR metadata from the repository
    contents, and you don't want to rely on individual builds to lock, read,
    parse, alter, write, and unlock a shared OBR metadata file. Instead of
    relying on the Pax plugin, this recipe shows you how to configure an OBR
    repository in Nexus Professional.</para>

    <section>
      <title>Problem</title>

      <para>You need to expose OSGi bundles in a Maven repository using the
      OBR repository format.</para>
    </section>

    <section>
      <title>Solution</title>

      <para>Use Nexus Professional, and create a virtual OBR repository which
      will scan a Maven repository for OSGi bundle artifacts and generate the
      OBR XML metadata in response to a change in the Maven repository.
      Building upon the example from the previous recipe, create a Virtual OBR
      repository named Snapshots OBR which uses the Snapshots repository as a
      source. To do this:</para>

      <orderedlist>
        <listitem>
          <para>Load the Nexus interface in a web browser by opening the URL
          http://localhost:8081/nexus.</para>
        </listitem>

        <listitem>
          <para>Login as an administrative user using the default credentials
          of admin/admin123 (if you haven't already changed the default
          password).</para>
        </listitem>

        <listitem>
          <para>Click on Repositories in the left navigation menu.</para>
        </listitem>

        <listitem>
          <para>Click on the Add.. button above the list of Nexus repositories
          and groups.</para>
        </listitem>

        <listitem>
          <para>Select "Virtual Repository" from the resulting
          dropdown.</para>
        </listitem>

        <listitem>
          <para>In the New Virtual Repository window, supply the following
          values as shown in <xref
          linkend="fig-osgi-new-virtual-snapshots" />:</para>

          <orderedlist numeration="loweralpha">
            <listitem>
              <para>Repository ID: <command>snapshots-obr</command></para>
            </listitem>

            <listitem>
              <para>Repository Name: <command>Snapshots OBR</command></para>
            </listitem>

            <listitem>
              <para>Provider: <command>OBR</command></para>
            </listitem>

            <listitem>
              <para>Source Nexus Repository ID:
              <command>snapshots</command></para>
            </listitem>

            <listitem>
              <para>Synchronize on Startup: <command>False</command></para>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>Click the Save button to create the new Virtual
          repository.</para>
        </listitem>
      </orderedlist>

      <figure id="fig-osgi-new-virtual-snapshots">
        <title>Creating a New Virtual OBR Repository</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/osgi_nexus-new-virtual-snapshots.png" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Discussion</title>

      <para>To verify that our new Virtual OBR repository is generating the
      the appropriate XML based on the contents of the Maven repository, click
      on Repositories in the left navigation menu, and then select "Snapshots
      OBR" from the list of repositories. If you look at the Browse tab for
      this repository and drill into the <filename>.meta/</filename>
      directory, you can then right-click on the <filename>obr.xml</filename>
      file and select <guimenuitem>Download</guimenuitem> from the context
      menu. This should load the repository XML in a browser, and the contents
      of this XML file should resemble the XML file in <xref
      linkend="ex-osgi-obr-virtual-snapshots" />. The URL for this new
      repository XML should be <ulink
      url="http://localhost:8081/nexus/content/repositories/snapshots-obr/.meta/obr.xml">http://localhost:8081/nexus/content/repositories/snapshots-obr/.meta/obr.xml</ulink>.</para>

      <example id="ex-osgi-obr-virtual-snapshots">
        <title>Metadata for the Snapshots OBR Virtual Repository</title>

        <programlisting db:wrap="force"
                        xmlns:db="http://discursive.com/plugins/docbook">&lt;repository name='Snapshots OBR' lastmodified='1247630990695'&gt;
&lt;resource id='org.sonatype.mcookbook/1.0.0.SNAPSHOT' presentationname='org.sonatype.mcookbook' symbolicname='org.sonatype.mcookbook' uri='../org/sonatype/mcookbook/osgi-project/org.sonatype.mcookbook/1.0-SNAPSHOT/org.sonatype.mcookbook-1.0-20090715.030813-1.jar' version='1.0.0.SNAPSHOT'&gt;
  &lt;description&gt;
    Generated using Pax-Construct
  &lt;/description&gt;
  &lt;size&gt;
    5345
  &lt;/size&gt;
  &lt;capability name='bundle'&gt;
    &lt;p n='manifestversion' v='2'/&gt;

    &lt;p n='presentationname' v='org.sonatype.mcookbook'/&gt;
    &lt;p n='symbolicname' v='org.sonatype.mcookbook'/&gt;
    &lt;p n='version' t='version' v='1.0.0.SNAPSHOT'/&gt;
  &lt;/capability&gt;
  &lt;capability name='package'&gt;
    &lt;p n='package' v='org.sonatype.mcookbook'/&gt;
    &lt;p n='version' t='version' v='1.0.0.SNAPSHOT'/&gt;
  &lt;/capability&gt;
  &lt;require extend='false' filter='(&amp;amp;(package=org.osgi.framework)(version&amp;gt;=0.0.0))' multiple='false' name='package' optional='false'&gt;

    Import package org.osgi.framework
  &lt;/require&gt;
  &lt;require extend='false' filter='(&amp;amp;(package=org.sonatype.mcookbook)(version&amp;gt;=1.0.0.SNAPSHOT))' multiple='false' name='package' optional='false'&gt;
    Import package org.sonatype.mcookbook ;version=1.0.0.SNAPSHOT
  &lt;/require&gt;
&lt;/resource&gt;
&lt;resource id='org.sonatype.mcookbook/1.0.0.SNAPSHOT' presentationname='org.sonatype.mcookbook' symbolicname='org.sonatype.mcookbook' uri='../org/sonatype/mcookbook/osgi-project/org.sonatype.mcookbook/1.0-SNAPSHOT/org.sonatype.mcookbook-1.0-20090715.030835-2.jar' version='1.0.0.SNAPSHOT'&gt;
  &lt;description&gt;
    Generated using Pax-Construct
  &lt;/description&gt;
  &lt;size&gt;

    5346
  &lt;/size&gt;
  &lt;capability name='bundle'&gt;
    &lt;p n='manifestversion' v='2'/&gt;
    &lt;p n='presentationname' v='org.sonatype.mcookbook'/&gt;
    &lt;p n='symbolicname' v='org.sonatype.mcookbook'/&gt;
    &lt;p n='version' t='version' v='1.0.0.SNAPSHOT'/&gt;
  &lt;/capability&gt;
  &lt;capability name='package'&gt;

    &lt;p n='package' v='org.sonatype.mcookbook'/&gt;
    &lt;p n='version' t='version' v='1.0.0.SNAPSHOT'/&gt;
  &lt;/capability&gt;
  &lt;require extend='false' filter='(&amp;amp;(package=org.osgi.framework)(version&amp;gt;=0.0.0))' multiple='false' name='package' optional='false'&gt;
    Import package org.osgi.framework
  &lt;/require&gt;
  &lt;require extend='false' filter='(&amp;amp;(package=org.sonatype.mcookbook)(version&amp;gt;=1.0.0.SNAPSHOT))' multiple='false' name='package' optional='false'&gt;
    Import package org.sonatype.mcookbook ;version=1.0.0.SNAPSHOT
  &lt;/require&gt;
&lt;/resource&gt;

&lt;/repository&gt;</programlisting>
      </example>

      <para>If you want to test how easy it would be to install this component
      directly from this new Nexus virtual OBR directory. If you've already
      installed Felix, from the previous recipe, delete the felix-1.8.0
      directory and recreate the entire environment to take note of any
      changes in the behavior of Felix when using the new Snapshots OBR
      virtual repository:</para>

      <orderedlist>
        <listitem>
          <para>Download Apache Felix from <ulink
          url="http://www.apache.org/dist/felix/felix-1.8.0.tar.gz">http://www.apache.org/dist/felix/felix-1.8.0.tar.gz</ulink>.</para>
        </listitem>

        <listitem>
          <para>Unpack the Felix distribution on your local
          workstation.</para>
        </listitem>

        <listitem>
          <para>Change directory to the Felix directory.</para>
        </listitem>

        <listitem>
          <para>Start Apache Felix with <command>java -jar
          ./bin/felix.jar</command></para>
        </listitem>

        <listitem>
          <para>Add the Snapshots repository as an OBR repository by copying
          the URL to the repository.xml and passing it to the obr command:
          <command>obr add-url
          http://localhost:8081/nexus/content/repositories/snapshots-obr/.meta/obr.xml</command></para>
        </listitem>

        <listitem>
          <para>List the contents of the OBR repository.</para>
        </listitem>

        <listitem>
          <para>Deploy the <varname>org.sonatype.mcookbook</varname>
          bundle.</para>
        </listitem>

        <listitem>
          <para>List the installed bundles.</para>
        </listitem>
      </orderedlist>

      <para>These commands are captured in the following screen
      listing:</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">~/programs $ <command>wget http://www.apache.org/dist/felix/felix-1.8.0.tar.gz</command>
--2009-07-14 22:46:19--  http://www.apache.org/dist/felix/felix-1.8.0.tar.gz
Resolving www.apache.org... 140.211.11.130
Connecting to www.apache.org|140.211.11.130|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 901620 (880K) [application/x-gzip]
Saving to: `felix-1.8.0.tar.gz'
2009-07-14 22:46:20 (924 KB/s) - `felix-1.8.0.tar.gz' saved [901620/901620]

~/programs $ <command>tar xvzf felix-1.8.0.tar.gz</command> 
felix-1.8.0/
felix-1.8.0/bin/
felix-1.8.0/bin/felix.jar
...
felix-1.8.0/NOTICE
~/programs $ <command>cd felix-1.8.0</command>
~/programs/felix-1.8.0 $ <command>java -jar ./bin/felix.jar</command> 

Welcome to Felix.
=================

-&gt; <command>obr add-url http://localhost:8081/nexus/content/repositories/snapshots-obr/.meta/obr.xml</command>
-&gt; <command>obr list</command>
org.sonatype.mcookbook (1.0.0.SNAPSHOT, ...)
-&gt; <command>obr deploy org.sonatype.mcookbook</command>
Target resource(s):
-------------------
   org.sonatype.mcookbook (1.0.0.SNAPSHOT)

Deploying...done.
-&gt; <command>ps</command> 
START LEVEL 1
   ID   State         Level  Name
[   0] [Active     ] [    0] System Bundle (1.8.0)
[   1] [Active     ] [    1] Apache Felix Shell Service (1.2.0)
[   2] [Active     ] [    1] Apache Felix Shell TUI (1.2.0)
[   3] [Active     ] [    1] Apache Felix Bundle Repository (1.4.0)
[   4] [Installed  ] [    1] org.sonatype.mcookbook (1.0.0.SNAPSHOT)
-&gt; <command>start 4</command>
STARTING org.sonatype.mcookbook
REGISTER org.sonatype.mcookbook.ExampleService
-&gt; 
</screen>

      <para>Aside from the output of the <command>obr list</command> command,
      this process was exactly the same as the previous recipe. The main
      difference between this recipe and the previous recipe is that we do not
      rely on the Pax Plugin to generate the repository XML file that makes
      the repository an OBR repository. Instead, we rely upon the OBR
      integration of Nexus Professional. Every time the underlying source
      repository (in this case the hosted snapshots repository) is changed,
      Nexus Professional will regenerate the OBR XML in this virtual OBR
      repository. Using this virtual repository, you can simply deploy your
      project's OSGi and non-OSGi artifacts to the same Maven repository and
      then you can expose OSGi bundles to systems such as Felix using Nexus
      Professional's support for virtual OBR repositories.</para>

      <para>If you are using Nexus Professional's OBR support and exposing a
      Maven repository as an OBR repository using a virtual repository, there
      is no need for you to pass the <command>-DremoteOBR</command> option to
      mvn deploy as we did in the previous recipe.</para>
    </section>
  </section>

  <section>
    <title>Proxying OSGi Bundle Repositories</title>

    <para>If you've followed the recipes in this chapter sequentially, you
    deployed an artifact to a Maven repository and you've seen two ways to get
    that repository to an OSGi container: via a standard Maven repository and
    via a virutal OBR repository that acts as a transformer between Maven and
    OSGi. This chapter has focused on hosted repositories so far, but one of
    the most common reasons for people to use repository managers is to proxy
    remote repositories. In this recipe, you will learn how to proxy a remote
    OSGi bundle repository using Nexus Professional's support for OBR.</para>

    <section>
      <title>Problem</title>

      <para>You would like to maintain a local cache of a remote OSGi Bundle
      repository that is populated with artifacts as they are requested. You
      need to do this for a few reasons, but mostly because you realized how
      inefficient it is for everyone in your organization to continuously
      query a remote server and download artifacts over the public internet.
      You are looking for more stability and control over what people are
      using from a remote OSGi bundle repository.</para>
    </section>

    <section>
      <title>Solution</title>

      <para>Use Nexus Professional to create a proxy repository for a remote
      OSGi bundle repository. To do this:</para>

      <orderedlist>
        <listitem>
          <para>Load the Nexus interface in a web browser by opening the URL
          http://localhost:8081/nexus.</para>
        </listitem>

        <listitem>
          <para>Login as an administrative user using the default credentials
          of admin/admin123 (if you haven't already changed the default
          password).</para>
        </listitem>

        <listitem>
          <para>Click on Repositories in the left navigation menu.</para>
        </listitem>

        <listitem>
          <para>Click on the Add.. button above the list of Nexus repositories
          and groups.</para>
        </listitem>

        <listitem>
          <para>Select "Proxy Repository" from the resulting dropdown.</para>
        </listitem>

        <listitem>
          <para>In the New Virtual Repository window, supply the following
          values as shown in <xref
          linkend="fig-osgi-new-proxy-felix" />:</para>

          <orderedlist numeration="loweralpha">
            <listitem>
              <para>Repository ID: <command>felix-obr</command></para>
            </listitem>

            <listitem>
              <para>Repository Name: <command>Felix OBR</command></para>
            </listitem>

            <listitem>
              <para>Provider: <command>OBR</command></para>
            </listitem>

            <listitem>
              <para>Remote Storage Location:
              <command>http://felix.apache.org/obr/releases.xml</command></para>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>Click the Save button to create the new Proxy
          repository.</para>
        </listitem>
      </orderedlist>

      <figure id="fig-osgi-new-proxy-felix">
        <title>Creating a New Proxy Repository</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/osgi_nexus-new-proxy-felix.png" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Discussion</title>

      <para>To verify that our new Proxy OBR repository is generating the the
      appropriate XML based on the remote OBR repository, click on
      Repositories in the left navigation menu, and then select "Felix OBR"
      from the list of repositories. If you look at the Browse tab for this
      repository and drill into the <filename>.meta/</filename> directory, you
      can then right-click on the <filename>obr.xml</filename> file and select
      <guimenuitem>Download</guimenuitem> from the context menu. The URL for
      this new repository XML should be <ulink
      url="http://localhost:8081/nexus/content/repositories/felix-obr/.meta/obr.xml">http://localhost:8081/nexus/content/repositories/felix-obr/.meta/obr.xml</ulink>.
      Be warned, this is going to be a very large XML file, and you might not
      be able to make sense of the document by reading the source directly.
      Instead of dealing with this unwieldy XML file, use Apache Felix to
      browse the contents.</para>

      <para>If you want to see the contents of this new proxy repository for
      the Felix OBR repository, install Felix and add a reference to the Nexus
      proxy repository:</para>

      <orderedlist>
        <listitem>
          <para>Download Apache Felix from <ulink
          url="http://www.apache.org/dist/felix/felix-1.8.0.tar.gz">http://www.apache.org/dist/felix/felix-1.8.0.tar.gz</ulink>.</para>
        </listitem>

        <listitem>
          <para>Unpack the Felix distribution on your local
          workstation.</para>
        </listitem>

        <listitem>
          <para>Change directory to the Felix directory.</para>
        </listitem>

        <listitem>
          <para>Start Apache Felix with <command>java -jar
          ./bin/felix.jar</command></para>
        </listitem>

        <listitem>
          <para>Add the Snapshots repository as an OBR repository by copying
          the URL to the repository.xml and passing it to the obr command:
          <command>obr add-url
          http://localhost:8081/nexus/content/repositories/felix-obr/.meta/obr.xml</command></para>
        </listitem>

        <listitem>
          <para>List the contents of the OBR repository.</para>
        </listitem>

        <listitem>
          <para>Deploy the Servlet 2.1 bundle.</para>
        </listitem>

        <listitem>
          <para>Deploy the Apache Felix Web Management Console bundle.</para>
        </listitem>

        <listitem>
          <para>Start the installed bundles.</para>
        </listitem>
      </orderedlist>

      <para>These commands are captured in the following screen
      listing:</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">~/programs $ <command>wget http://www.apache.org/dist/felix/felix-1.8.0.tar.gz</command>
--2009-07-14 22:46:19--  http://www.apache.org/dist/felix/felix-1.8.0.tar.gz
Resolving www.apache.org... 140.211.11.130
Connecting to www.apache.org|140.211.11.130|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 901620 (880K) [application/x-gzip]
Saving to: `felix-1.8.0.tar.gz'
2009-07-14 22:46:20 (924 KB/s) - `felix-1.8.0.tar.gz' saved [901620/901620]

~/programs $ <command>tar xvzf felix-1.8.0.tar.gz</command> 
felix-1.8.0/
felix-1.8.0/bin/
felix-1.8.0/bin/felix.jar
...
felix-1.8.0/NOTICE
~/programs $ <command>cd felix-1.8.0</command>
~/programs/felix-1.8.0 $ <command>java -jar ./bin/felix.jar</command> 

Welcome to Felix.
=================

-&gt; <command>obr add-url http://localhost:8081/nexus/content/repositories/felix-obr/.meta/obr.xml</command>
-&gt; <command>obr list</command>
Apache Felix Bundle Repository (1.2.1, ...)
Apache Felix Configuration Admin Service (1.0.4, ...)
Apache Felix Declarative Services (1.0.8, ...)
Apache Felix EventAdmin (1.0.0)
Apache Felix File Install (1.2.0, ...)
Apache Felix HTTP Service Jetty (1.0.1, ...)
Apache Felix iPOJO (1.2.0, ...)
Apache Felix iPOJO (0.8.0)
Apache Felix iPOJO Arch Command (1.2.0, ...)
Apache Felix iPOJO Composite (1.2.0)
Apache Felix iPOJO Composite (1.0.0, ...)
Apache Felix iPOJO Event Admin Handler (1.2.0, ...)
Apache Felix iPOJO Extender Pattern Handler (1.2.0)
Apache Felix iPOJO Extender Pattern Handler (1.0.0, ...)
Apache Felix iPOJO JMX Handler (1.2.0, ...)
Apache Felix iPOJO Temporal Service Dependency Handler (1.2.0, ...)
Apache Felix iPOJO White Board Pattern Handler (1.2.0, ...)
Apache Felix Log Service (1.0.0)
Apache Felix Metatype Service (1.0.2, ...)
Apache Felix Prefrences Service (1.0.2)
Apache Felix Remote Shell (1.0.2)
Apache Felix Shell Service (1.0.2, ...)
Apache Felix Shell TUI (1.0.2, ...)
Apache Felix UPnP Base Driver (0.8.0)
Apache Felix UPnP Extra (0.4.0)
Apache Felix UPnP Tester (0.4.0)
Apache Felix Web Management Console (1.2.10, ...)
OSGi OBR Service API (1.0.0)
OSGi R4 Compendium Bundle (4.0.0)
Servlet 2.1 API (1.0.0)
-&gt; <command>obr deploy "Servlet 2.1 API"</command>
Target resource(s):
-------------------
   Servlet 2.1 API (1.0.0)

Deploying...done.
-&gt; <command>obr deploy "Apache Felix Web Management Console"</command>
Target resource(s):
-------------------
   Apache Felix Web Management Console (1.2.10)

Required resource(s):
---------------------
   Apache Felix Log Service (1.0.0)
   Apache Felix Declarative Services (1.0.8)
   Apache Felix HTTP Service Jetty (1.0.1)
   OSGi R4 Compendium Bundle (4.0.0)

Deploying...done.
-&gt; <command>ps</command>
START LEVEL 1
   ID   State         Level  Name
[   0] [Active     ] [    0] System Bundle (1.8.0)
[   1] [Active     ] [    1] Apache Felix Shell Service (1.2.0)
[   2] [Active     ] [    1] Apache Felix Shell TUI (1.2.0)
[   3] [Active     ] [    1] Apache Felix Bundle Repository (1.4.0)
[   4] [Installed  ] [    1] Servlet 2.1 API (1.0.0)
[   5] [Installed  ] [    1] Apache Felix Log Service (1.0.0)
[   6] [Installed  ] [    1] Apache Felix Declarative Services (1.0.8)
[   7] [Installed  ] [    1] HTTP Service (1.0.1)
[   8] [Installed  ] [    1] Apache Felix Web Management Console (1.2.10)
[   9] [Installed  ] [    1] OSGi R4 Compendium Bundle (4)
-&gt; <command>start 4 5 6 7 8 9</command>
-&gt; <command>ps</command>
START LEVEL 1
   ID   State         Level  Name
[   0] [Active     ] [    0] System Bundle (1.8.0)
[   1] [Active     ] [    1] Apache Felix Shell Service (1.2.0)
[   2] [Active     ] [    1] Apache Felix Shell TUI (1.2.0)
[   3] [Active     ] [    1] Apache Felix Bundle Repository (1.4.0)
[   4] [Active     ] [    1] Servlet 2.1 API (1.0.0)
[   5] [Active     ] [    1] Apache Felix Log Service (1.0.0)
[   6] [Active     ] [    1] Apache Felix Declarative Services (1.0.8)
[   7] [Active     ] [    1] HTTP Service (1.0.1)
[   8] [Active     ] [    1] Apache Felix Web Management Console (1.2.10)
[   9] [Active     ] [    1] OSGi R4 Compendium Bundle (4)
-&gt; 
</screen>

      <para>Now, if you load <ulink
      url="http://localhost:8080/system/console">http://localhost:8080/system/console</ulink>
      in a web browser and supply the default Felix administrative credentials
      (username "admin" and password "admin"), you will see the Apache Felix
      administrative web interface. Now that you've made use of the Nexus
      Proxy repository for the remote Felix OBR repository, the next time you
      browse the contents of the Felix OBR proxy repository, you are going to
      see that Nexus has cached all of the referenced bundles as shown in
      <xref linkend="fig-osgi-cached-bundles" />.</para>

      <figure id="fig-osgi-cached-bundles">
        <title>Cached Bundles from a Remote OBR Repository</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/osgi_nexus-proxy-cache-felix.png" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>Grouping OSGi Bundle Repositories</title>

    <para>So far in this chapter, you've deployed an artifact to a Maven
    repository and consumed it using a Virtual OBR repository as a bridge
    between Maven and OSGi. In the previous recipe, you proxied a remote OBR
    repository using a Nexus proxy repository. In this recipe, you are going
    to learn how to consolidate multiple OBR repositories into a single URL
    using a Nexus repository group.</para>

    <section>
      <title>Problem</title>

      <para>You need to consolidate a number of Nexus OBR repositories into a
      single OBR repository interface. You have a collection of Proxy,
      Virtual, and Hosted OBR repositories, and you want to connect your OSGi
      aware systems to a single OBR repository reducing the number of moving
      parts involved in your current deployment procedures.</para>
    </section>

    <section>
      <title>Solution</title>

      <para>Create a OBR repository group in Nexus Professional which combines
      one or more OBR repositories into a single repository. To do
      this:</para>

      <orderedlist>
        <listitem>
          <para>Load the Nexus interface in a web browser by opening the URL
          http://localhost:8081/nexus.</para>
        </listitem>

        <listitem>
          <para>Login as an administrative user using the default credentials
          of admin/admin123 (if you haven't already changed the default
          password).</para>
        </listitem>

        <listitem>
          <para>Click on Repositories in the left navigation menu.</para>
        </listitem>

        <listitem>
          <para>Click on the Add.. button above the list of Nexus repositories
          and groups.</para>
        </listitem>

        <listitem>
          <para>Select "Repository Group" from the resulting dropdown.</para>
        </listitem>

        <listitem>
          <para>In the New Repository Group window, supply the following
          values as shown in <xref
          linkend="fig-osgi-new-repo-group" />:</para>

          <orderedlist numeration="loweralpha">
            <listitem>
              <para>Group ID: <command>obr-group</command></para>
            </listitem>

            <listitem>
              <para>Group Name: <command>OBR Group</command></para>
            </listitem>

            <listitem>
              <para>Provider: <command>OBR Group</command></para>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>Drag the two OBR repositories created in the previous recipes
          to the Ordered Group Repositories list.</para>
        </listitem>

        <listitem>
          <para>Click the Save button to create the new Repository
          Group.</para>
        </listitem>
      </orderedlist>

      <figure id="fig-osgi-new-repo-group">
        <title>Creating a New OBR Group</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/osgi_nexus-new-group.png" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Discussion</title>

      <para>To verify that the new OBR repository group is generating the the
      appropriate XML combining the Felix OBR reposiotry and the Snapshots OBR
      repository, click on Repositories in the left navigation menu, and then
      select "OBR Group" from the list of repositories. If you look at the
      Browse tab for this repository and drill into the
      <filename>.meta/</filename> directory, you can then right-click on the
      <filename>obr.xml</filename> file and select
      <guimenuitem>Download</guimenuitem> from the context menu. The URL for
      this group's repository XML should be <ulink
      url="http://localhost:8081/nexus/content/groups/obr-group/.meta/obr.xml">http://localhost:8081/nexus/content/groups/obr-group/.meta/obr.xml</ulink>.
      Again,bBe warned, this is going to be an even larger XML file than the
      repository XML for the Felix OBR proxy. Search for mcookbook and note
      that the repository also contains references to all of the artifacts
      from the remote Felix OBR repository. The Nexus Professional OBR
      repository group has effectively merged the contents of these two
      repositories into a single unified interface which will simplify your
      system's interaction to a single URL.</para>

      <para>If you want to see the contents of this repository group, install
      Felix and add a reference to the Nexus repository group:</para>

      <orderedlist>
        <listitem>
          <para>Download Apache Felix from <ulink
          url="http://www.apache.org/dist/felix/felix-1.8.0.tar.gz">http://www.apache.org/dist/felix/felix-1.8.0.tar.gz</ulink>.</para>
        </listitem>

        <listitem>
          <para>Unpack the Felix distribution on your local
          workstation.</para>
        </listitem>

        <listitem>
          <para>Change directory to the Felix directory.</para>
        </listitem>

        <listitem>
          <para>Start Apache Felix with <command>java -jar
          ./bin/felix.jar</command></para>
        </listitem>

        <listitem>
          <para>Add the Snapshots repository as an OBR repository by copying
          the URL to the repository.xml and passing it to the obr command:
          <command>obr add-url
          http://localhost:8081/nexus/content/groups/obr-group/.meta/obr.xml</command></para>
        </listitem>

        <listitem>
          <para>List the contents of the OBR repository.</para>
        </listitem>

        <listitem>
          <para>Verify that the group contains bundles from Felix and the
          bundle from the osgi-project.</para>
        </listitem>
      </orderedlist>

      <para>These commands are captured in the following screen
      listing:</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">~/programs $ <command>wget http://www.apache.org/dist/felix/felix-1.8.0.tar.gz</command>
--2009-07-14 22:46:19--  http://www.apache.org/dist/felix/felix-1.8.0.tar.gz
Resolving www.apache.org... 140.211.11.130
Connecting to www.apache.org|140.211.11.130|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 901620 (880K) [application/x-gzip]
Saving to: `felix-1.8.0.tar.gz'
2009-07-14 22:46:20 (924 KB/s) - `felix-1.8.0.tar.gz' saved [901620/901620]

~/programs $ <command>tar xvzf felix-1.8.0.tar.gz</command> 
felix-1.8.0/
felix-1.8.0/bin/
felix-1.8.0/bin/felix.jar
...
felix-1.8.0/NOTICE
~/programs $ <command>cd felix-1.8.0</command>
~/programs/felix-1.8.0 $ <command>java -jar ./bin/felix.jar</command> 

Welcome to Felix.
=================

-&gt; <command>obr add-url http://localhost:8081/nexus/content/groups/obr-group/.meta/obr.xml</command>
-&gt; <command>obr list</command>
Apache Felix Bundle Repository (1.2.1, ...)
Apache Felix Configuration Admin Service (1.0.4, ...)
Apache Felix Declarative Services (1.0.8, ...)
Apache Felix EventAdmin (1.0.0)
Apache Felix File Install (1.2.0, ...)
Apache Felix HTTP Service Jetty (1.0.1, ...)
Apache Felix iPOJO (1.2.0, ...)
Apache Felix iPOJO (0.8.0)
Apache Felix iPOJO Arch Command (1.2.0, ...)
Apache Felix iPOJO Composite (1.2.0)
Apache Felix iPOJO Composite (1.0.0, ...)
Apache Felix iPOJO Event Admin Handler (1.2.0, ...)
Apache Felix iPOJO Extender Pattern Handler (1.2.0)
Apache Felix iPOJO Extender Pattern Handler (1.0.0, ...)
Apache Felix iPOJO JMX Handler (1.2.0, ...)
Apache Felix iPOJO Temporal Service Dependency Handler (1.2.0, ...)
Apache Felix iPOJO White Board Pattern Handler (1.2.0, ...)
Apache Felix Log Service (1.0.0)
Apache Felix Metatype Service (1.0.2, ...)
Apache Felix Prefrences Service (1.0.2)
Apache Felix Remote Shell (1.0.2)
Apache Felix Shell Service (1.0.2, ...)
Apache Felix Shell TUI (1.0.2, ...)
Apache Felix UPnP Base Driver (0.8.0)
Apache Felix UPnP Extra (0.4.0)
Apache Felix UPnP Tester (0.4.0)
Apache Felix Web Management Console (1.2.10, ...)
org.sonatype.mcookbook (1.0.0.SNAPSHOT, ...)
OSGi OBR Service API (1.0.0)
OSGi R4 Compendium Bundle (4.0.0)
Servlet 2.1 API (1.0.0)
-&gt; 
</screen>

      <para>As anticipated, the list of bundles in the group repository
      contains all of the bundles from the Apache Felix repository and the
      bundle from the Snapshots OBR repository -
      <varname>org.sonatype.mcookbook</varname>.</para>
    </section>
  </section>
</chapter>
