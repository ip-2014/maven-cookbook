<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="osgi">
  <title>Cooking with Maven and OSGi</title>

  <section id="using-sect-intro">
    <title>Introduction</title>

    <para>OSGi is a developing standard... well, that's not entirely true,
    OSGi is stable, has been around for many years, and is only now beginning
    to capture the attention of most mainstream developers. If you've been
    using Eclipse, you've already been using an OSGi container for a few
    years, and the pluggable and configurable nature of the Eclipse platform
    is a product of the OSGi standards. As a concept and as an approach, OSGi
    is a proven standard with an installed user base of millions and growing;
    as a mainstream development methodology, OSGi is just arriving on the
    scene. It might feel like an emerging standard because solid tool support
    is just now emerging. Prior to the last year, you might have encountered
    OSGi "builds", but they were usually experienced via an IDE (such as
    Eclipse).</para>

    <para>Many are starting to view OSGi as the perfect solution both for
    deploying server-side applications and client-side GUI application, it is
    a common standard and format that meshes very well with the al-la-carte
    model of open source development that has recently come of age. If you
    need a GUI front-end or a web application to interface with a database
    backend, there is a rich array of standard components to choose from in
    the OSGi community. Before OSGi-based servers, if you wanted a full
    fledged application server with a Transaction provider and JMS integration
    you had to either run something involved like JBoss or Websphere, or you
    had to hack some custom components to a lightweight servlet-container such
    as Tomcat or Jetty. Today, you wouldn't install Jetty from scratch, you
    will install it as an OSGi bundle in an OSGi container such as Apache
    Felix. If you needed an embedded database like Derby or a transaction
    provider, you can now tell your container what bundles to deploy and every
    component is developed to operate in a standard operating environment.
    Once you've figured out how to instantiate a empty OSGi container such as
    Apache Felix there is no simpler deployment mechanism for your
    application.</para>

    <para>In this chapter, we introduce some tools and techniques you can use
    to start developing OSGi components (or bundles) using Maven. The
    following recipes focus on the intersection of Apache Felix, the OPS4J
    project, and the Nexus repository manager as a bridge between Maven
    repositories and OSGi Bundle repositories. At the end of this chapter, you
    should have a clear picture of how to start developing OSGi-based web
    applications using nothing more than Maven.</para>
  </section>

  <section id="sect-osgi-generate-project">
    <title>Generating an OSGi Project with Maven</title>

    <section>
      <title>Problem</title>

      <para>You need to create a Maven multi-module project that allows you to
      develop a modular, OSGi-based web application.</para>
    </section>

    <section>
      <title>Solution</title>

      <para>Use the Maven Pax Plugin from OPS4J, and call the
      <varname>create-project</varname> goal. The following command-line will
      create a multi-module project with a groupId of
      <varname>org.sonatype.mcookbook</varname>, an artifactId of
      <varname>osgi-project</varname>, and a version of
      <varname>1.0-SNAPSHOT</varname>:</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">${root.example.dir}/osgi $ <command>mvn org.ops4j:maven-pax-plugin:create-project \
  -DgroupId=org.sonatype.mcookbook \
  -DartifactId=osgi-project \
  -Dversion=1.0-SNAPSHOT</command>
[INFO] Scanning for projects...
[INFO] artifact org.ops4j:maven-pax-plugin: checking for updates from central
[INFO] ------------------------------------------------------------------------
[INFO] Building Maven Default Project
[INFO]    task-segment: [org.ops4j:maven-pax-plugin:create-project] (aggregator-style)
[INFO] ------------------------------------------------------------------------
...
[INFO] [pax:create-project]
[INFO] Selecting latest archetype release within version range [1,2)
[INFO] artifact org.ops4j.pax.construct:maven-archetype-osgi-project: checking for updates from central
[INFO] ----------------------------------------------------------------------------
[INFO] Using following parameters for creating Archetype: maven-archetype-osgi-project:1.0.3
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: packageName, Value: org.sonatype.mcookbook.osgi-project
[INFO] Parameter: archetypeVersion, Value: 1.0.3
[INFO] Parameter: groupId, Value: org.sonatype.mcookbook
[INFO] Parameter: archetypeArtifactId, Value: maven-archetype-osgi-project
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: archetypeGroupId, Value: org.ops4j.pax.construct
[INFO] Parameter: basedir, Value: ${root.example.dir}/osgi
[INFO] Parameter: package, Value: org.sonatype.mcookbook.osgi-project
[INFO] Parameter: artifactId, Value: osgi-project
[INFO] ********************* End of debug info from resources from generated POM ***********************
[INFO] Archetype created in dir: ${root.example.dir}/osgi/osgi-project
</screen>

      <para>Once you've generated an OSGi project using the Pax Plugin, you
      will have the following directory structure:</para>

      <figure>
        <title>Project Structure Created by the OPS4J Pax Plugin</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/osgi_osgi-project-filesystems.png" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>If you want to verify that you can build the project successfully,
      run <command>mvn clean install</command>:</para>

      <screen>${root.example.dir}/osgi/osgi-project $ <command>mvn clean install</command>
[INFO] Reactor build order: 
[INFO]   org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]   osgi-project - plugin configuration
[INFO]   osgi-project - wrapper instructions
[INFO]   osgi-project - bundle instructions
[INFO]   osgi-project - imported bundles
[INFO] ------------------------------------------------------------------------
[INFO] Building org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]    task-segment: [clean, install]
[INFO] ------------------------------------------------------------------------
[INFO] [clean:clean]
[INFO] [site:attach-descriptor]
[INFO] [install:install]
[INFO] Installing ${root.example.dir}/osgi/osgi-project/target/pom-transformed.
xml to ${local.repo.dir}/org/sonatype/mcookbook/osgi-project/1.0-SNAPS
HOT/osgi-project-1.0-SNAPSHOT.pom
[INFO] ------------------------------------------------------------------------
[INFO] Building osgi-project - plugin configuration
[INFO]    task-segment: [clean, install]
...</screen>
    </section>

    <section>
      <title>Discussion</title>

      <para>The generated multi-module project structure contains a parent
      project with the supplied groupId, artifactId, and version, and a few
      submodules:</para>

      <variablelist>
        <varlistentry>
          <term>osgi-project/pom.xml</term>

          <listitem>
            <para>This is the parent POM</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>osgi-project/poms/pom.xml</term>

          <listitem>
            <para></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>osgi-project/poms/compiled/pom.xml</term>

          <listitem>
            <para></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>osgi-project/poms/wrappers/pom.xml</term>

          <listitem>
            <para></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>osgi-project/provision/pom.xml</term>

          <listitem>
            <para></para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>In addition to these projects, the osgi-project directory also
      contains a directory that captures the configuration of the runtime
      environment. This runner directory contains the following files and
      directories:</para>

      <variablelist>
        <varlistentry>
          <term>osgi-project/runner/deploy-pom.xml</term>

          <listitem>
            <para>This POM file is generated using Pax-Construct, it contains
            some configuration parameters for the Apache Felix
            container.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>osgi-project/runner/bundles</term>

          <listitem>
            <para>This directory contains OSGi bundles which have been
            downloaded for use in Apache Felix.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>osgi-project/runner/felix</term>

          <listitem>
            <para>This directory contains the runtime files that are required
            for Apache Felix, this includes a config.ini file and a cache
            directory.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>

  <section>
    <title>Starting an OSGi Container</title>

    <section>
      <title>Problem</title>

      <para>You created an OSGi project, not you want to see it running in an
      OSGi environment. You need to start an OSGi container and load imported
      bundles into the runtime environment.</para>
    </section>

    <section>
      <title>Solution</title>

      <para>First, creat an OSGi project by executing the commands in <xref
      linkend="sect-osgi-generate-project" />. Once you do this, you have a
      structure that has been designed to support OSGi development with Maven.
      To start the Apache Felix container, run <command>mvn install
      pax:provision</command> from the <filename>osgi-project/</filename>
      directory:</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">${root.example.dir}/osgi/osgi-project $ <command>mvn install pax:provision</command>
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]   osgi-project - plugin configuration
[INFO]   osgi-project - wrapper instructions
[INFO]   osgi-project - bundle instructions
[INFO]   osgi-project - imported bundles
...
[INFO] [pax:provision]
[INFO] ~~~~~~~~~~~~~~~~~~~
[INFO]  No bundles found! 
[INFO] ~~~~~~~~~~~~~~~~~~~
    ______  ________  __  __
   / __  / /  __   / / / / /
  /  ___/ /  __   / _\ \ _/
 /  /    /  / /  / / _\ \
/__/    /__/ /__/ /_/ /_/

Pax Runner (1.0.0) from OPS4J - http://www.ops4j.org
----------------------------------------------------

 -&gt; Using config [classpath:META-INF/runner.properties]
 -&gt; Using only arguments from command line
 -&gt; Scan bundles from [${root.example.dir}/osgi/osgi-project/runner/deploy-pom.xml]
 -&gt; Scan bundles from [scan-pom:file:/${root.example.dir}/osgi/osgi-project/runner/deploy-pom.xml]
 -&gt; Preparing framework [Felix 1.8.0]
 -&gt; Downloading bundles...
 -&gt; Using execution environment [J2SE-1.5]
 -&gt; Runner has successfully finished his job!


Welcome to Felix.
=================

-&gt; 
</screen>
    </section>

    <section>
      <title>Discussion</title>

      <para>When you started up Felix, notice that the line directly following
      the execution of the <varname>pax:provision</varname> goal says "No
      bundles found!". By running pax:provision, you've started the Felix OSGi
      service platform. Felix uses the configuration from a properties file
      and then scans two deploy-pom.xml files for bundles that it should
      download and install. Finding none, it presents a simple prompt and
      awaits orders. At this point, we have an empty container that isn't
      running any custom logic or downloading any OSGi bundles. Over the next
      few recipes we're going to fill in this picture a bit by wrapping
      existing JARs, importing existing OSGi bundles, and writing a custom
      OSGi service.</para>
    </section>
  </section>

  <section>
    <title>Importing OSGi Bundles with Maven</title>

    <para></para>

    <section>
      <title>Problem</title>

      <para>You want to configure your OSGi runtime to load bundles on
      startup. </para>
    </section>

    <section>
      <title>Solution</title>

      <para>Import OSGi bundles from the Maven repository. While the Maven
      repository wasn't designed for OSGi like the OBR repository format, it
      contains a few components which contain the appropriate metadata to be
      referenced as OSGi components. To configure your runtime environment to
      load these components at runtime, you will need to invoke the
      pax:import-bundle goal.</para>

      <para>As shown in the following screen listing, you are going to import
      several OSGi bundles from the Maven repository. First you are going to
      install the Apaceh Felix Web Management Console and then you are going
      to install some of its requirements. To install the first OSGi bundle
      run the following command:</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">${root.example.dir}/osgi/osgi-project $ <command>mvn pax:import-bundle \
    -DgroupId=org.apache.felix \
    -DartifactId=org.apache.felix.webconsole \
    -Dversion=1.2.8</command>
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]   osgi-project - plugin configuration
[INFO]   osgi-project - wrapper instructions
[INFO]   osgi-project - bundle instructions
[INFO]   osgi-project - imported bundles
[INFO] ------------------------------------------------------------------------
[INFO] Building org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]    task-segment: [pax:import-bundle] (aggregator-style)
[INFO] ------------------------------------------------------------------------
[INFO] [pax:import-bundle]
Downloading: http://repo1.maven.org/maven2/org/apache/felix/org.apache.felix.webconsole/1.2.8/org.apache.felix.webconsole-1.2.8.pom
6K downloaded  (org.apache.felix.webconsole-1.2.8.pom)
Downloading: http://repo1.maven.org/maven2/org/apache/felix/felix/1.0.4/felix-1.0.4.pom
14K downloaded  (felix-1.0.4.pom)
[INFO] Importing Apache Felix Web Management Console to org.sonatype.mcookbook.osgi-project.build:provision:pom:1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 6 seconds
[INFO] Finished at: Mon Jul 13 18:30:37 CDT 2009
[INFO] Final Memory: 8M/16M
[INFO] ------------------------------------------------------------------------
</screen>

      <para>After installing the Apache Felix Web Management console, you will
      need to install some of its prerequisites. The following commands
      install version 2.1 of the Java Servlet API, the Jetty HTTP server, and
      the <varname>org.apache.felix.scr</varname> component. As you can see,
      some of the OSGi bundle you are installing are simple libraries and
      APIs, while others are complex servers. </para>

      <screen>${root.example.dir}/osgi/osgi-project $ <command>mvn pax:import-bundle \
    -DgroupId=org.apache.felix \
    -DartifactId=javax.servlet
    -Dversion=1.0.0</command>
${root.example.dir}/osgi/osgi-project $ <command>mvn pax:import-bundle \
    -DgroupId=org.apache.felix \
    -DartifactId=org.apache.felix.scr \
    -Dversion=1.0.8</command>
${root.example.dir}/osgi/osgi-project $ <command>mvn pax:import-bundle \
    -DgroupId=org.apache.felix \
    -DartifactId=org.apache.felix.http.jetty \
    -Dversion=1.0.1</command></screen>

      <para>Once you have bundled these OSGi bundles, you can start your
      runtme environment. Because the pax:import-bundle goal changex some of
      the POMs in your osgi-project, you will need to run <command>mvn
      install</command> before you can run <command>mvn
      pax:provision</command>.</para>

      <screen>${root.example.dir}/osgi/osgi-project $ <command>mvn install pax:provision</command>
[INFO] [pax:provision]
[INFO] Installing ${root.example.dir}/osgi/osgi-project/runner/target/pom-transformed.xml 
       to ${local.repo.dir}/org/sonatype/mcookbook/osgi-project/build/deployment/1.0-SNAPSHOT/deployment-1.0-SNAPSHOT.pom
    ______  ________  __  __
   / __  / /  __   / / / / /
  /  ___/ /  __   / _\ \ _/
 /  /    /  / /  / / _\ \
/__/    /__/ /__/ /_/ /_/

Pax Runner (1.0.0) from OPS4J - http://www.ops4j.org
----------------------------------------------------

 -&gt; Using config [classpath:META-INF/runner.properties]
 -&gt; Using only arguments from command line
 -&gt; Scan bundles from [${root.example.dir}/osgi/osgi-project/runner/deploy-pom.xml]
 -&gt; Scan bundles from [scan-pom:file:${root.example.dir}/osgi/osgi-project/runner/deploy-pom.xml]
 -&gt; Provision bundle [mvn:org.apache.felix/org.apache.felix.webconsole/1.2.8, 
at default start level, bundle will be started, bundle will be loaded from the cache]
 -&gt; Provision bundle [mvn:org.apache.felix/javax.servlet/1.0.0, at default start 
level, bundle will be started, bundle will be loaded from the cache]
 -&gt; Provision bundle [mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1, 
at default start level, bundle will be started, bundle will be loaded from the cache]
 -&gt; Provision bundle [mvn:org.apache.felix/org.apache.felix.scr/1.0.8, at default 
start level, bundle will be started, bundle will be loaded from the cache]
 -&gt; Preparing framework [Felix 1.8.0]
 -&gt; Downloading bundles...
 -&gt; mvn:org.apache.felix/org.apache.felix.webconsole/1.2.8 : 102399 bytes 
 -&gt; mvn:org.apache.felix/javax.servlet/1.0.0 : 30450 bytes @ [ 10150kBps ]
 -&gt; mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1 : 102399 bytes @ 
 -&gt; mvn:org.apache.felix/org.apache.felix.scr/1.0.8 : 112058 bytes @ [ 8619kBps ]
 -&gt; Using execution environment [J2SE-1.5]
 -&gt; Runner has successfully finished his job!


Welcome to Felix.
=================

-&gt; org.mortbay.log:Logging to org.mortbay.log via org.apache.felix.http.jetty.LogServiceLog
org.mortbay.log:Init SecureRandom.
org.mortbay.log:started org.mortbay.jetty.servlet.HashSessionIdManager@34a33d
org.mortbay.log:started org.mortbay.jetty.servlet.HashSessionManager@46ac5a
org.mortbay.log:starting OsgiServletHandler@dd7786
org.mortbay.log:started OsgiServletHandler@dd7786
org.mortbay.log:starting SessionHandler@d23e75
org.mortbay.log:started SessionHandler@d23e75
org.mortbay.log:starting org.mortbay.jetty.servlet.Context@9deddb{/,null}
org.mortbay.log:starting ErrorHandler@28bda
org.mortbay.log:started ErrorHandler@28bda
org.mortbay.log:started org.mortbay.jetty.servlet.Context@9deddb{/,null}
org.mortbay.log:jetty-6.1.x
org.mortbay.log:started Realm[OSGi HTTP Service Realm]==[]
org.mortbay.log:started org.mortbay.thread.QueuedThreadPool@f13b08
org.mortbay.log:starting Server@5a936b
org.mortbay.log:started org.mortbay.jetty.nio.SelectChannelConnector$1@9576c3
org.mortbay.log:Started SelectChannelConnector@0.0.0.0:8080
org.mortbay.log:started SelectChannelConnector@0.0.0.0:8080
org.mortbay.log:started Server@5a936b
org.mortbay.log:started /system/console/*
org.mortbay.log:started /system/console/res
</screen>

      <para>After running mvn pax:provision, you have an instance of Felix
      that is running the Apache Felix Web Management Console application.
      Fire up a web brower, and go to <ulink
      url="http://localhost:8080/system/console">http://localhost:8080/system/console</ulink>
      to load the interface. The default administrative username and password
      is <varname>admin</varname>/<varname>admin</varname>.</para>

      <figure id="fig-osgi-felix-web-management">
        <title>Apache Felix Web Management Console</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/osgi_felix-admin-console.png" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Discussion</title>

      <para></para>
    </section>
  </section>

  <section>
    <title>Creating an OSGi Bundle with Maven</title>

    <para></para>

    <section>
      <title>Problem</title>

      <para></para>
    </section>

    <section>
      <title>Solution</title>

      <para></para>

      <screen>$ <command>mvn pax:create-bundle \
  -Dpackage=org.sonatype.mcookbook \
  -Dname=osgi-bundle \
  -Dversion=1.0-SNAPSHOT</command>
</screen>
    </section>

    <section>
      <title>Discussion</title>

      <para></para>

      <figure>
        <title>Custom Bundle</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/web/osgi_osgi-custom-bundle-fs.png" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>Deploying OSGi Bundles to a Maven Repository</title>

    <para></para>

    <section>
      <title>Problem</title>

      <para></para>
    </section>

    <section>
      <title>Solution</title>

      <para></para>
    </section>

    <section>
      <title>Discussion</title>

      <para></para>
    </section>
  </section>

  <section>
    <title>Transforming a Maven Repository into an OSGi Bundle
    Repository</title>

    <para>Now that you've published an OSGi bundle to a Maven repository, how
    would you consume it in an OSGi container like Apache Felix?</para>

    <section>
      <title>Problem</title>

      <para>You need to expose OSGi bundles in a Maven repository using the
      OBR repository format.</para>
    </section>

    <section>
      <title>Solution</title>

      <para>Use Nexus Professional, and create a virtual OBR repository which
      will</para>
    </section>

    <section>
      <title>Discussion</title>

      <para></para>
    </section>
  </section>

  <section>
    <title>Proxying OSGi Bundle Repositories</title>

    <para></para>

    <section>
      <title>Problem</title>

      <para></para>
    </section>

    <section>
      <title>Solution</title>

      <para></para>
    </section>

    <section>
      <title>Discussion</title>

      <para></para>
    </section>
  </section>

  <section>
    <title>Grouping OSGi Bundle Repositories</title>

    <para></para>
  </section>
</chapter>
