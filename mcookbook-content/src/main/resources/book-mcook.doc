= The Maven Cookbook

[[copyright]]
== Copyright</title>

Copyright © ${copyright.year} ${project.organization.name}

This work is licensed under a Creative Commons Attribution-Noncommercial-No Derivative Works 3.0 United States license. For more information about this license, see <ulink url="http://creativecommons.org/licenses/by-nc-nd/3.0/us/">http://creativecommons.org/licenses/by-nc-nd/3.0/us/</ulink>.

Online version published by ${project.organization.name}, ${organization.address}.

Nexus™, Nexus Professional™, and all Nexus-related logos are trademarks or registered trademarks of Sonatype, Inc., in the United States and other countries.

Java™ and all Java-based trademarks and logos are trademarks or registered trademarks of Sun Microsystems, Inc., in the United States and other countries.

IBM® and WebSphere® are trademarks or registered trademarks of International Business Machines, Inc., in the United States and other countries.

Eclipse™ is a trademark of the Eclipse Foundation, Inc., in the United States and other countries.

Apache and the Apache feather logo are trademarks of The Apache Software Foundation.

Linux® is the registered trademark of Linus Torvalds in the U.S. and other countries.

Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks. Where those designations appear in this book, and ${project.organization.name} was aware of a trademark claim, the designations have been printed in caps or initial caps.

While every precaution has been taken in the preparation of this book, the publisher and authors assume no responsibility for errors or omissions, or for damages resulting from the use of the information contained herein.

[[foreword]]
== Foreword: ${project.version}</title>

This is an initial alpha version of the Maven Cookbook, and I mean "pre-alpha". If you are coming to the book with the expectation that this is a polished product, please check back in a few months. I'm convinced that this will be a better book because people are going to have a window into the process, you will be able to see the false starts, outline revisions, and other parts of the writing process that are usually hidden from view. You'll be able to give us feedback and reviews even before we've stated that the content is ready for review.

Tim O'Brien, Sonatype

August, 2011

Edition: ${project.version}

[[osgi]]
== Cooking with Maven and OSGi

[[using-sect-intro]]
=== Introduction

OSGi is a stable, widely used framework for developing and deploying component-based systems. If you've been using Eclipse, you've already been using an OSGi container for a few years, and the pluggable and configurable nature of the <ulink url="http://www.eclipse.org">Eclipse</ulink> platform is a product of the OSGi standards. As a concept and as an approach, OSGi is a proven standard with an installed user base of millions and growing. It might feel like an emerging standard because solid tool support is just now emerging. Prior to the last year, you might have encountered OSGi "builds", but they were usually experienced via an IDE (such as Eclipse).

Many are starting to view OSGi as the perfect solution both for deploying server-side applications and client-side GUI applications. If you need a GUI front-end or a web application to interface with a database back-end, there is a rich array of standard components to choose from in the OSGi community. Before OSGi-based servers, if you wanted a full fledged application server with a Transaction provider and JMS integration, you had to either run some large, monolithic application server like <ulink url="http://www-01.ibm.com/software/websphere/">WebSphere</ulink>, or you had to hack some custom components to a lightweight servlet-container such as <ulink url="http://tomcat.apache.org">Apache Tomcat</ulink> or <ulink url="http://www.mortbay.org/jetty/">Jetty</ulink>. Today, you wouldn't install Jetty from scratch, you will install it as an OSGi bundle in an OSGi container such as <ulink url="http://felix.apache.org/site/index.html">Apache Felix</ulink>. If you needed an embedded database like <ulink url="http://db.apache.org/derby/">Apache Derby</ulink> or a transaction provider, you can now tell your container what bundles to deploy and every component is developed to operate in a standard operating environment. Once you've figured out how to instantiate an empty OSGi container such as Apache Felix there is no simpler deployment mechanism for your application, and once you've connected it to <ulink url="www.sonatype.com/products/nexus">Nexus Professional</ulink>, you've instantly solved the deployment problem in Java. This chapter takes you through the steps required to start using Maven and OSGi together and how to use Nexus Professional to support the distribution and deployment opportunities that are possible with an OSGi bundle repository (OBR).

In this chapter, we introduce some tools and techniques you can use to start developing OSGi components (or bundles) using Maven. The following recipes focus on the intersection of Apache Felix, the <ulink url="http://www.ops4j.org/">OPS4J project</ulink>, and the Nexus repository manager as a bridge between Maven repositories and OSGi Bundle repositories. At the end of this chapter, you should have a clear picture of how to start developing OSGi-based applications using Maven. </section>

[[sect-osgi-generate-project]]
=== Generating an OSGi Project with Maven

==== Task

You need to create a Maven multi-module project that allows you to develop a modular, OSGi-based web application. </section>

==== Action

Use the <ulink url="http://www.ops4j.org/projects/pax/construct/maven-pax-plugin/">Maven Pax Plugin</ulink> from OPS4J, and call the <varname>create-project</varname> goal. The following command-line will create a multi-module project with a groupId of <varname>org.sonatype.mcookbook</varname>, an artifactId of <varname>osgi-project</varname>, and a version of <varname>1.0-SNAPSHOT</varname>:

----
mvn org.ops4j:maven-pax-plugin:create-project \
                        -DgroupId=org.sonatype.mcookbook \
                        -DartifactId=osgi-project \
                        -Dversion=1.0-SNAPSHOT</command>
[INFO] Scanning for projects...
[INFO] artifact org.ops4j:maven-pax-plugin: checking for updates from central
[INFO] ------------------------------------------------------------------------
[INFO] Building Maven Default Project
[INFO]    task-segment: [org.ops4j:maven-pax-plugin:create-project] (aggregator-style)
[INFO] ------------------------------------------------------------------------
                    ...
[INFO] [pax:create-project]
[INFO] Selecting latest archetype release within version range [1,2)
[INFO] artifact org.ops4j.pax.construct:maven-archetype-osgi-project: checking for updates from central
[INFO] ----------------------------------------------------------------------------
[INFO] Using following parameters for creating Archetype: maven-archetype-osgi-project:1.0.3
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: packageName, Value: org.sonatype.mcookbook.osgi-project
[INFO] Parameter: archetypeVersion, Value: 1.0.3
[INFO] Parameter: groupId, Value: org.sonatype.mcookbook
[INFO] Parameter: archetypeArtifactId, Value: maven-archetype-osgi-project
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: archetypeGroupId, Value: org.ops4j.pax.construct
[INFO] Parameter: basedir, Value: ${root.example.dir}/osgi
[INFO] Parameter: package, Value: org.sonatype.mcookbook.osgi-project
[INFO] Parameter: artifactId, Value: osgi-project
[INFO] ********************* End of debug info from resources from generated POM ***********************
[INFO] Archetype created in dir: ${root.example.dir}/osgi/osgi-project

----

Once you've generated an OSGi project using the Pax Plugin, you will have the following directory structure:

.Project Structure Created by the OPS4J Pax Plugin
image::figs/web/osgi_osgi-project-filesystems.png[]

If you want to verify that you can build the project successfully, run <command>mvn clean install</command>:

----
[INFO] Reactor build order: 
[INFO]   org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]   osgi-project - plugin configuration
[INFO]   osgi-project - wrapper instructions
[INFO]   osgi-project - bundle instructions
[INFO]   osgi-project - imported bundles
[INFO] ------------------------------------------------------------------------
[INFO] Building org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]    task-segment: [clean, install]
[INFO] ------------------------------------------------------------------------
[INFO] [clean:clean]
[INFO] [site:attach-descriptor]
[INFO] [install:install]
[INFO] Installing ${root.example.dir}/osgi/osgi-project/target/pom-transformed.
                    xml to ${local.repo.dir}/org/sonatype/mcookbook/osgi-project/1.0-SNAPS
                    HOT/osgi-project-1.0-SNAPSHOT.pom
[INFO] ------------------------------------------------------------------------
[INFO] Building osgi-project - plugin configuration
[INFO]    task-segment: [clean, install]
                    ...
----

NOTE: Instead of executing these goals manually, you can also download and install the Pax-Construct scripts which can be used to automate the process of creating a new OSGi project with the Pax plugin. For more information, see the <ulink url="http://www.ops4j.org/projects/pax/construct/">Pax Construct Quickstart page</ulink>. </note> </section>

==== Detail

The generated multi-module project structure contains a parent project with the supplied groupId, artifactId, and version, and a few submodules:

<variablelist> <varlistentry> <term>osgi-project/pom.xml</term> 

  <listitem> This is the parent POM </listitem> </varlistentry>

<varlistentry> <term>osgi-project/poms/compiled/pom.xml</term>

  <listitem> This POM serves as the parent POM to all of the compiled OSGi components you will add to this osgi-project Maven project. </listitem> </varlistentry>

<varlistentry> <term>osgi-project/poms/wrappers/pom.xml</term>

  <listitem> If you can't find a particular library as an OSGi component, the Pax Construct tools allow you to wrap an existing dependency artifact into an OSGi bundle. The configuration for these wrapped bundles is stored in this POM. </listitem> </varlistentry>

<varlistentry> <term>osgi-project/provision/pom.xml</term>

  <listitem> This POM configures the Apache Felix runtime environment that you can start by running the <varname>pax:provision</varname> goal. If you need to import a bundle into your runtime environment, this is the POM that contains a reference to the corresponding Maven dependency. </listitem> </varlistentry> </variablelist>

NOTE: The <filename>osgi-project/runner</filename> directory is not created until you run the <varname>pax:provision</varname> goal as shown in <xref linkend="osgi-sect-starting-osgi-container" />. </note> </section> </section>

[[osgi-sect-starting-osgi-container]]
=== Starting an OSGi Container

==== Task

You created an OSGi project, now you want to see it running in an OSGi environment. You need to start an OSGi container and load imported bundles into the runtime environment. </section>

==== Action

First, create an OSGi project by executing the commands in <xref linkend="sect-osgi-generate-project" />. Once you do this, you have a structure that has been designed to support OSGi development with Maven. To start the Apache Felix container, run <command>mvn install pax:provision</command> from the <filename>osgi-project/</filename> directory:

----
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]   osgi-project - plugin configuration
[INFO]   osgi-project - wrapper instructions
[INFO]   osgi-project - bundle instructions
[INFO]   osgi-project - imported bundles
                    ...
[INFO] [pax:provision]
[INFO] ~~~~~~~~~~~~~~~~~~~
[INFO]  No bundles found! 
[INFO] ~~~~~~~~~~~~~~~~~~~
                    ______  ________  __  __
                    / __  / /  __   / / / / /
                    /  ___/ /  __   / _\ \ _/
                    /  /    /  / /  / / _\ \
                    /__/    /__/ /__/ /_/ /_/

                    Pax Runner (1.0.0) from OPS4J - http://www.ops4j.org
                    ----------------------------------------------------

                    -&gt; Using config [classpath:META-INF/runner.properties]
                    -&gt; Using only arguments from command line
                    -&gt; Scan bundles from [${root.example.dir}/osgi/osgi-project/runner/deploy-pom.xml]
                    -&gt; Scan bundles from [scan-pom:file:/${root.example.dir}/osgi/osgi-project/runner/deploy-pom.xml]
                    -&gt; Preparing framework [Felix 1.8.0]
                    -&gt; Downloading bundles...
                    -&gt; Using execution environment [J2SE-1.5]
                    -&gt; Runner has successfully finished his job!


                    Welcome to Felix.
                    =================

                    -&gt; 
----

NOTE: Instead of executing these goals manually, you can also download and install the Pax-Construct scripts which can be used to automate the process of running Apache Felix with the Pax plugin. For more information, see the <ulink url="http://www.ops4j.org/projects/pax/construct/">Pax Construct Quickstart page</ulink>. </note> </section>

==== Detail

When you started up Felix, notice that the line directly following the execution of the <varname>pax:provision</varname> goal says "No bundles found!". By running <varname>pax:provision</varname>, you've started the Felix OSGi service platform. Felix uses the configuration from a properties file and then scans two deploy-pom.xml files for bundles that it should download and install. Finding none, it presents a simple prompt and awaits orders. At this point, we have an empty container that isn't running any custom logic or downloading any OSGi bundles.

The first time you ran <varname>pax:provision</varname>, the Pax plugin created a <filename>runner</filename> directory under <varname>osgi-project</varname> which captures the configuration of the runtime environment. This <filename>runner</filename> directory contains the following files and directories:

<variablelist> <varlistentry> <term>osgi-project/runner/deploy-pom.xml</term> 

  <listitem> This POM file is generated using Pax-Construct, it contains some configuration parameters for the Apache Felix container. </listitem> </varlistentry>

<varlistentry> <term>osgi-project/runner/bundles</term>

  <listitem> This directory contains OSGi bundles which have been downloaded for use in Apache Felix. </listitem> </varlistentry>

<varlistentry> <term>osgi-project/runner/felix</term>

  <listitem> This directory contains the runtime files that are required for Apache Felix, this includes a config.ini file and a cache directory. </listitem> </varlistentry> </variablelist>

Once you have the console for Felix loaded, you can control the platform, load components from remote repositories, list all of the running components, and start and stop components. Try executing the command <command>help</command> to see a list of available commands:

----
                    bundlelevel &lt;level&gt; &lt;id&gt; ... | &lt;id&gt; - set or get bundle start level.
                    cd [&lt;base-URL&gt;]                     - change or display base URL.
                    exports &lt;id&gt; ...                    - list exported packages.
                    headers [&lt;id&gt; ...]                  - display bundle header properties.
                    help                                - display impl commands.
                    imports &lt;id&gt; ...                    - list imported packages.
                    install &lt;URL&gt; [&lt;URL&gt; ...]           - install bundle(s).
                    ps [-l | -s | -u]                   - list installed bundles.
                    refresh [&lt;id&gt; ...]                  - refresh packages.
                    requirers &lt;id&gt; ...                  - list requiring bundles.
                    requires &lt;id&gt; ...                   - list required bundles.
                    resolve [&lt;id&gt; ...]                  - attempt to resolve the specified bundles.
                    scr help                            - Declarative Services Runtime
                    services [-u] [-a] [&lt;id&gt; ...]       - list registered or used services.
                    shutdown                            - shutdown framework.
                    start [-t] &lt;id&gt; [&lt;id&gt; &lt;URL&gt; ...]    - start bundle(s).
                    startlevel [&lt;level&gt;]                - get or set framework start level.
                    stop [-t] &lt;id&gt; [&lt;id&gt; ...]           - stop bundle(s).
                    uninstall &lt;id&gt; [&lt;id&gt; ...]           - uninstall bundle(s).
                    update &lt;id&gt; [&lt;URL&gt;]                 - update bundle.
                    version                             - display version of framework.
----

If you execute the <command>ps</command> command, you can see a list of bundles with IDs that are running in the Felix container. You can start and stop bundles by running <command>start</command> and <command>stop</command> followed by the ID of the specific bundle you want to control. You can also install and uninstall bundles in the running container. Over the next few recipes we're going to fill in this picture a bit by wrapping existing JARs, importing existing OSGi bundles, and writing a custom OSGi service. </section>

==== Resources

For more information about Apache Felix, see <ulink url="http://felix.apache.org/site/index.html">http://felix.apache.org/site/index.html</ulink>. </section> </section>

=== Importing OSGi Bundles with Maven

==== Task

You want to configure your OSGi runtime to load bundles on startup. </section>

==== Action

Import OSGi bundles from the Maven repository. While the Maven repository wasn't designed for OSGi like the OSGi Bundle Repositoriy (OBR) repository format, it contains a few components which contain the appropriate metadata to be referenced as OSGi components. To configure your runtime environment to load these components at runtime, you will need to invoke the pax:import-bundle goal.

As shown in the following screen listing, you are going to import several OSGi bundles from the Maven repository. First you are going to install the Apache Felix Web Management Console and then you are going to install some of its requirements. To install the first OSGi bundle run the following command:

----
mvn pax:import-bundle \
                        -DgroupId=org.apache.felix \
                        -DartifactId=org.apache.felix.webconsole \
                        -Dversion=1.2.8</command>
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]   osgi-project - plugin configuration
[INFO]   osgi-project - wrapper instructions
[INFO]   osgi-project - bundle instructions
[INFO]   osgi-project - imported bundles
[INFO] ------------------------------------------------------------------------
[INFO] Building org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]    task-segment: [pax:import-bundle] (aggregator-style)
[INFO] ------------------------------------------------------------------------
[INFO] [pax:import-bundle]
[INFO] Importing Apache Felix Web Management Console to \
                    org.sonatype.mcookbook.osgi-project.build:provision:pom:1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 6 seconds
[INFO] Finished at: Mon Jul 13 18:30:37 CDT 2009
[INFO] Final Memory: 8M/16M
[INFO] ------------------------------------------------------------------------

----

After installing the Apache Felix Web Management console, you will need to install some of its prerequisites. The following commands install version 2.1 of the Java Servlet API, the Jetty HTTP server, and the <varname>org.apache.felix.scr</varname> component. As you can see, some of the OSGi bundle you are installing are simple libraries and APIs, while others are complex servers.

----
mvn pax:import-bundle \
                        -DgroupId=org.apache.felix \
                        -DartifactId=javax.servlet
                        -Dversion=1.0.0</command>
                    ${root.example.dir}/osgi/osgi-project $ <command>mvn pax:import-bundle \
                        -DgroupId=org.apache.felix \
                        -DartifactId=org.apache.felix.scr \
                        -Dversion=1.0.8</command>
                    ${root.example.dir}/osgi/osgi-project $ <command>mvn pax:import-bundle \
                        -DgroupId=org.apache.felix \
                        -DartifactId=org.apache.felix.http.jetty \
                        -Dversion=1.0.1</command>
----

Once you have bundled these OSGi bundles, you can start your runtme environment. Because the <varname>pax:import-bundle</varname> goal changes some of the POMs in your <varname>osgi-project</varname>, you will need to run <command>mvn install</command> before you can run <command>mvn pax:provision</command>. After importing bundles, they will appear in <filename>provision/pom.xml</filename>.

----
[INFO] [pax:provision]
[INFO] Installing ${root.example.dir}/osgi/osgi-project/runner/target/pom-transformed.xml 
                    to ${local.repo.dir}/org/sonatype/mcookbook/osgi-project/build/deployment/1.0-SNAPSHOT/\
                    deployment-1.0-SNAPSHOT.pom
                    ______  ________  __  __
                    / __  / /  __   / / / / /
                    /  ___/ /  __   / _\ \ _/
                    /  /    /  / /  / / _\ \
                    /__/    /__/ /__/ /_/ /_/

                    Pax Runner (1.0.0) from OPS4J - http://www.ops4j.org
                    ----------------------------------------------------

                    -&gt; Using config [classpath:META-INF/runner.properties]
                    -&gt; Using only arguments from command line
                    -&gt; Scan bundles from [${root.example.dir}/osgi/osgi-project/runner/deploy-pom.xml]
                    -&gt; Scan bundles from [scan-pom:file:${root.example.dir}/osgi/osgi-project/runner/deploy-pom.xml]
                    -&gt; Provision bundle [mvn:org.apache.felix/org.apache.felix.webconsole/1.2.8, 
                    at default start level, bundle will be started, bundle will be loaded from the cache]
                    -&gt; Provision bundle [mvn:org.apache.felix/javax.servlet/1.0.0, at default start 
                    level, bundle will be started, bundle will be loaded from the cache]
                    -&gt; Provision bundle [mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1, 
                    at default start level, bundle will be started, bundle will be loaded from the cache]
                    -&gt; Provision bundle [mvn:org.apache.felix/org.apache.felix.scr/1.0.8, at default 
                    start level, bundle will be started, bundle will be loaded from the cache]
                    -&gt; Preparing framework [Felix 1.8.0]
                    -&gt; Downloading bundles...
                    -&gt; mvn:org.apache.felix/org.apache.felix.webconsole/1.2.8 : 102399 bytes 
                    -&gt; mvn:org.apache.felix/javax.servlet/1.0.0 : 30450 bytes @ [ 10150kBps ]
                    -&gt; mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1 : 102399 bytes @ 
                    -&gt; mvn:org.apache.felix/org.apache.felix.scr/1.0.8 : 112058 bytes @ [ 8619kBps ]
                    -&gt; Using execution environment [J2SE-1.5]
                    -&gt; Runner has successfully finished his job!


                    Welcome to Felix.
                    =================

                    -&gt; org.mortbay.log:Logging to org.mortbay.log via org.apache.felix.http.jetty.LogServiceLog
                    org.mortbay.log:Init SecureRandom.
                    org.mortbay.log:started org.mortbay.jetty.servlet.HashSessionIdManager@34a33d
                    org.mortbay.log:started org.mortbay.jetty.servlet.HashSessionManager@46ac5a
                    org.mortbay.log:starting OsgiServletHandler@dd7786
                    org.mortbay.log:started OsgiServletHandler@dd7786
                    org.mortbay.log:starting SessionHandler@d23e75
                    org.mortbay.log:started SessionHandler@d23e75
                    org.mortbay.log:starting org.mortbay.jetty.servlet.Context@9deddb{/,null}
                    org.mortbay.log:starting ErrorHandler@28bda
                    org.mortbay.log:started ErrorHandler@28bda
                    org.mortbay.log:started org.mortbay.jetty.servlet.Context@9deddb{/,null}
                    org.mortbay.log:jetty-6.1.x
                    org.mortbay.log:started Realm[OSGi HTTP Service Realm]==[]
                    org.mortbay.log:started org.mortbay.thread.QueuedThreadPool@f13b08
                    org.mortbay.log:starting Server@5a936b
                    org.mortbay.log:started org.mortbay.jetty.nio.SelectChannelConnector$1@9576c3
                    org.mortbay.log:Started SelectChannelConnector@0.0.0.0:8080
                    org.mortbay.log:started SelectChannelConnector@0.0.0.0:8080
                    org.mortbay.log:started Server@5a936b
                    org.mortbay.log:started /system/console/*
                    org.mortbay.log:started /system/console/res

----

After running mvn pax:provision, you have an instance of Felix that is running the Apache Felix Web Management Console application. Fire up a web brower, and go to <ulink url="http://localhost:8080/system/console">http://localhost:8080/system/console</ulink> to load the interface. The default administrative username and password is <varname>admin</varname>/<varname>admin</varname>.


[[fig-osgi-felix-web-management]]
.Apache Felix Web Management Console</title>
image::figs/web/osgi_felix-admin-console.png[]

NOTE: Instead of executing these goals manually, you can also download and install the Pax-Construct scripts which can be used to automate the process of importing bundles with the Pax plugin. For more information, see the <ulink url="http://www.ops4j.org/projects/pax/construct/">Pax Construct Quickstart page</ulink>. </note> </section>

==== Detail

Once you start the web management console for Apache Felix, you can start to manage the installed bundles. You can start and stop bundles via the interface, and you can install bundles from remote repositories. If you prefer to use the shell interface from the previous recipe, click on the Shell interface and you can enter in any of the commands you used at the command-line Felix management console as shown in <xref linkend="fig-osgi-felix-admin-console-shell" />.

[[fig-osgi-felix-admin-console-shell]]
.Running the Apache Felix Shell via the Administrative Web Console
image::figs/web/osgi_felix-admin-console-shell.png[]

You can manage Felix interactions with events and repositories, and you can also restart, stop, and change the default run levels. Clicking on the "System Information" tab will also allow you to get some statistics about the runtime container as shown in <xref linkend="fig-osgi-felix-admin-console-system" />.

[[fig-osgi-felix-admin-console-system]]
.Managing the Apache Felix via System Information
image::figs/web/osgi_felix-admin-console-system.png[]

When we imported these bundles into the project, they were added to the <filename>provision/pom.xml</filename> file, and we had to install all of a bundle's dependencies one by one. Instead of listing out each of bundle's dependencies on the command-line, we can tell the Pax plugin to import transitive bundle dependencies and optional bundles. The following command line will instruct the Pax plugin to install a bundle's full compile and runtime dependencies in <filename>provision/pom.xml</filename>.

----
mvn pax:import-bundle \
                        -DgroupId=org.apache.felix \
                        -DartifactId=org.apache.felix.http.jetty \
                        -Dversion=1.0.1 \
                        -DimportTransitive=true \
                        -DimportOptional=true \
                        -DwidenScope=true</command>
----

The <varname>importTransitive</varname> and <varname>importOptional</varname> options tell the Pax plugin to look at the OBR metadata to find bundle dependencies. The <varname>widenScope</varname> parameter tells the Pax plugin to install all compile and runtime dependencies as bundles in <filename>provision/pom.xml</filename>. </section>

==== Resources

For more information about the Apache Felix Web Console, see <ulink url="http://cwiki.apache.org/confluence/display/FELIX/Apache+Felix+Web+Console">http://cwiki.apache.org/confluence/display/FELIX/Apache+Felix+Web+Console</ulink>. </section> </section>

=== Creating an OSGi Bundle with Maven

==== Task

You need to create you own OSGi bundle project to integrate with the runtime environment created in the previous recipes. </section>

==== Action

Run the <varname>pax:create-bundle</varname> goal. The following screen listing runs the <varname>pax:create-bundle</varname> to create a new Maven project for an OSGi bundle with a package org.sonatype.mcookbook and a name <varname>osgi-bundle</varname>. Run this command from the <filename>${root.example.dir}/osgi/osgi-project</filename> directory:

----
mvn pax:create-bundle \
                        -Dpackage=org.sonatype.mcookbook \
                        -Dname=osgi-bundle \
                        -Dversion=1.0-SNAPSHOT</command>

----

Once this command has been completed, run <command>mvn install pax:provision</command> and then verify that the component is present by running <command>ps</command> at the Felix administrative console:

----                    ...
[INFO] Reactor build order: 
[INFO]   org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]   osgi-project - plugin configuration
[INFO]   osgi-project - wrapper instructions
[INFO]   osgi-project - bundle instructions
[INFO]   osgi-project - imported bundles
[INFO]   org.sonatype.mcookbook
                    ..
[INFO] ------------------------------------------------------------------------
[INFO] Building org.sonatype.mcookbook
[INFO]    task-segment: [install]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources]
                    [WARNING] Using platform encoding (MacRoman actually) to copy filtered resources, i.e. build is platform \
                    dependent!
[INFO] Copying 1 resource
[INFO] Copying 0 resource
[INFO] [pax:compile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [pax:testCompile]
[INFO] No sources to compile
                    ...
[INFO] [install:install]
[INFO] Installing ${root.example.dir}/osgi/osgi-project/org.sonatype.mcookbook/target/\
                    org.sonatype.mcookbook-1.0-SNAPSHOT.jar to \
                    ${local.repo.dir}/.m2/repository/org/sonatype/mcookbook/osgi-project/org.sonatype.mcookbook/\
                    1.0-SNAPSHOT/org.sonatype.mcookbook-1.0-SNAPSHOT.jar
[INFO] [bundle:install]
[INFO] Parsing file:${local.repo.dir}/.m2/repository/repository.xml
[INFO] Installing org/sonatype/mcookbook/osgi-project/org.sonatype.mcookbook/1.0-SNAPSHOT/\
                    org.sonatype.mcookbook-1.0-SNAPSHOT.jar
[INFO] Writing OBR metadata
[INFO] ------------------------------------------------------------------------
[INFO] Building org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]    task-segment: [pax:provision] (aggregator-style)
[INFO] ------------------------------------------------------------------------
----

The Pax plugin bundles the new OSGi bundle into a JAR file which is deployed to the local Maven repository in ~/.m2/repository. The resulting artifact has the following identifiers: 

* <emphasis>groupId:</emphasis> <varname>org.sonatype.mcookbook.osgi-project</varname> </listitem>

* <listitem> <emphasis>artifactId:</emphasis> <varname>org.sonatype.mcookbook</varname> </listitem>

* <listitem> <emphasis>version:</emphasis> <varname>1.0-SNAPSHOT</varname> </listitem> </itemizedlist>

Continuing on with this particular execution of Maven, lines corresponding to this new custom OSGi bundle have been highlighted. The <varname>mvn:org.sonatype.mcookbook.osgi-project/org.sonatype.mcookbook/1.0-SNAPSHOT</varname> is provisioned to Apache Felix and after running the <command>ps</command> command we see that the <varname>org.sonatype.mcookbook</varname> bundle is deployed with ID 5.

----
[INFO] [pax:provision]
[INFO] Installing ${root.example.dir}/osgi/osgi-project/runner/target/pom-transformed.xml to \
                    ${local.repo.dir}/.m2/repository/org/sonatype/mcookbook/osgi-project/build/deployment/1.0-SNAPSHOT/\
                    deployment-1.0-SNAPSHOT.pom

                    Pax Runner (1.0.0) from OPS4J - http://www.ops4j.org
                    ----------------------------------------------------

                    -&gt; Using config [classpath:META-INF/runner.properties]
                    -&gt; Using only arguments from command line
                    -&gt; Scan bundles from [${root.example.dir}/osgi/osgi-project/runner/deploy-pom.xml]
                    -&gt; Scan bundles from [scan-pom:file:${root.example.dir}/osgi/osgi-project/runner/deploy-pom.xml]
                    -&gt; Provision bundle [mvn:org.apache.felix/org.apache.felix.webconsole/1.2.8, at default start level, \
                    bundle will be started, bundle will be loaded from the cache]
                    -&gt; Provision bundle [mvn:org.apache.felix/javax.servlet/1.0.0, at default start level, bundle will be \
                    started, bundle will be loaded from the cache]
                    -&gt; Provision bundle [mvn:org.apache.felix/org.apache.felix.scr/1.0.8, at default start level, bundle will be \
                    started, bundle will be loaded from the cache]
                    -&gt; Provision bundle [mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1, at default start level, bundle \
                    will be started, bundle will be loaded from the cache]
                    <emphasis> -&gt; Provision bundle [mvn:org.sonatype.mcookbook.osgi-project/org.sonatype.mcookbook/1.0-SNAPSHOT, at default \
                        start level, bundle will be started, bundle will be loaded from the cache]
                    </emphasis> -&gt; Preparing framework [Felix 1.8.0]
                    ...
                    -&gt; Runner has successfully finished his job!


                    Welcome to Felix.
                    =================

                    -&gt; org.mortbay.log:Logging to org.mortbay.log via org.apache.felix.http.jetty.LogServiceLog
                    STARTING org.sonatype.mcookbook
                    REGISTER org.sonatype.mcookbook.ExampleService
                    org.mortbay.log:Init SecureRandom.
                    ...
                    org.mortbay.log:started /system/console/res

                    -&gt; <command>ps</command>
                    START LEVEL 6
                    ID   State         Level  Name
                    [   0] [Active     ] [    0] System Bundle (1.8.0)
                    [   1] [Active     ] [    5] Apache Felix Web Management Console (1.2.8)
                    [   2] [Active     ] [    5] Servlet 2.1 API (1.0.0)
                    [   3] [Active     ] [    5] Apache Felix Declarative Services (1.0.8)
                    [   4] [Active     ] [    5] HTTP Service (1.0.1)
                    <emphasis>[   5] [Active     ] [    5] org.sonatype.mcookbook (1.0.0.SNAPSHOT)</emphasis>
                    [   6] [Active     ] [    1] osgi.compendium (4.1.0.build-200702212030)
                    [   7] [Active     ] [    1] Apache Felix Shell Service (1.2.0)
                    [   8] [Active     ] [    1] Apache Felix Shell TUI (1.2.0)
----

NOTE: Instead of executing these goals manually, you can also download and install the Pax-Construct scripts. For more information, see the <ulink url="http://www.ops4j.org/projects/pax/construct/">Pax Construct Quickstart page</ulink>. </note> </section>

==== Detail

So you just deployed your own OSGi bundle to a OSGi runtime environment, but where is the code? And, what is in this OSGi bundle anyway? Open up your osgi-project directory and you'll see a directory named org.sonatype.mcookbook/ with a directory structure similar to that shown in <xref linkend="fig-osgi-custom-bundle" />.

[[fig-osgi-custom-bundle]]
.Custom Bundle org.sonatype.mcookbook</title>
image::figs/web/osgi_osgi-custom-bundle-fs.png[]

This sample project defines a single interface named <classname>ExampleService</classname> which offers a single method <methodname>scramble()</methodname>.

.ExampleService Interface</title>
----
package org.sonatype.mcookbook;

                        /**
                        * Public API representing an example OSGi service
                        */
                        public interface ExampleService
                        {
                        // public methods go here...

                        String scramble( String text );
                        }
----

This <classname>ExampleService</classname> interface is implemented by the class <classname>ExampleServiceImpl</classname> shown in the following program listing.

.ExampleServiceImpl Implementation of the ExampleService Interface</title>
----
package org.sonatype.mcookbook.internal;

                        import java.util.ArrayList;
                        import java.util.Collections;
                        import java.util.List;

                        import org.sonatype.mcookbook.ExampleService;

                        /**
                        * Internal implementation of our example OSGi service
                        */
                        public final class ExampleServiceImpl
                        implements ExampleService
                        {
                        // implementation methods go here...

                        public String scramble( String text )
                        {
                        List charList = new ArrayList();

                        char[] textChars = text.toCharArray();
                        for( int i = 0; i &lt; textChars.length; i++ )
                        {
                        charList.add( new Character( textChars[i] ) );
                        }

                        Collections.shuffle( charList );

                        char[] mixedChars = new char[text.length()];
                        for( int i = 0; i &lt; mixedChars.length; i++ )
                        {
                        mixedChars[i] = ( (Character) charList.get( i ) ).charValue();
                        }

                        return new String( mixedChars );
                        }
                        }
----

Notice how neither <classname>ExampleService</classname> nor <classname>ExampleServiceImpl</classname> have any knowledge of the OSGi environment. For the <classname>ExampleService</classname> to be made available to the OSGi environment, there needs to be a <classname>BundleActivator</classname> which can instantiate the service and interact with the OSGi environment. This is included in the project in the form of an <classname>ExampleActivator</classname> which has a method named <methodname>start()</methodname> which takes a <classname>BundleContext</classname> instance and which calls <methodname>registerService()</methodname> on this context with an instance of <classname>ExampleServiceImpl</classname>.

.The BundleActivator implementation: ExampleActivator</title>
----
package org.sonatype.mcookbook.internal;

                        import java.util.Dictionary;
                        import java.util.Properties;

                        import org.osgi.framework.BundleActivator;
                        import org.osgi.framework.BundleContext;

                        import org.sonatype.mcookbook.ExampleService;

                        /**
                        * Extension of the default OSGi bundle activator
                        */
                        public final class ExampleActivator
                        implements BundleActivator
                        {
                        /**
                        * Called whenever the OSGi framework starts our bundle
                        */
                        public void start( BundleContext bc )
                        throws Exception
                        {
                        System.out.println( "STARTING org.sonatype.mcookbook" );

                        Dictionary props = new Properties();
                        // add specific service properties here...

                        System.out.println( "REGISTER org.sonatype.mcookbook.ExampleService" );

                        // Register our example service implementation in the OSGi service registry
                        bc.registerService( ExampleService.class.getName(), new ExampleServiceImpl(), props );
                        }

                        /**
                        * Called whenever the OSGi framework stops our bundle
                        */
                        public void stop( BundleContext bc )
                        throws Exception
                        {
                        System.out.println( "STOPPING org.sonatype.mcookbook" );

                        // no need to unregister our service - the OSGi framework handles it for us
                        }
                        }
----

Lastly, the <filename>osgi.bnd</filename> file in <filename>${root.example.dir}/osgi/osgi-project/org.sonatype.mcookbook</filename> supplies the bundle configuration which identifies the <classname>ExampleActivator</classname> class as the appropriate <varname>Bundle-Activator</varname>.

.osgi.bnd Bundle Configuration</title>
----
#-----------------------------------------------------------------
                        # Use this file to add customized Bnd instructions for the bundle
                        #-----------------------------------------------------------------

                        Bundle-Activator: \${bundle.namespace}.internal.ExampleActivator
----

=== Starting an Alternative OSGi Framework (Knopflerfish)

==== Task

You want to run your OSGi bundles in the Knopflerfish OSGi runtime environment. </section>

==== Action

Pass in the framework configuration parameter when running the <varname>pax:provision</varname> goal. To start Knopflerfish, run <command>mvn pax:provision -Dframework=kf</command>.

----
[INFO] Scanning for projects...
                    ...
[INFO] [pax:provision]
[INFO] Installing ${root.example.dir}/osgi/osgi-project/runner/target/pom-transformed.xml to \
                    /Users/Tim/.m2/repository/org/sonatype/mcookbook/osgi-project/build/deployment/1.0-SNAPSHOT/\
                    deployment-1.0-SNAPSHOT.pom
[INFO] artifact org.ops4j.pax.runner:pax-runner: checking for updates from central
                    Downloading: http://repo1.maven.org/maven2/org/ops4j/pax/runner/pax-runner/1.1.1/pax-runner-1.1.1.jar
                    1067K downloaded  (pax-runner-1.1.1.jar)
                    ______  ________  __  __
                    / __  / /  __   / / / / /
                    /  ___/ /  __   / _\ \ _/
                    /  /    /  / /  / / _\ \
                    /__/    /__/ /__/ /_/ /_/

                    Pax Runner (1.1.1) from OPS4J - http://www.ops4j.org
                    ----------------------------------------------------

                    -&gt; Using config [classpath:META-INF/runner.properties]
                    -&gt; Using only arguments from command line
                    -&gt; Scan bundles from [${root.example.dir}/osgi/osgi-project/runner/deploy-pom.xml]
                    -&gt; Scan bundles from [scan-pom:file:${root.example.dir}/osgi/osgi-project/runner/deploy-pom.xml]
                    ...
                    -&gt; Preparing framework [Knopflerfish 2.3.1]
                    -&gt; Downloading bundles...
                    -&gt; Knopflerfish 2.3.1 : 366660 bytes @ [ 160kBps ]
                    -&gt; org.osgi.compendium : 689150 bytes @ [ 256kBps ]
                    -&gt; Knopflerfish Console : 36329 bytes @ [ 55kBps ]
                    -&gt; Knopflerfish Console TTY : 6153 bytes @ [ 1538kBps ]
                    -&gt; Knopflerfish Framework Commands : 26090 bytes @ [ 158kBps ]
                    -&gt; Using execution environment [J2SE-1.5]
                    -&gt; Runner has successfully finished his job!

                    Knopflerfish OSGi framework, version 4.1.3
                    Copyright 2003-2009 Knopflerfish. All Rights Reserved.

                    See http://www.knopflerfish.org for more information.
                    Loading xargs url file:knopflerfish/config.ini
                    Installed and started: file:bundles/osgi.compendium_4.0.1.jar (id#1)
                    Installed and started: file:bundles/org.knopflerfish.bundle.console_2.0.1.jar (id#2)
                    Installed and started: file:bundles/org.knopflerfish.bundle.consoletty-IMPL_2.0.0.jar (id#3)
                    Installed and started: file:bundles/org.knopflerfish.bundle.frameworkcommands-IMPL_2.0.5.jar (id#4)
                    Installed and started: file:bundles/org.apache.felix.webconsole_1.2.8.jar (id#5)
                    Installed and started: file:bundles/org.apache.felix.javax.servlet_1.0.0.jar (id#6)
                    Installed and started: file:bundles/org.apache.felix.scr_1.0.8.jar (id#7)
                    Installed and started: file:bundles/org.apache.felix.http.jetty_1.0.1.jar (id#8)
                    Installed and started: file:bundles/org.sonatype.mcookbook_1.0.0.SNAPSHOT.jar (id#9)
                    &gt; STARTING org.sonatype.mcookbook
                    REGISTER org.sonatype.mcookbook.ExampleService
                    org.mortbay.log:Logging to org.mortbay.log via org.apache.felix.http.jetty.LogServiceLog
                    Framework launched
                    org.mortbay.log:Init SecureRandom.
                    org.mortbay.log:started org.mortbay.jetty.servlet.HashSessionIdManager@b890dc
                    org.mortbay.log:started org.mortbay.jetty.servlet.HashSessionManager@6321e6
                    org.mortbay.log:starting OsgiServletHandler@4683c0
                    org.mortbay.log:started OsgiServletHandler@4683c0
                    org.mortbay.log:starting SessionHandler@73bc22
                    org.mortbay.log:started SessionHandler@73bc22
                    org.mortbay.log:starting org.mortbay.jetty.servlet.Context@a0d346{/,null}
                    org.mortbay.log:starting ErrorHandler@449afc
                    org.mortbay.log:started ErrorHandler@449afc
                    org.mortbay.log:started org.mortbay.jetty.servlet.Context@a0d346{/,null}
                    org.mortbay.log:jetty-6.1.x
                    org.mortbay.log:started Realm[OSGi HTTP Service Realm]==[]
                    org.mortbay.log:started org.mortbay.thread.QueuedThreadPool@39491b
                    org.mortbay.log:starting Server@eea7f0
                    org.mortbay.log:started org.mortbay.jetty.nio.SelectChannelConnector$1@31db04
                    org.mortbay.log:Started SelectChannelConnector@0.0.0.0:8080
                    org.mortbay.log:started SelectChannelConnector@0.0.0.0:8080
                    org.mortbay.log:started Server@eea7f0
                    org.mortbay.log:started /system/console/*
                    org.mortbay.log:started /system/console/res
----

The output of this last command is going to be somewhat confusing. Even though we're starting the application using Knopflerfish, we're still deploying some OSGi components from Apache Felix, and we're deploying the Apache Felix Web Management Console. The interesting thing about OSGi: it all still works. The Apache Felix Web Management Console can be used to manage standard OSGi component even when it is running in the Knopflerfish container. To test this, go to http://localhost:8080/system/console, and log in with the default admin/admin credentials. Click on the configuration status tab, and then scroll down to see properties that prove that your Apache Felix web management console is running atop Knopflerfish. </section>

==== Detail

For more information about Knopflerfish, see <ulink url="http://www.knopflerfish.org">http://www.knopflerfish.org</ulink>. For more information about the frameworks available to the Pax plugin, see <ulink url="http://paxrunner.ops4j.org/space/Pax+Runner">http://paxrunner.ops4j.org/space/Pax+Runner</ulink>. </section> </section>

=== Starting an Alternative OSGi Framework (Equinox)

==== Task

You want to run your OSGi bundles in Eclipse's Equinox OSGi runtime environment. </section>

==== Action

Pass in the framework configuration parameter when running the <varname>pax:provision</varname> goal. To start Knopflerfish, run <command>mvn pax:provision -Dframework=equinox</command>.

----
[INFO] Scanning for projects...
[INFO] Reactor build order: 
[INFO]   org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]   osgi-project - plugin configuration
[INFO]   osgi-project - wrapper instructions
[INFO]   osgi-project - bundle instructions
[INFO]   osgi-project - imported bundles
[INFO]   org.sonatype.mcookbook
[INFO] ------------------------------------------------------------------------
[INFO] Building org.sonatype.mcookbook.osgi-project (OSGi project)
[INFO]    task-segment: [pax:provision] (aggregator-style)
[INFO] ------------------------------------------------------------------------
[INFO] [pax:provision]
[INFO] Installing /Users/Tim/Library/Code/sonatype/maven-cookbook/mcookbook-examples/osgi/osgi-project/\
                    runner/target/pom-transformed.xml to \
                    /Users/Tim/.m2/repository/org/sonatype/mcookbook/osgi-project/build/deployment/1.0-SNAPSHOT/\
                    deployment-1.0-SNAPSHOT.pom
                    ______  ________  __  __
                    / __  / /  __   / / / / /
                    /  ___/ /  __   / _\ \ _/
                    /  /    /  / /  / / _\ \
                    /__/    /__/ /__/ /_/ /_/

                    Pax Runner (1.1.1) from OPS4J - http://www.ops4j.org
                    ----------------------------------------------------

                    -&gt; Using config [classpath:META-INF/runner.properties]
                    -&gt; Using only arguments from command line
                    -&gt; Scan bundles from [/Users/Tim/Library/Code/sonatype/maven-cookbook/mcookbook-examples/osgi/osgi-project/\
                    runner/deploy-pom.xml]
                    -&gt; Scan bundles from [scan-pom:file:/Users/Tim/Library/Code/sonatype/maven-cookbook/mcookbook-examples/osgi/\
                    osgi-project/runner/deploy-pom.xml]
                    -&gt; Provision bundle [mvn:org.apache.felix/org.apache.felix.webconsole/1.2.8, at default start level, bundle \
                    will be started, bundle will be loaded from the cache]
                    -&gt; Provision bundle [mvn:org.apache.felix/javax.servlet/1.0.0, at default start level, bundle will be \
                    started, bundle will be loaded from the cache]
                    -&gt; Provision bundle [mvn:org.apache.felix/org.apache.felix.scr/1.0.8, at default start level, bundle will be \
                    started, bundle will be loaded from the cache]
                    -&gt; Provision bundle [mvn:org.apache.felix/org.apache.felix.http.jetty/1.0.1, at default start level, bundle \
                    will be started, bundle will be loaded from the cache]
                    -&gt; Provision bundle [mvn:org.sonatype.mcookbook.osgi-project/org.sonatype.mcookbook/1.0-SNAPSHOT, at default \
                    start level, bundle will be started, bundle will be loaded from the cache]
                    -&gt; Preparing framework [Equinox 3.5.0]
                    -&gt; Downloading bundles...
                    -&gt; Equinox 3.5.0 : 1122602 bytes @ [ 300kBps ]
                    -&gt; Eclipse utilities : 22471 bytes @ [ 64kBps ]
                    -&gt; Eclipse compendium services : 66065 bytes @ [ 113kBps ]
                    -&gt; Using execution environment [J2SE-1.5]
                    -&gt; Runner has successfully finished his job!


                    osgi&gt; STARTING org.sonatype.mcookbook
                    REGISTER org.sonatype.mcookbook.ExampleService
                    org.mortbay.log:Logging to org.mortbay.log via org.apache.felix.http.jetty.LogServiceLog
                    org.mortbay.log:Init SecureRandom.
                    org.mortbay.log:started org.mortbay.jetty.servlet.HashSessionIdManager@9ed5d6
                    org.mortbay.log:started org.mortbay.jetty.servlet.HashSessionManager@fd245f
                    org.mortbay.log:starting OsgiServletHandler@5f00f9
                    org.mortbay.log:started OsgiServletHandler@5f00f9
                    org.mortbay.log:starting SessionHandler@38ef1d
                    org.mortbay.log:started SessionHandler@38ef1d
                    org.mortbay.log:starting org.mortbay.jetty.servlet.Context@cc3baa{/,null}
                    org.mortbay.log:starting ErrorHandler@da6d09
                    org.mortbay.log:started ErrorHandler@da6d09
                    org.mortbay.log:started org.mortbay.jetty.servlet.Context@cc3baa{/,null}
                    org.mortbay.log:jetty-6.1.x
                    org.mortbay.log:started Realm[OSGi HTTP Service Realm]==[]
                    org.mortbay.log:started org.mortbay.thread.QueuedThreadPool@f2e41d
                    org.mortbay.log:starting Server@5e4dbe
                    org.mortbay.log:started org.mortbay.jetty.nio.SelectChannelConnector$1@9a44d6
                    org.mortbay.log:Started SelectChannelConnector@0.0.0.0:8080
                    org.mortbay.log:started SelectChannelConnector@0.0.0.0:8080
                    org.mortbay.log:started Server@5e4dbe
                    org.mortbay.log:started /system/console/*
                    org.mortbay.log:started /system/console/res
----

Again, the output of this last command is going to be somewhat confusing. Even though we're starting the application using Equinox, we're still deploying some OSGi components from Apache Felix, and we're deploying the Apache Felix Web Management Console. While the Felix Web Management Console can also run in the Equinox OSGi runtime environment, take note that there are some missing classes toward the end of the previous console output. This is likely due to the fact that there is a missing bundle or some Felix-specific functionality that is present in the Felix management console. To test the console, go to <ulink url="http://localhost:8080/system/console">http://localhost:8080/system/console</ulink>, and log in with the default <varname>admin</varname>/<varname>admin</varname> credentials. </section>

==== Detail

For more information about Equinox, see <ulink url="http://www.eclipse.org/equinox/">http://www.eclipse.org/equinox/</ulink>. For more information about the frameworks available to the Pax plugin, see <ulink url="http://paxrunner.ops4j.org/space/Pax+Runner">http://paxrunner.ops4j.org/space/Pax+Runner</ulink>. </section> </section>

=== Deploying OSGi Bundles to a Maven Repository

==== Task

You need to configure your project to deploy your own custom OSGi bundles to a Maven repository. </section>

==== Action

The solution is to download an install Nexus Professional, and configure your Maven environment to deploy snapshot and release artifacts to a Hosted Maven repository. To install Nexus Professional, complete the following steps:

. Download Nexus Professional from <ulink url="http://www.sonatype.com/products/downloads">http://www.sonatype.com/products/downloads</ulink>. </listitem>

. <listitem> Unpack the Nexus Professional archive on your local workstation, or on the machine that will host Nexus Professional for your workgroup or organization. </listitem>

. <listitem> Start Nexus Professional by running the startup script in <command>\${nexus_install_dir}/bin/jsw/&lt;platform&gt;/nexus start</command> where &lt;platform&gt; is replaced with the appropriate platform-specific directory. </listitem> </orderedlist>

The following commands will install and start Nexus Professional 1.3.5:

----
                    ~/programs $ <command>tar xvzf nexus-professional-webapp-1.3.5-bundle.tar.gz</command>
                    ~/programs $ <command>cd nexus-professional-webapp-1.3.5</command>
                    ~/programs/nexus-professional-webapp-1.3.5 $ <command>./bin/jsw/macosx-universal-32/nexus start</command>
                    Starting Sonatype Nexus Repository Manager...
                    Started Sonatype Nexus Repository Manager.
----

Create a <filename>~/.m2/settings.xml</filename> and copy the XML from <xref linkend="ex-osgi-nexus-settings" /> into this new Maven Settings XML file.

[[ex-osgi-nexus-settings]]
.settings.xml to configure deployment credentials and mirrors for Nexus</title>
----
&lt;settings&gt;
                        &lt;mirrors&gt;
                        &lt;mirror&gt;
                        &lt;!--This sends everything else to /public --&gt;
                        &lt;id&gt;nexus&lt;/id&gt;
                        &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;
                        &lt;url&gt;http://localhost:8081/nexus/content/groups/public&lt;/url&gt;
                        &lt;/mirror&gt;
                        &lt;/mirrors&gt;
                        &lt;profiles&gt;
                        &lt;profile&gt;
                        &lt;id&gt;nexus&lt;/id&gt;
                        &lt;!--Enable snapshots for the built in central repo to direct --&gt;
                        &lt;!--all requests to nexus via the mirror --&gt;
                        &lt;repositories&gt;
                        &lt;repository&gt;
                        &lt;id&gt;central&lt;/id&gt;
                        &lt;url&gt;http://central&lt;/url&gt;
                        &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
                        &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
                        &lt;/repository&gt;
                        &lt;/repositories&gt;
                        &lt;pluginRepositories&gt;
                        &lt;pluginRepository&gt;
                        &lt;id&gt;central&lt;/id&gt;
                        &lt;url&gt;http://central&lt;/url&gt;
                        &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
                        &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
                        &lt;/pluginRepository&gt;
                        &lt;/pluginRepositories&gt;
                        &lt;/profile&gt;
                        &lt;/profiles&gt;
                        &lt;servers&gt;
                        &lt;server&gt;
                        &lt;id&gt;nx-snapshots&lt;/id&gt;
                        &lt;username&gt;deployment&lt;/username&gt;
                        &lt;password&gt;deployment123&lt;/password&gt;
                        &lt;/server&gt;
                        &lt;server&gt;
                        &lt;id&gt;nx-releases&lt;/id&gt;
                        &lt;username&gt;deployment&lt;/username&gt;
                        &lt;password&gt;deployment123&lt;/password&gt;
                        &lt;/server&gt;
                        &lt;/servers&gt;
                        &lt;activeProfiles&gt;
                        &lt;!--make the profile active all the time --&gt;
                        &lt;activeProfile&gt;nexus&lt;/activeProfile&gt;
                        &lt;/activeProfiles&gt;
                        &lt;/settings&gt;
----

Now, go into the <varname>osgi-project</varname> example project from the previous labs and add the XML from <xref linkend="ex-osgi-dist-management" /> into the top-level parent in <filename>${root.example.dir}/osgi/osgi-project/pom.xml</filename>. You can add the <varname>distributionManagement</varname> element as a child of the <varname>project</varname> element after all of the existing children.

[[ex-osgi-dist-management]]
.Distribution Management Settings for the osgi-project Project</title>
----
&lt;project&gt;
                        ...
                        &lt;distributionManagement&gt;
                        &lt;repository&gt;
                        &lt;id&gt;nx-releases&lt;/id&gt;
                        &lt;name&gt;Nexus Releases&lt;/name&gt;
                        &lt;url&gt;http://localhost:8081/nexus/content/repositories/releases&lt;/url&gt;
                        &lt;/repository&gt;
                        &lt;snapshotRepository&gt;
                        &lt;id&gt;nx-snapshots&lt;/id&gt;
                        &lt;name&gt;Nexus Snapshots&lt;/name&gt;
                        &lt;url&gt;http://localhost:8081/nexus/content/repositories/snapshots&lt;/url&gt;
                        &lt;/snapshotRepository&gt;
                        &lt;/distributionManagement&gt;
                        &lt;/project&gt;
----

Now, deploy the bundle from your osgi-project to the Nexus Snapshots repository by running mvn deploy -DremoteOBR.

----
[INFO] Scanning for projects...
                    ...
[INFO] [deploy:deploy]
[INFO] Retrieving previous build number from nx-snapshots
                    Uploading: http://localhost:8081/nexus/content/repositories/snapshots/org/sonatype/mcookbook/osgi-project/\
                    1.0-SNAPSHOT/osgi-project-1.0-20090715.030835-2.pom
                    2K uploaded  (osgi-project-1.0-20090715.030835-2.pom)
[INFO] Retrieving previous metadata from nx-snapshots
[INFO] Uploading repository metadata for: 'artifact org.sonatype.mcookbook:osgi-project'
[INFO] Retrieving previous metadata from nx-snapshots
[INFO] Uploading repository metadata for: 'snapshot org.sonatype.mcookbook:osgi-project:1.0-SNAPSHOT'
                    ...
[INFO] [deploy:deploy]
[INFO] Retrieving previous build number from nx-snapshots
                    Uploading: http://localhost:8081/nexus/content/repositories/snapshots/org/sonatype/mcookbook/osgi-project/\
                    build/shared-plugin-settings/1.0-SNAPSHOT/shared-plugin-settings-1.0-20090715.030835-2.pom
                    2K uploaded  (shared-plugin-settings-1.0-20090715.030835-2.pom)
[INFO] Retrieving previous metadata from nx-snapshots
[INFO] Uploading repository metadata for: 'artifact \
                    org.sonatype.mcookbook.osgi-project.build:shared-plugin-settings'
[INFO] Retrieving previous metadata from nx-snapshots
[INFO] Uploading repository metadata for: 'snapshot \
                    org.sonatype.mcookbook.osgi-project.build:shared-plugin-settings:1.0-SNAPSHOT'
                    ...
[INFO] [deploy:deploy]
[INFO] Retrieving previous build number from nx-snapshots
                    Uploading: http://localhost:8081/nexus/content/repositories/snapshots/org/sonatype/mcookbook/osgi-project/\
                    build/wrapper-bundle-settings/1.0-SNAPSHOT/wrapper-bundle-settings-1.0-20090715.030835-2.pom
                    1K uploaded  (wrapper-bundle-settings-1.0-20090715.030835-2.pom)
[INFO] Retrieving previous metadata from nx-snapshots
[INFO] Uploading repository metadata for: 'artifact \
                    org.sonatype.mcookbook.osgi-project.build:wrapper-bundle-settings'
[INFO] Retrieving previous metadata from nx-snapshots
[INFO] Uploading repository metadata for: 'snapshot \
                    org.sonatype.mcookbook.osgi-project.build:wrapper-bundle-settings:1.0-SNAPSHOT'
                    ...
[INFO] [deploy:deploy]
[INFO] Retrieving previous build number from nx-snapshots
                    ...
[INFO] [bundle:deploy]
[INFO] LOCK http://localhost:8081/nexus/content/repositories/snapshots/repository.xml
[INFO] Downloading repository.xml
[INFO] Parsing file:/var/folders/qR/qRpEDfQcFPmRZpsXgPHOok+++TM/-Tmp-/12476273209637081490707781551794.xml
[INFO] Deploying org/sonatype/mcookbook/osgi-project/org.sonatype.mcookbook/1.0-SNAPSHOT/\
                    org.sonatype.mcookbook-1.0-20090715.030835-2.jar
[INFO] Writing OBR metadata
[INFO] Uploading repository.xml
[INFO] UNLOCK http://localhost:8081/nexus/content/repositories/snapshots/repository.xml

----

To summarize, you downloaded and installed Nexus Professional, configured your Maven Settings to supply the default credentials for the deployment user, you added the snapshots and releases repositories to your project's pom.xml, and then you deployed your project's SNAPSHOT artifacts to he snapshot repository and updated an OBR-compatible repository.xml file also stored in the Nexus-hosted Maven repository.

WARNING: We skipped some extremely important setup tasks for Nexus Professional, namely changing all of the default passwords. This example uses the default username and password for the deployment user (deployment/deployment123). To change this password, log into the Nexus interface by going to http://localhost:8081/nexus, logging in with the default administrative credentials (admin/admin123), clicking on Users under Security in the left navigation menu, and then right-clicking on the deployment user in the list of users. Once you right-click on the deployment user, select "Set Password" and then supply a new password. Don't leave Nexus unprotected with the default username and password. </warning> </section>

==== Detail

To verify that your artifacts made it into the Snapshots repository on your local Nexus instance, go to the Nexus interface at http://localhost:8081/nexus and login as the administrative user. The default administrative credentials are the username "admin" and the password "admin123". Once you login as the admin user, click on Repositories in the left navigation menu, and then select the Snapshots repository. If you browse the contents of the repository you should see contents similar to the contents shown in <xref linkend="fig-osgi-deployed-snapshot" />.

[[fig-osgi-deployed-snapshot]]
.The Contents of the Snapshots Repository after Deployment</title>
image::figs/web/osgi_nexus-standard-repo.png[]

You can see from <xref linkend="fig-osgi-deployed-snapshot" /> that the repository contains the <varname>org.sonatype.mcookbook</varname> OSGi bundle under the <varname>org.sonatype.mcookbook.osgi-project</varname> groupId and that the Pax plugin took care of creating an OSGi bundle repository XML file at <filename>repository.xml</filename>.

If you want to test how easy it would be to install this component directly from Nexus:

. <orderedlist> <listitem> Download Apache Felix from <ulink url="http://www.apache.org/dist/felix/felix-1.8.0.tar.gz">http://www.apache.org/dist/felix/felix-1.8.0.tar.gz</ulink>. </listitem>

. <listitem> Unpack the Felix distribution on your local workstation. </listitem>

. <listitem> Change directory to the Felix directory. </listitem>

. <listitem> Start Apache Felix with <command>java -jar ./bin/felix.jar</command> </listitem>

. <listitem> Add the Snapshots repository as an OBR repository by copying the URL to the repository.xml and passing it to the obr command: <command>obr add-url http://localhost:8081/nexus/content/repositories/snapshots/repository.xml</command> </listitem>

. <listitem> List the contents of the OBR repository. </listitem>

. <listitem> Deploy the <varname>org.sonatype.mcookbook</varname> bundle. </listitem>

. <listitem> List the installed bundles. </listitem> </orderedlist>

These commands are captured in the following screen listing:

----
                    --2009-07-14 22:46:19--  http://www.apache.org/dist/felix/felix-1.8.0.tar.gz
                    Resolving www.apache.org... 140.211.11.130
                    Connecting to www.apache.org|140.211.11.130|:80... connected.
                    HTTP request sent, awaiting response... 200 OK
                    Length: 901620 (880K) [application/x-gzip]
                    Saving to: `felix-1.8.0.tar.gz'
                    2009-07-14 22:46:20 (924 KB/s) - `felix-1.8.0.tar.gz' saved [901620/901620]

                    ~/programs $ <command>tar xvzf felix-1.8.0.tar.gz</command> 
                    felix-1.8.0/
                    felix-1.8.0/bin/
                    felix-1.8.0/bin/felix.jar
                    ...
                    felix-1.8.0/NOTICE
                    ~/programs $ <command>cd felix-1.8.0</command>
                    ~/programs/felix-1.8.0 $ <command>java -jar ./bin/felix.jar</command> 

                    Welcome to Felix.
                    =================

                    -&gt; <command>obr add-url http://localhost:8081/nexus/content/repositories/snapshots/repository.xml</command>
                    -&gt; <command>obr list</command>
                    org.sonatype.mcookbook (1.0.0.SNAPSHOT)
                    -&gt; <command>obr deploy org.sonatype.mcookbook</command>
                    Target resource(s):
                    -------------------
                    org.sonatype.mcookbook (1.0.0.SNAPSHOT)

                    Deploying...done.
                    -&gt; <command>ps</command> 
                    START LEVEL 1
                    ID   State         Level  Name
                    [   0] [Active     ] [    0] System Bundle (1.8.0)
                    [   1] [Active     ] [    1] Apache Felix Shell Service (1.2.0)
                    [   2] [Active     ] [    1] Apache Felix Shell TUI (1.2.0)
                    [   3] [Active     ] [    1] Apache Felix Bundle Repository (1.4.0)
                    [   4] [Installed  ] [    1] org.sonatype.mcookbook (1.0.0.SNAPSHOT)
                    -&gt; <command>start 4</command>
                    STARTING org.sonatype.mcookbook
                    REGISTER org.sonatype.mcookbook.ExampleService
                    -&gt; 
----

In summary, you've deployed an OSGi bundle to a Maven repository using the Pax plugin from OPS4J and you've successfully deployed it to an independent instance of Apache Felix directly from your Nexus instance. This is a powerful demonstration because it provides a model for how deployment to production of staging can work once you've standardized on a Maven repository manager and OSGi as a deployment framework.

NOTE: You can also setup and install Nexus Open Source, and rely on the first-class support that the the Pax plugin provides for OSGi bundles stored in a standard Maven repository. In the context of OSGi development, the main difference between Nexus Professional and Nexus Open Source is that Nexus Professional provides direct support for OBR repositories, allowing you to proxy, host, and group OSGi bundle repositories and convert existing Maven repositories to OSGi bundle repositories. </note> </section> </section>

=== Transforming a Maven Repository into an OSGi Bundle Repository

In the previous recipe, you published an OSGi bundle to a Maven repository, and you relied on the Pax plugin to read and write the repository.xml file. While this approximates an OBR repository, you'd like Nexus to take care of generating the OBR metadata from the repository contents, and you don't want to rely on individual builds to lock, read, parse, alter, write, and unlock a shared OBR metadata file. Instead of relying on the Pax plugin, this recipe shows you how to configure an OBR repository in Nexus Professional.

==== Task

You need to expose OSGi bundles in a Maven repository using the OBR repository format. </section>

==== Action

Use Nexus Professional, and create a virtual OBR repository which will scan a Maven repository for OSGi bundle artifacts and generate the OBR XML metadata in response to a change in the Maven repository. Building upon the example from the previous recipe, create a Virtual OBR repository named Snapshots OBR which uses the Snapshots repository as a source. To do this:

. <orderedlist> <listitem> Load the Nexus interface in a web browser by opening the URL http://localhost:8081/nexus. </listitem>

. <listitem> Login as an administrative user using the default credentials of admin/admin123 (if you haven't already changed the default password). </listitem>

. <listitem> Click on Repositories in the left navigation menu. </listitem>

. <listitem> Click on the Add.. button above the list of Nexus repositories and groups. </listitem>

. <listitem> Select "Virtual Repository" from the resulting dropdown. </listitem>

. <listitem> In the New Virtual Repository window, supply the following values as shown in <xref linkend="fig-osgi-new-virtual-snapshots" />:

.. <orderedlist numeration="loweralpha"> <listitem> Repository ID: <command>snapshots-obr</command> </listitem>

.. <listitem> Repository Name: <command>Snapshots OBR</command> </listitem>

.. <listitem> Provider: <command>OBR</command> </listitem>

.. <listitem> Source Nexus Repository ID: <command>snapshots</command> </listitem>

.. <listitem> Synchronize on Startup: <command>False</command> </listitem> </orderedlist> </listitem>

. <listitem> Click the Save button to create the new Virtual repository. </listitem> </orderedlist>


[[fig-osgi-new-virtual-snapshots]]
.Creating a New Virtual OBR Repository</title>
image::figs/web/osgi_nexus-new-virtual-snapshots.png[]

==== Detail

To verify that our new Virtual OBR repository is generating the the appropriate XML based on the contents of the Maven repository, click on Repositories in the left navigation menu, and then select "Snapshots OBR" from the list of repositories. If you look at the Browse tab for this repository and drill into the <filename>.meta/</filename> directory, you can then right-click on the <filename>obr.xml</filename> file and select <guimenuitem>Download</guimenuitem> from the context menu. This should load the repository XML in a browser, and the contents of this XML file should resemble the XML file in <xref linkend="ex-osgi-obr-virtual-snapshots" />. The URL for this new repository XML should be <ulink url="http://localhost:8081/nexus/content/repositories/snapshots-obr/.meta/obr.xml">http://localhost:8081/nexus/content/repositories/snapshots-obr/.meta/obr.xml</ulink>.

[[ex-osgi-obr-virtual-snapshots]]
.Metadata for the Snapshots OBR Virtual Repository</title>
----
&lt;repository name='Snapshots OBR' lastmodified='1247630990695'&gt;
                        &lt;resource id='org.sonatype.mcookbook/1.0.0.SNAPSHOT' presentationname='org.sonatype.mcookbook' 
                        symbolicname='org.sonatype.mcookbook' 
                        uri='../org/sonatype/mcookbook/osgi-project/org.sonatype.mcookbook/1.0-SNAPSHOT/\
                        org.sonatype.mcookbook-1.0-20090715.030813-1.jar' version='1.0.0.SNAPSHOT'&gt;
                        &lt;description&gt;
                        Generated using Pax-Construct
                        &lt;/description&gt;
                        &lt;size&gt;
                        5345
                        &lt;/size&gt;
                        &lt;capability name='bundle'&gt;
                        &lt;p n='manifestversion' v='2'/&gt;

                        &lt;p n='presentationname' v='org.sonatype.mcookbook'/&gt;
                        &lt;p n='symbolicname' v='org.sonatype.mcookbook'/&gt;
                        &lt;p n='version' t='version' v='1.0.0.SNAPSHOT'/&gt;
                        &lt;/capability&gt;
                        &lt;capability name='package'&gt;
                        &lt;p n='package' v='org.sonatype.mcookbook'/&gt;
                        &lt;p n='version' t='version' v='1.0.0.SNAPSHOT'/&gt;
                        &lt;/capability&gt;
                        &lt;require extend='false' filter='(&amp;amp;(package=org.osgi.framework)(version&amp;gt;=0.0.0))' multiple='false' 
                        name='package' optional='false'&gt;

                        Import package org.osgi.framework
                        &lt;/require&gt;
                        &lt;require extend='false' filter='(&amp;amp;(package=org.sonatype.mcookbook)(version&amp;gt;=1.0.0.SNAPSHOT))' 
                        multiple='false' name='package' optional='false'&gt;
                        Import package org.sonatype.mcookbook ;version=1.0.0.SNAPSHOT
                        &lt;/require&gt;
                        &lt;/resource&gt;
                        &lt;resource id='org.sonatype.mcookbook/1.0.0.SNAPSHOT' presentationname='org.sonatype.mcookbook' 
                        symbolicname='org.sonatype.mcookbook' 
                        uri='../org/sonatype/mcookbook/osgi-project/org.sonatype.mcookbook/1.0-SNAPSHOT/\
                        org.sonatype.mcookbook-1.0-20090715.030835-2.jar' version='1.0.0.SNAPSHOT'&gt;
                        &lt;description&gt;
                        Generated using Pax-Construct
                        &lt;/description&gt;
                        &lt;size&gt;

                        5346
                        &lt;/size&gt;
                        &lt;capability name='bundle'&gt;
                        &lt;p n='manifestversion' v='2'/&gt;
                        &lt;p n='presentationname' v='org.sonatype.mcookbook'/&gt;
                        &lt;p n='symbolicname' v='org.sonatype.mcookbook'/&gt;
                        &lt;p n='version' t='version' v='1.0.0.SNAPSHOT'/&gt;
                        &lt;/capability&gt;
                        &lt;capability name='package'&gt;

                        &lt;p n='package' v='org.sonatype.mcookbook'/&gt;
                        &lt;p n='version' t='version' v='1.0.0.SNAPSHOT'/&gt;
                        &lt;/capability&gt;
                        &lt;require extend='false' filter='(&amp;amp;(package=org.osgi.framework)(version&amp;gt;=0.0.0))' multiple='false' 
                        name='package' optional='false'&gt;
                        Import package org.osgi.framework
                        &lt;/require&gt;
                        &lt;require extend='false' filter='(&amp;amp;(package=org.sonatype.mcookbook)(version&amp;gt;=1.0.0.SNAPSHOT))' 
                        multiple='false' name='package' optional='false'&gt;
                        Import package org.sonatype.mcookbook ;version=1.0.0.SNAPSHOT
                        &lt;/require&gt;
                        &lt;/resource&gt;

                        &lt;/repository&gt;
----

If you want to test how easy it would be to install this component directly from this new Nexus virtual OBR directory. If you've already installed Felix, from the previous recipe, delete the felix-1.8.0 directory and recreate the entire environment to take note of any changes in the behavior of Felix when using the new Snapshots OBR virtual repository:

. <orderedlist> <listitem> Download Apache Felix from <ulink url="http://www.apache.org/dist/felix/felix-1.8.0.tar.gz">http://www.apache.org/dist/felix/felix-1.8.0.tar.gz</ulink>. </listitem>

. <listitem> Unpack the Felix distribution on your local workstation. </listitem>

. <listitem> Change directory to the Felix directory. </listitem>

. <listitem> Start Apache Felix with <command>java -jar ./bin/felix.jar</command> </listitem>

. <listitem> Add the Snapshots repository as an OBR repository by copying the URL to the repository.xml and passing it to the obr command: <command>obr add-url http://localhost:8081/nexus/content/repositories/snapshots-obr/.meta/obr.xml</command> </listitem>

. <listitem> List the contents of the OBR repository. </listitem>

. <listitem> Deploy the <varname>org.sonatype.mcookbook</varname> bundle. </listitem>

. <listitem> List the installed bundles. </listitem> </orderedlist>

These commands are captured in the following screen listing:
----
                    --2009-07-14 22:46:19--  http://www.apache.org/dist/felix/felix-1.8.0.tar.gz
                    Resolving www.apache.org... 140.211.11.130
                    Connecting to www.apache.org|140.211.11.130|:80... connected.
                    HTTP request sent, awaiting response... 200 OK
                    Length: 901620 (880K) [application/x-gzip]
                    Saving to: `felix-1.8.0.tar.gz'
                    2009-07-14 22:46:20 (924 KB/s) - `felix-1.8.0.tar.gz' saved [901620/901620]

                    ~/programs $ <command>tar xvzf felix-1.8.0.tar.gz</command> 
                    felix-1.8.0/
                    felix-1.8.0/bin/
                    felix-1.8.0/bin/felix.jar
                    ...
                    felix-1.8.0/NOTICE
                    ~/programs $ <command>cd felix-1.8.0</command>
                    ~/programs/felix-1.8.0 $ <command>java -jar ./bin/felix.jar</command> 

                    Welcome to Felix.
                    =================

                    -&gt; <command>obr add-url http://localhost:8081/nexus/content/repositories/snapshots-obr/.meta/obr.xml</command>
                    -&gt; <command>obr list</command>
                    org.sonatype.mcookbook (1.0.0.SNAPSHOT, ...)
                    -&gt; <command>obr deploy org.sonatype.mcookbook</command>
                    Target resource(s):
                    -------------------
                    org.sonatype.mcookbook (1.0.0.SNAPSHOT)

                    Deploying...done.
                    -&gt; <command>ps</command> 
                    START LEVEL 1
                    ID   State         Level  Name
                    [   0] [Active     ] [    0] System Bundle (1.8.0)
                    [   1] [Active     ] [    1] Apache Felix Shell Service (1.2.0)
                    [   2] [Active     ] [    1] Apache Felix Shell TUI (1.2.0)
                    [   3] [Active     ] [    1] Apache Felix Bundle Repository (1.4.0)
                    [   4] [Installed  ] [    1] org.sonatype.mcookbook (1.0.0.SNAPSHOT)
                    -&gt; <command>start 4</command>
                    STARTING org.sonatype.mcookbook
                    REGISTER org.sonatype.mcookbook.ExampleService
                    -&gt; 
----

Aside from the output of the <command>obr list</command> command, this process was exactly the same as the previous recipe. The main difference between this recipe and the previous recipe is that we do not rely on the Pax Plugin to generate the repository XML file that makes the repository an OBR repository. Instead, we rely upon the OBR integration of Nexus Professional. Every time the underlying source repository (in this case the hosted snapshots repository) is changed, Nexus Professional will regenerate the OBR XML in this virtual OBR repository. Using this virtual repository, you can simply deploy your project's OSGi and non-OSGi artifacts to the same Maven repository and then you can expose OSGi bundles to systems such as Felix using Nexus Professional's support for virtual OBR repositories.

If you are using Nexus Professional's OBR support and exposing a Maven repository as an OBR repository using a virtual repository, there is no need for you to pass the <command>-DremoteOBR</command> option to mvn deploy as we did in the previous recipe. </section> </section>

=== Proxying OSGi Bundle Repositories

If you've followed the recipes in this chapter sequentially, you deployed an artifact to a Maven repository and you've seen two ways to get that repository to an OSGi container: via a standard Maven repository and via a virtual OBR repository that acts as a transformer between Maven and OSGi. This chapter has focused on hosted repositories so far, but one of the most common reasons for people to use repository managers is to proxy remote repositories. In this recipe, you will learn how to proxy a remote OSGi bundle repository using Nexus Professional's support for OBR.

==== Task

You would like to maintain a local cache of a remote OSGi Bundle repository that is populated with artifacts as they are requested. You need to do this for a few reasons, but mostly because you realized how inefficient it is for everyone in your organization to continuously query a remote server and download artifacts over the public internet. You are looking for more stability and control over what people are using from a remote OSGi bundle repository. </section>

==== Action

Use Nexus Professional to create a proxy repository for a remote OSGi bundle repository. To do this:

. <orderedlist> <listitem> Load the Nexus interface in a web browser by opening the URL http://localhost:8081/nexus. </listitem>

. <listitem> Login as an administrative user using the default credentials of admin/admin123 (if you haven't already changed the default password). </listitem>

. <listitem> Click on Repositories in the left navigation menu. </listitem>

. <listitem> Click on the Add.. button above the list of Nexus repositories and groups. </listitem>

. <listitem> Select "Proxy Repository" from the resulting dropdown. </listitem>

. <listitem> In the New Virtual Repository window, supply the following values as shown in <xref linkend="fig-osgi-new-proxy-felix" />:

.. <orderedlist numeration="loweralpha"> <listitem> Repository ID: <command>felix-obr</command> </listitem>

.. <listitem> Repository Name: <command>Felix OBR</command> </listitem>

.. <listitem> Provider: <command>OBR</command> </listitem>

.. <listitem> Remote Storage Location: <command>http://felix.apache.org/obr/releases.xml</command> </listitem> </orderedlist> </listitem>

. <listitem> Click the Save button to create the new Proxy repository. </listitem> </orderedlist>


[[fig-osgi-new-proxy-felix]]
.Creating a New Proxy Repository</title>
image::figs/web/osgi_nexus-new-proxy-felix.png[]

==== Detail

To verify that our new Proxy OBR repository is generating the the appropriate XML based on the remote OBR repository, click on Repositories in the left navigation menu, and then select "Felix OBR" from the list of repositories. If you look at the Browse tab for this repository and drill into the <filename>.meta/</filename> directory, you can then right-click on the <filename>obr.xml</filename> file and select <guimenuitem>Download</guimenuitem> from the context menu. The URL for this new repository XML should be <ulink url="http://localhost:8081/nexus/content/repositories/felix-obr/.meta/obr.xml">http://localhost:8081/nexus/content/repositories/felix-obr/.meta/obr.xml</ulink>. Be warned, this is going to be a very large XML file, and you might not be able to make sense of the document by reading the source directly. Instead of dealing with this unwieldy XML file, use Apache Felix to browse the contents.

If you want to see the contents of this new proxy repository for the Felix OBR repository, install Felix and add a reference to the Nexus proxy repository:

. <orderedlist> <listitem> Download Apache Felix from <ulink url="http://www.apache.org/dist/felix/felix-1.8.0.tar.gz">http://www.apache.org/dist/felix/felix-1.8.0.tar.gz</ulink>. </listitem>

. <listitem> Unpack the Felix distribution on your local workstation. </listitem>

. <listitem> Change directory to the Felix directory. </listitem>

. <listitem> Start Apache Felix with <command>java -jar ./bin/felix.jar</command> </listitem>

. <listitem> Add the Snapshots repository as an OBR repository by copying the URL to the repository.xml and passing it to the obr command: <command>obr add-url http://localhost:8081/nexus/content/repositories/felix-obr/.meta/obr.xml</command> </listitem>

. <listitem> List the contents of the OBR repository. </listitem>

. <listitem> Deploy the Servlet 2.1 bundle. </listitem>

. <listitem> Deploy the Apache Felix Web Management Console bundle. </listitem>

. <listitem> Start the installed bundles. </listitem> </orderedlist>

These commands are captured in the following screen listing:

----
                    --2009-07-14 22:46:19--  http://www.apache.org/dist/felix/felix-1.8.0.tar.gz
                    Resolving www.apache.org... 140.211.11.130
                    Connecting to www.apache.org|140.211.11.130|:80... connected.
                    HTTP request sent, awaiting response... 200 OK
                    Length: 901620 (880K) [application/x-gzip]
                    Saving to: `felix-1.8.0.tar.gz'
                    2009-07-14 22:46:20 (924 KB/s) - `felix-1.8.0.tar.gz' saved [901620/901620]

                    ~/programs $ <command>tar xvzf felix-1.8.0.tar.gz</command> 
                    felix-1.8.0/
                    felix-1.8.0/bin/
                    felix-1.8.0/bin/felix.jar
                    ...
                    felix-1.8.0/NOTICE
                    ~/programs $ <command>cd felix-1.8.0</command>
                    ~/programs/felix-1.8.0 $ <command>java -jar ./bin/felix.jar</command> 

                    Welcome to Felix.
                    =================

                    -&gt; <command>obr add-url http://localhost:8081/nexus/content/repositories/felix-obr/.meta/obr.xml</command>
                    -&gt; <command>obr list</command>
                    Apache Felix Bundle Repository (1.2.1, ...)
                    Apache Felix Configuration Admin Service (1.0.4, ...)
                    Apache Felix Declarative Services (1.0.8, ...)
                    Apache Felix EventAdmin (1.0.0)
                    Apache Felix File Install (1.2.0, ...)
                    Apache Felix HTTP Service Jetty (1.0.1, ...)
                    Apache Felix iPOJO (1.2.0, ...)
                    Apache Felix iPOJO (0.8.0)
                    Apache Felix iPOJO Arch Command (1.2.0, ...)
                    Apache Felix iPOJO Composite (1.2.0)
                    Apache Felix iPOJO Composite (1.0.0, ...)
                    Apache Felix iPOJO Event Admin Handler (1.2.0, ...)
                    Apache Felix iPOJO Extender Pattern Handler (1.2.0)
                    Apache Felix iPOJO Extender Pattern Handler (1.0.0, ...)
                    Apache Felix iPOJO JMX Handler (1.2.0, ...)
                    Apache Felix iPOJO Temporal Service Dependency Handler (1.2.0, ...)
                    Apache Felix iPOJO White Board Pattern Handler (1.2.0, ...)
                    Apache Felix Log Service (1.0.0)
                    Apache Felix Metatype Service (1.0.2, ...)
                    Apache Felix Prefrences Service (1.0.2)
                    Apache Felix Remote Shell (1.0.2)
                    Apache Felix Shell Service (1.0.2, ...)
                    Apache Felix Shell TUI (1.0.2, ...)
                    Apache Felix UPnP Base Driver (0.8.0)
                    Apache Felix UPnP Extra (0.4.0)
                    Apache Felix UPnP Tester (0.4.0)
                    Apache Felix Web Management Console (1.2.10, ...)
                    OSGi OBR Service API (1.0.0)
                    OSGi R4 Compendium Bundle (4.0.0)
                    Servlet 2.1 API (1.0.0)
                    -&gt; <command>obr deploy "Servlet 2.1 API"</command>
                    Target resource(s):
                    -------------------
                    Servlet 2.1 API (1.0.0)

                    Deploying...done.
                    -&gt; <command>obr deploy "Apache Felix Web Management Console"</command>
                    Target resource(s):
                    -------------------
                    Apache Felix Web Management Console (1.2.10)

                    Required resource(s):
                    ---------------------
                    Apache Felix Log Service (1.0.0)
                    Apache Felix Declarative Services (1.0.8)
                    Apache Felix HTTP Service Jetty (1.0.1)
                    OSGi R4 Compendium Bundle (4.0.0)

                    Deploying...done.
                    -&gt; <command>ps</command>
                    START LEVEL 1
                    ID   State         Level  Name
                    [   0] [Active     ] [    0] System Bundle (1.8.0)
                    [   1] [Active     ] [    1] Apache Felix Shell Service (1.2.0)
                    [   2] [Active     ] [    1] Apache Felix Shell TUI (1.2.0)
                    [   3] [Active     ] [    1] Apache Felix Bundle Repository (1.4.0)
                    [   4] [Installed  ] [    1] Servlet 2.1 API (1.0.0)
                    [   5] [Installed  ] [    1] Apache Felix Log Service (1.0.0)
                    [   6] [Installed  ] [    1] Apache Felix Declarative Services (1.0.8)
                    [   7] [Installed  ] [    1] HTTP Service (1.0.1)
                    [   8] [Installed  ] [    1] Apache Felix Web Management Console (1.2.10)
                    [   9] [Installed  ] [    1] OSGi R4 Compendium Bundle (4)
                    -&gt; <command>start 4 5 6 7 8 9</command>
                    -&gt; <command>ps</command>
                    START LEVEL 1
                    ID   State         Level  Name
                    [   0] [Active     ] [    0] System Bundle (1.8.0)
                    [   1] [Active     ] [    1] Apache Felix Shell Service (1.2.0)
                    [   2] [Active     ] [    1] Apache Felix Shell TUI (1.2.0)
                    [   3] [Active     ] [    1] Apache Felix Bundle Repository (1.4.0)
                    [   4] [Active     ] [    1] Servlet 2.1 API (1.0.0)
                    [   5] [Active     ] [    1] Apache Felix Log Service (1.0.0)
                    [   6] [Active     ] [    1] Apache Felix Declarative Services (1.0.8)
                    [   7] [Active     ] [    1] HTTP Service (1.0.1)
                    [   8] [Active     ] [    1] Apache Felix Web Management Console (1.2.10)
                    [   9] [Active     ] [    1] OSGi R4 Compendium Bundle (4)
                    -&gt; 
----

Now, if you load <ulink url="http://localhost:8080/system/console">http://localhost:8080/system/console</ulink> in a web browser and supply the default Felix administrative credentials (username "admin" and password "admin"), you will see the Apache Felix administrative web interface. Now that you've made use of the Nexus Proxy repository for the remote Felix OBR repository, the next time you browse the contents of the Felix OBR proxy repository, you are going to see that Nexus has cached all of the referenced bundles as shown in <xref linkend="fig-osgi-cached-bundles" />.


[[fig-osgi-cached-bundles]]
.Cached Bundles from a Remote OBR Repository</title>
image::figs/web/osgi_nexus-proxy-cache-felix.png[]

=== Grouping OSGi Bundle Repositories

So far in this chapter, you've deployed an artifact to a Maven repository and consumed it using a Virtual OBR repository as a bridge between Maven and OSGi. In the previous recipe, you proxied a remote OBR repository using a Nexus proxy repository. In this recipe, you are going to learn how to consolidate multiple OBR repositories into a single URL using a Nexus repository group.

==== Task

You need to consolidate a number of Nexus OBR repositories into a single OBR repository interface. You have a collection of Proxy, Virtual, and Hosted OBR repositories, and you want to connect your OSGi aware systems to a single OBR repository, reducing the number of moving parts involved in your current deployment procedures. </section>

==== Action

Create a OBR repository group in Nexus Professional which combines one or more OBR repositories into a single repository. To do this:

. <orderedlist> <listitem> Load the Nexus interface in a web browser by opening the URL http://localhost:8081/nexus. </listitem>

. <listitem> Login as an administrative user using the default credentials of admin/admin123 (if you haven't already changed the default password). </listitem>

. <listitem> Click on Repositories in the left navigation menu. </listitem>

. <listitem> Click on the Add.. button above the list of Nexus repositories and groups. </listitem>

. <listitem> Select "Repository Group" from the resulting dropdown. </listitem>

. <listitem> In the New Repository Group window, supply the following values as shown in <xref linkend="fig-osgi-new-repo-group" />:

.. <orderedlist numeration="loweralpha"> <listitem> Group ID: <command>obr-group</command> </listitem>

.. <listitem> Group Name: <command>OBR Group</command> </listitem>

.. <listitem> Provider: <command>OBR Group</command> </listitem> </orderedlist> </listitem>

. <listitem> Drag the two OBR repositories created in the previous recipes to the Ordered Group Repositories list. </listitem>

. <listitem> Click the Save button to create the new Repository Group. </listitem> </orderedlist>


[[fig-osgi-new-repo-group]]
.Creating a New OBR Group</title>
image::figs/web/osgi_nexus-new-group.png[]

==== Detail

To verify that the new OBR repository group is generating the the appropriate XML combining the Felix OBR reposiotry and the Snapshots OBR repository, click on Repositories in the left navigation menu, and then select "OBR Group" from the list of repositories. If you look at the Browse tab for this repository and drill into the <filename>.meta/</filename> directory, you can then right-click on the <filename>obr.xml</filename> file and select <guimenuitem>Download</guimenuitem> from the context menu. The URL for this group's repository XML should be <ulink url="http://localhost:8081/nexus/content/groups/obr-group/.meta/obr.xml">http://localhost:8081/nexus/content/groups/obr-group/.meta/obr.xml</ulink>. Again,bBe warned, this is going to be an even larger XML file than the repository XML for the Felix OBR proxy. Search for mcookbook and note that the repository also contains references to all of the artifacts from the remote Felix OBR repository. The Nexus Professional OBR repository group has effectively merged the contents of these two repositories into a single unified interface which will simplify your system's interaction to a single URL.

If you want to see the contents of this repository group, install Felix and add a reference to the Nexus repository group:

. <orderedlist> <listitem> Download Apache Felix from <ulink url="http://www.apache.org/dist/felix/felix-1.8.0.tar.gz">http://www.apache.org/dist/felix/felix-1.8.0.tar.gz</ulink>. </listitem>

. <listitem> Unpack the Felix distribution on your local workstation. </listitem>

. <listitem> Change directory to the Felix directory. </listitem>

. <listitem> Start Apache Felix with <command>java -jar ./bin/felix.jar</command> </listitem>

. <listitem> Add the Snapshots repository as an OBR repository by copying the URL to the repository.xml and passing it to the obr command: <command>obr add-url http://localhost:8081/nexus/content/groups/obr-group/.meta/obr.xml</command> </listitem>

. <listitem> List the contents of the OBR repository. </listitem>

. <listitem> Verify that the group contains bundles from Felix and the bundle from the osgi-project. </listitem> </orderedlist>

These commands are captured in the following screen listing:

----
                    --2009-07-14 22:46:19--  http://www.apache.org/dist/felix/felix-1.8.0.tar.gz
                    Resolving www.apache.org... 140.211.11.130
                    Connecting to www.apache.org|140.211.11.130|:80... connected.
                    HTTP request sent, awaiting response... 200 OK
                    Length: 901620 (880K) [application/x-gzip]
                    Saving to: `felix-1.8.0.tar.gz'
                    2009-07-14 22:46:20 (924 KB/s) - `felix-1.8.0.tar.gz' saved [901620/901620]

                    ~/programs $ <command>tar xvzf felix-1.8.0.tar.gz</command> 
                    felix-1.8.0/
                    felix-1.8.0/bin/
                    felix-1.8.0/bin/felix.jar
                    ...
                    felix-1.8.0/NOTICE
                    ~/programs $ <command>cd felix-1.8.0</command>
                    ~/programs/felix-1.8.0 $ <command>java -jar ./bin/felix.jar</command> 

                    Welcome to Felix.
                    =================

                    -&gt; <command>obr add-url http://localhost:8081/nexus/content/groups/obr-group/.meta/obr.xml</command>
                    -&gt; <command>obr list</command>
                    Apache Felix Bundle Repository (1.2.1, ...)
                    Apache Felix Configuration Admin Service (1.0.4, ...)
                    Apache Felix Declarative Services (1.0.8, ...)
                    Apache Felix EventAdmin (1.0.0)
                    Apache Felix File Install (1.2.0, ...)
                    Apache Felix HTTP Service Jetty (1.0.1, ...)
                    Apache Felix iPOJO (1.2.0, ...)
                    Apache Felix iPOJO (0.8.0)
                    Apache Felix iPOJO Arch Command (1.2.0, ...)
                    Apache Felix iPOJO Composite (1.2.0)
                    Apache Felix iPOJO Composite (1.0.0, ...)
                    Apache Felix iPOJO Event Admin Handler (1.2.0, ...)
                    Apache Felix iPOJO Extender Pattern Handler (1.2.0)
                    Apache Felix iPOJO Extender Pattern Handler (1.0.0, ...)
                    Apache Felix iPOJO JMX Handler (1.2.0, ...)
                    Apache Felix iPOJO Temporal Service Dependency Handler (1.2.0, ...)
                    Apache Felix iPOJO White Board Pattern Handler (1.2.0, ...)
                    Apache Felix Log Service (1.0.0)
                    Apache Felix Metatype Service (1.0.2, ...)
                    Apache Felix Prefrences Service (1.0.2)
                    Apache Felix Remote Shell (1.0.2)
                    Apache Felix Shell Service (1.0.2, ...)
                    Apache Felix Shell TUI (1.0.2, ...)
                    Apache Felix UPnP Base Driver (0.8.0)
                    Apache Felix UPnP Extra (0.4.0)
                    Apache Felix UPnP Tester (0.4.0)
                    Apache Felix Web Management Console (1.2.10, ...)
                    org.sonatype.mcookbook (1.0.0.SNAPSHOT, ...)
                    OSGi OBR Service API (1.0.0)
                    OSGi R4 Compendium Bundle (4.0.0)
                    Servlet 2.1 API (1.0.0)
                    -&gt; 
----

As anticipated, the list of bundles in the group repository contains all of the bundles from the Apache Felix repository and the bundle from the Snapshots OBR repository - <varname>org.sonatype.mcookbook</varname>. </section> </section> </chapter>

[[groovy]]
== Groovy Maven

[[groovy-sect-intro]]
=== Introduction

Groovy is just that: Groovy, and maybe in future versions of this book, I'll go on and on and on about how wonderful it is. For now, the pre-alpha Maven Cookbook gets straight to the content. This chapter contains a number of recipes that should make it easier for you to integrate Groovy into your Maven builds. For more information about Groovy, take a look at the Groovy project page <ulink url="http://groovy.codehaus.org/">http://groovy.codehaus.org/</ulink>. </section>

=== Running an Inline Groovy Script in a Maven Build

While Maven covers a lot of ground, there are certainly times when you just want to shell out to a script to get something simple done without having to write a custom plugin. Groovy is ideal for these situations because it provides you with a simple, dynamic scripting language that can be added directly to a project's POM.

==== Task

You need to run some Groovy script as a part of your build process. </section>

==== Action

Put some Groovy in your project's POM like this:

[[ex-groovy-script-in-pom]]
.Running a Groovy Script from a POM</title>
----
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
                        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0                    
                        http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                        &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                        &lt;groupId&gt;org.sonatype.mcookbook&lt;/groupId&gt;
                        &lt;artifactId&gt;groovy-script&lt;/artifactId&gt;
                        &lt;packaging&gt;jar&lt;/packaging&gt;
                        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                        &lt;name&gt;groovy-script&lt;/name&gt;
                        &lt;dependencies&gt;
                        &lt;dependency&gt;
                        &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;
                        &lt;artifactId&gt;maven-model&lt;/artifactId&gt;
                        &lt;version&gt;2.2.0&lt;/version&gt;
                        &lt;/dependency&gt;
                        &lt;/dependencies&gt;
                        &lt;build&gt;
                        &lt;plugins&gt;
                        &lt;plugin&gt;
                        &lt;groupId&gt;org.codehaus.groovy.maven&lt;/groupId&gt;
                        &lt;artifactId&gt;gmaven-plugin&lt;/artifactId&gt;
                        &lt;executions&gt;
                        &lt;execution&gt;
                        &lt;id&gt;groovy-magic&lt;/id&gt;
                        &lt;phase&gt;prepare-package&lt;/phase&gt;
                        &lt;goals&gt;
                        &lt;goal&gt;execute&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                        &lt;source&gt;
                        def depFile = new File(project.build.outputDirectory, 'deps.txt')

                        project.dependencies.each() {
                        depFile.write("\${it.groupId}:\${it.artifactId}:\${it.version}")
                        }

                        ant.copy(todir: project.build.outputDirectory ) {
                        fileset(dir: project.build.sourceDirectory)
                        }
                        &lt;/source&gt;
                        &lt;/configuration&gt;
                        &lt;/execution&gt;
                        &lt;/executions&gt;
                        &lt;/plugin&gt;
                        &lt;/plugins&gt;
                        &lt;/build&gt;
                        &lt;/project&gt;
----

<xref linkend="ex-groovy-script-in-pom" /> configures the GMaven Plugin's execute goal to execute during the prepare-package phase. The source configuration supplies a Groovy script which is run during the execution of the execute goal. Also note that the execution has an id element with a value of groovy-magic. This id element isn't required if you are only configuring one execution for a plugin, but it is necessary once you define more than one execution for a given plugin.

The Groovy script included, creates a file named "deps.txt" in <filename>\${basedir}/target/classes</filename>, it then iterates through the project's declared dependencies, and then it copies all of the source in <filename>\${basedir}/src/main/java</filename> into the <filename>\${basedir}/target/classes</filename> directory. This script demonstrates the use of Groovy's closure syntax and ease with which you can manipulate the filesystem. Groovy is an ideal scripting language for manipulating text and working with files. To test this script example, run <command>mvn package</command> as shown below.

----
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building groovy-script
[INFO]    task-segment: [package]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources]
                    [WARNING] Using platform encoding (MacRoman actually) to copy filtered resources, i.e. build is platform 
                    dependent!
[INFO] skip non existing resourceDirectory ${root.example.dir}/groovy/groovy-script/src/main/resources
[INFO] [compiler:compile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources]
                    [WARNING] Using platform encoding (MacRoman actually) to copy filtered resources, i.e. build is platform 
                    dependent!
[INFO] skip non existing resourceDirectory ${root.example.dir}/groovy/groovy-script/src/test/resources
[INFO] [compiler:testCompile]
[INFO] Not compiling test sources
[INFO] [surefire:test]
[INFO] Tests are skipped.
[INFO] [groovy:execute {execution: default}]
[INFO] [jar:jar]
[INFO] Building jar: ${root.example.dir}/groovy/groovy-script/target/groovy-script-1.0-SNAPSHOT.jar
----

After running this example, list the contents of <filename>\${basedir}/target/classes/deps.txt</filename>, and you should see the following contents:

----
${root.example.dir}/groovy/groovy-script $ <command>more deps.txt</command> 
                    org.apache.maven:maven-model:2.2.0
----

==== Detail

This simple Groovy script contained a number of references to implicit objects such as project and ant, it also demonstrated the simple syntax of Groovy and its closure-friendly nature of Groovy. </section> </section>

=== Executing Groovy Scripts in a Maven Build

==== Task

You need to execute one or more groovy scripts in a Maven build. </section>

==== Action

Configure the execute goal of the GMaven plugin, reference the Groovy script in the source configuration for the execution. The example POM shown in <xref linkend="ex-groovy-script-ex" /> configures two executions of the execute goal referencing two scripts stored in <filename>\${basedir}/src/main/groovy</filename>.

[[ex-groovy-script-ex]]
.Executing External Groovy Scripts in a Maven Build</title>
----
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
                        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0                        
                        http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                        &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                        &lt;groupId&gt;org.sonatype.mcookbook&lt;/groupId&gt;
                        &lt;artifactId&gt;groovy-script-ex&lt;/artifactId&gt;
                        &lt;packaging&gt;jar&lt;/packaging&gt;
                        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                        &lt;name&gt;groovy-script-ex&lt;/name&gt;
                        &lt;dependencies&gt;
                        &lt;dependency&gt;
                        &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;
                        &lt;artifactId&gt;maven-model&lt;/artifactId&gt;
                        &lt;version&gt;2.2.0&lt;/version&gt;
                        &lt;/dependency&gt;
                        &lt;/dependencies&gt;
                        &lt;build&gt;
                        &lt;plugins&gt;
                        &lt;plugin&gt;
                        &lt;groupId&gt;org.codehaus.groovy.maven&lt;/groupId&gt;
                        &lt;artifactId&gt;gmaven-plugin&lt;/artifactId&gt;
                        &lt;executions&gt;
                        &lt;execution&gt;
                        &lt;id&gt;create-deps-file&lt;/id&gt;
                        &lt;phase&gt;process-classes&lt;/phase&gt;
                        &lt;goals&gt;
                        &lt;goal&gt;execute&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                        &lt;source&gt;\${basedir}/src/main/groovy/CreateDeps.groovy&lt;/source&gt;
                        &lt;/configuration&gt;
                        &lt;/execution&gt;
                        &lt;execution&gt;
                        &lt;id&gt;copy-the-source&lt;/id&gt;
                        &lt;phase&gt;prepare-package&lt;/phase&gt;
                        &lt;goals&gt;
                        &lt;goal&gt;execute&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                        &lt;source&gt;\${basedir}/src/main/groovy/CopySource.groovy&lt;/source&gt;
                        &lt;/configuration&gt;
                        &lt;/execution&gt;
                        &lt;/executions&gt;
                        &lt;/plugin&gt;
                        &lt;/plugins&gt;
                        &lt;/build&gt;
                        &lt;/project&gt;
----

The <filename>CreateDeps.groovy</filename> script creates a file named <filename>deps.txt</filename> in <filename>\${basedir}/target/classes</filename> which contains a list of direct project dependencies, and the <filename>CopySource.groovy</filename> script copies the source from <filename>\${basedir}/src/main/java</filename> to <filename>\${basedir}/target/classes</filename>.

.The CreateDeps.groovy Script</title>
----
def depFile = new File(project.build.outputDirectory,
                        'deps.txt')

                        project.dependencies.each() {
                        depFile.write("\${it.groupId}:\${it.artifactId}:\${it.version}")
                        }
----

.The CopySource.groovy Script</title>
----
ant.copy(todir: project.build.outputDirectory ) {
                        fileset(dir: project.build.sourceDirectory)
                        }
----

[[writing-plugins-alternative-sect-writing-groovy]]
=== Writing Plugins in Groovy

Groovy is a dynamic language based on the Java Virtual Machine which compiles to Java bytecode. Groovy is a project in the Codehaus community. If you are fluent in Java, Groovy will seem like a natural choice for a scripting language. Groovy takes the features of Java, pares down the syntax a bit, and adds features like closures, duck-typing, and regular expressions. For more information about Groovy, please see the Groovy web site at <ulink url="http://groovy.codehaus.org">http://groovy.codehaus.org</ulink>.

[[writing-plugins-alternative-sect-creating-groovy-plugin]]
=== Creating a Groovy Plugin

To create a Maven Plugin using Groovy, you only need two files: a <filename>pom.xml</filename> and a single Mojo implemented in Groovy. To get started, create a project directory named <varname>firstgroovy-maven-plugin</varname>. Place the following <filename>pom.xml</filename> in this directory.

.POM for a Groovy Maven Plugin</title>
----
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
                        &lt;project&gt;
                        &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                        &lt;groupId&gt;org.sonatype.mavenbook.plugins&lt;/groupId&gt;
                        &lt;artifactId&gt;firstgroovy-maven-plugin&lt;/artifactId&gt;
                        &lt;name&gt;Example Groovy Mojo - firstgroovy-maven-plugin&lt;/name&gt;
                        &lt;packaging&gt;maven-plugin&lt;/packaging&gt;
                        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                        &lt;dependencies&gt;
                        &lt;dependency&gt;
                        &lt;groupId&gt;org.codehaus.mojo.groovy&lt;/groupId&gt;
                        &lt;artifactId&gt;groovy-mojo-support&lt;/artifactId&gt;
                        &lt;version&gt;1.0-beta-3&lt;/version&gt;
                        &lt;/dependency&gt;
                        &lt;/dependencies&gt;
                        &lt;build&gt;
                        &lt;plugins&gt;
                        &lt;plugin&gt;
                        &lt;artifactId&gt;maven-plugin-plugin&lt;/artifactId&gt;
                        &lt;version&gt;2.4&lt;/version&gt;
                        &lt;/plugin&gt;
                        &lt;plugin&gt;
                        &lt;groupId&gt;org.codehaus.mojo.groovy&lt;/groupId&gt;
                        &lt;artifactId&gt;groovy-maven-plugin&lt;/artifactId&gt;
                        &lt;version&gt;1.0-beta-3&lt;/version&gt;
                        &lt;extensions&gt;true&lt;/extensions&gt;
                        &lt;executions&gt;
                        &lt;execution&gt;
                        &lt;goals&gt;
                        &lt;goal&gt;generateStubs&lt;/goal&gt;
                        &lt;goal&gt;compile&lt;/goal&gt;
                        &lt;goal&gt;generateTestStubs&lt;/goal&gt;
                        &lt;goal&gt;testCompile&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;/execution&gt;
                        &lt;/executions&gt;
                        &lt;/plugin&gt;
                        &lt;/plugins&gt;
                        &lt;/build&gt;
                        &lt;/project&gt;
----

What's going on in this <acronym>POM</acronym>? First, notice that the packaging of the <acronym>POM</acronym> is <varname>maven-plugin</varname> because we are creating a project that will package a Maven plugin. Next, note that the project depends on the <varname>groovy-mojo-support</varname> artifact in the <varname>org.codehaus.mojo.groovy</varname> group.

Then under <filename>src/main/groovy</filename> in a directory <filename>org/sonatype/mavenbook/plugins</filename>, create a file named <filename>EchoMojo.groovy</filename> which contains the EchoMojo class.

----
package org.sonatype.mavenbook.plugins

                        import org.codehaus.mojo.groovy.GroovyMojo

                        /**
                        * Example goal which echos a message
                        *
                        * @goal echo
                        */
                        class EchoMojo extends GroovyMojo {

                        /**
                        * Message to print
                        *
                        * @parameter expression="\${echo.message}"
                        *            default-value="Hello Maven World"
                        */
                        String message

                        void execute() {
                        log.info( message )
                        }
                        }
----

[[scala]]
== Scala and Maven

[[scala-sect-intro]]
=== Introduction

Scala., haven't used it yet? Not surprised, few have, but everyone seems to be all atwitter about how amazing and transformative it is, so maybe you should take a look? If you are interested in Scala and you already use Maven, you are in luck. The Scala community has spent a great deal of effort making sure that the Maven integration is first-class. This chapter will introduce you to Scala by way of Maven. </section>

[[sect-scala-script-inline]]
=== Running an Inline Scala Script in a Maven Build

==== Task

You need to execute an inline Scala script as a part of your Maven build. </section>

==== Action

Configure the <varname>script</varname> goal of the <varname>maven-scala-plugin</varname>, and pass a Scala script to the <varname>script</varname> configuration parameter.


[[ex-scala-script-inline]]
.Executing an Inline Scala Script with the Maven Scala Plugin</title>
----
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
                        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0                        
                        http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                        &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                        &lt;groupId&gt;org.sonatype.mcookbook&lt;/groupId&gt;
                        &lt;artifactId&gt;scala-script&lt;/artifactId&gt;
                        &lt;packaging&gt;jar&lt;/packaging&gt;
                        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                        &lt;name&gt;scala-script&lt;/name&gt;
                        &lt;dependencies&gt;
                        &lt;dependency&gt;
                        &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;
                        &lt;artifactId&gt;maven-model&lt;/artifactId&gt;
                        &lt;version&gt;2.2.0&lt;/version&gt;
                        &lt;/dependency&gt;
                        &lt;dependency&gt;
                        &lt;groupId&gt;org.scala-lang&lt;/groupId&gt;
                        &lt;artifactId&gt;scala-library&lt;/artifactId&gt;
                        &lt;version&gt;2.7.3&lt;/version&gt;
                        &lt;/dependency&gt;
                        &lt;dependency&gt;
                        &lt;groupId&gt;org.scala-tools&lt;/groupId&gt;
                        &lt;artifactId&gt;maven-scala-plugin&lt;/artifactId&gt;
                        &lt;version&gt;2.10.1&lt;/version&gt;
                        &lt;/dependency&gt;
                        &lt;dependency&gt;
                        &lt;groupId&gt;org.scalaforge&lt;/groupId&gt;
                        &lt;artifactId&gt;scalax&lt;/artifactId&gt;
                        &lt;version&gt;0.1&lt;/version&gt;
                        &lt;/dependency&gt;
                        &lt;/dependencies&gt;
                        &lt;build&gt;
                        &lt;plugins&gt;
                        &lt;plugin&gt;
                        &lt;groupId&gt;org.scala-tools&lt;/groupId&gt;
                        &lt;artifactId&gt;maven-scala-plugin&lt;/artifactId&gt;
                        &lt;version&gt;2.10.1&lt;/version&gt;
                        &lt;executions&gt;
                        &lt;execution&gt;
                        &lt;phase&gt;prepare-package&lt;/phase&gt;
                        &lt;goals&gt;
                        &lt;goal&gt;script&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                        &lt;keepGeneratedScript&gt;true&lt;/keepGeneratedScript&gt;
                        &lt;script&gt;
                        &lt;![CDATA[
                        import java.io.{File,  PrintWriter, FileWriter};
                        import scalax.io.FileExtras;
                        import scala.collection.mutable.HashSet;

                        val outputDir = project.getBuild().getOutputDirectory();
                        val depsFile = new FileExtras( new File( outputDir, "deps.txt" ) )
                        val pw = depsFile.printWriter
                        val depSet = new HashSet[String]
                        for( d &lt;- project.getDependencies() ) {
                        depSet += d.getGroupId + ":" + d.getArtifactId + ":" + d.getVersion
                        }
                        pw.writeLines( depSet.toSeq )

                        ]]&gt;
                        &lt;/script&gt;
                        &lt;/configuration&gt;
                        &lt;/execution&gt;
                        &lt;/executions&gt;
                        &lt;/plugin&gt;
                        &lt;/plugins&gt;
                        &lt;/build&gt;
                        &lt;repositories&gt;
                        &lt;repository&gt;
                        &lt;id&gt;scala-tools&lt;/id&gt;
                        &lt;url&gt;http://scala-tools.org/repo-releases/&lt;/url&gt;
                        &lt;/repository&gt;
                        &lt;/repositories&gt;
                        &lt;/project&gt;
----

If you run <command>mvn package</command>, the <varname>script</varname> goal will be executed during the <varname>prepare-package</varname> phase.

----
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building scala-script
[INFO]    task-segment: [package]
[INFO] ------------------------------------------------------------------------
                    ...
[INFO] [scala:script {execution: scala-magic}]
[INFO] Checking for multiple versions of scala
                    ...
[INFO] BUILD SUCCESSFUL
----

After this script executes, there will be a file named <filename>deps.txt</filename> in <filename>\${basedir}/target/classes</filename> containing a list of the project's direct dependencies.

----
org.scalaforge:scalax:0.1
                    org.apache.maven:maven-model:2.2.0
                    org.scala-tools:maven-scala-plugin:2.10.1
                    org.scala-lang:scala-library:2.7.3
----

==== Detail

<xref linkend="ex-scala-script-inline" /> includes the scala-tools repository and the dependency on version 0.1 of scalax to gain access to the FileExtras class which is used to augment the methods available on a <classname>File</classname> object. The FileHelper wraps the File object, and adds the method <methodname>writeLines()</methodname> which is used to write a Sequence of String objects. This Sequence of String objects is stored in a HashSet which is populated in a for loop that loops over all of the project's dependencies.

The other piece of configuration in this example is the keepGeneratedScript option. This option tells the Maven Scala plugin to retain the temporary Scala source which is generated by the plugin. The Scala plugin takes the inline Scala source code and creates a temporary script in \${basedir}/target/.scalaScriptGen/embeddedScript_1.scala. If keepGeneratedScript is set to false, the Maven Scala plugin will delete this file when it is finished executing the script. If keepGeneratedScript is set to true, the Scala plugin will retain this source file. Let's take a look at the embeddedScript_1.scala file:


----
import scala.collection.jcl.Conversions._
                    class embeddedScript_1(project:org.scala_tools.maven.model.MavenProjectAdapter,log:org
                    .apache.maven.plugin.logging.Log) {
                    import java.io.{File,  PrintWriter, FileWriter};
                    import scalax.io.FileExtras;
                    import scala.collection.mutable.HashSet;
                    
                    val outputDir = project.getBuild().getOutputDirectory();
                    val depsFile = new FileExtras( new File( outputDir, "deps.txt" ) )
                    val pw = depsFile.printWriter
                    val depSet = new HashSet[String]
                    for( d &lt;- project.getDependencies() ) {
                    depSet += d.getGroupId + ":" + d.getArtifactId + ":" + d.getVersion
                    }
                    pw.writeLines( depSet.toSeq )
                    }
----

Notice that the class includes to argument project:org.scala_tools.maven.model.MavenProjectAdapter and log:org.apache.maven.plugin.logging.Log. The project argument gives you access to the Maven project object model and the log argument gives you access to the logging facilities of Maven. The project and log objects are only available when the Maven Scala plugin is available on the classpath, this is why you see the Maven Scala plugin declared both as a dependency of the project under dependencies in <xref linkend="ex-scala-script-inline" /> and as a plugin. </section> </section>

=== Running an External Scala Script in a Maven Build

==== Task

You need to execute an external Scala script as a part of your Maven build. </section>

==== Action

Similar to <xref linkend="ex-scala-script-inline" />, configure the <varname>script</varname> goal of the Maven Scala plugin and specify a Scala script in the <varname>scriptFile</varname> configuration parameter.

.Configuring the Maven Scala Plugn Script Goal to Execute an External Script</title>
----
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
                        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0                        
                        http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                        &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                        &lt;groupId&gt;org.sonatype.mcookbook&lt;/groupId&gt;
                        &lt;artifactId&gt;scala-script-ex&lt;/artifactId&gt;
                        &lt;packaging&gt;jar&lt;/packaging&gt;
                        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                        &lt;name&gt;scala-script-ex&lt;/name&gt;
                        &lt;dependencies&gt;
                        &lt;dependency&gt;
                        &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;
                        &lt;artifactId&gt;maven-model&lt;/artifactId&gt;
                        &lt;version&gt;2.2.0&lt;/version&gt;
                        &lt;/dependency&gt;
                        &lt;dependency&gt;
                        &lt;groupId&gt;org.scala-lang&lt;/groupId&gt;
                        &lt;artifactId&gt;scala-library&lt;/artifactId&gt;
                        &lt;version&gt;2.7.3&lt;/version&gt;
                        &lt;/dependency&gt;
                        &lt;dependency&gt;
                        &lt;groupId&gt;org.scala-tools&lt;/groupId&gt;
                        &lt;artifactId&gt;maven-scala-plugin&lt;/artifactId&gt;
                        &lt;version&gt;2.10.1&lt;/version&gt;
                        &lt;/dependency&gt;
                        &lt;dependency&gt;
                        &lt;groupId&gt;org.scalaforge&lt;/groupId&gt;
                        &lt;artifactId&gt;scalax&lt;/artifactId&gt;
                        &lt;version&gt;0.1&lt;/version&gt;
                        &lt;/dependency&gt;
                        &lt;/dependencies&gt;
                        &lt;build&gt;
                        &lt;plugins&gt;
                        &lt;plugin&gt;
                        &lt;groupId&gt;org.scala-tools&lt;/groupId&gt;
                        &lt;artifactId&gt;maven-scala-plugin&lt;/artifactId&gt;
                        &lt;version&gt;2.10.1&lt;/version&gt;
                        &lt;executions&gt;
                        &lt;execution&gt;
                        &lt;id&gt;scala-magic&lt;/id&gt;
                        &lt;phase&gt;prepare-package&lt;/phase&gt;
                        &lt;goals&gt;
                        &lt;goal&gt;script&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                        &lt;keepGeneratedScript&gt;true&lt;/keepGeneratedScript&gt;
                        &lt;scriptFile&gt;\${basedir}/src/main/scala/CreateDeps.scala&lt;/scriptFile&gt;
                        &lt;/configuration&gt;
                        &lt;/execution&gt;
                        &lt;/executions&gt;
                        &lt;/plugin&gt;
                        &lt;/plugins&gt;
                        &lt;/build&gt;
                        &lt;repositories&gt;
                        &lt;repository&gt;
                        &lt;id&gt;scala-tools&lt;/id&gt;
                        &lt;url&gt;http://scala-tools.org/repo-releases/&lt;/url&gt;
                        &lt;/repository&gt;
                        &lt;/repositories&gt;
                        &lt;/project&gt;
----

The script that this build will execute is the same Scala script that was executed in <xref linkend="ex-scala-script-inline" />. In this example, the script is stored in an external file in <filename>\${basedir]/src/main/scala</filename>, and in <xref linkend="ex-scala-script-inline" />, the script was listed inline in the project's POM.

.The CreateDeps.scala Script</title>
----
import java.io.{File,  PrintWriter, FileWriter};
                        import scalax.io.FileExtras;
                        import scala.collection.mutable.HashSet;

                        val outputDir = project.getBuild().getOutputDirectory();
                        val depsFile = new FileExtras( new File( outputDir, "deps.txt" ) );
                        val pw = depsFile.printWriter;
                        val depSet = new HashSet[String];
                        for( d &lt;- project.getDependencies() ) {
                        depSet += d.getGroupId + ":" + d.getArtifactId + ":" + d.getVersion;
                        }
                        pw.writeLines( depSet.toSeq );
----

Just like the example in <xref linkend="sect-scala-script-inline" />, this script creates a file named <filename>deps.txt</filename> in <filename>\${basedir}/target/classes</filename> which contains a list of the project's dependencies.


----
org.scalaforge:scalax:0.1
                    org.apache.maven:maven-model:2.2.0
                    org.scala-tools:maven-scala-plugin:2.10.1
                    org.scala-lang:scala-library:2.7.3
----

==== Detail

There is very little difference between the example from <xref linkend="sect-scala-script-inline" /> and the example in this section other than the location of the Scala script. If you look in <filename>\${basedir}/target/.scalaScriptGen</filename> you can see that the Scala plugin creates a file named <filename>CreateDeps_1.scala</filename> that contains a class named <classname>CreateDeps_1</classname>. </section> </section> </chapter>

[[ant]]
== Ant and Maven

[[ant-sect-intro]]
=== Introduction

Ant and Maven? Yes, it is true.

Ant isn't a language as much as it is a build tool which allows you to describe a build as a set of tasks grouped into build targets. Ant then allows you to declare dependencies between build targets. When you are using Ant you are essentially creating your own lifecycle. An Ant <filename>build.xml</filename> might have an install target which depends on a test target which depends on a compile target, but these relationships are arbitrary and managed by the person who writes the Ant build file.

Ant is something of a ancestor to Maven, it was the ubiquitous procedural build tool that almost every project used before Maven introduced the concept of wide-scale reusability of common build plugins and the concept of a universal lifecycle. </section>

=== Running an Inline Ant Script in a Maven Build

==== Task

You need to run an inline Ant script as a part of your Maven build. </section>

==== Action

Configure the <varname>run</varname> goal of the Maven AntRun plugin to execute an inline Ant script. The POM shown in configures the <varname>run</varname> goal to execute during the <varname>prepare-package</varname> phase of the build. The Ant script is contained in the <varname>tasks</varname> configuration parameter for the <varname>ant-magic</varname> execution.

[[ex-ant-script-inline]]
.Executing an Inline Ant Script in a Maven Build</title>
----
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
                        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0                        
                        http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                        &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                        &lt;groupId&gt;org.sonatype.mcookbook&lt;/groupId&gt;
                        &lt;artifactId&gt;ant-script&lt;/artifactId&gt;
                        &lt;packaging&gt;jar&lt;/packaging&gt;
                        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                        &lt;name&gt;ant-script&lt;/name&gt;
                        &lt;build&gt;
                        &lt;plugins&gt;
                        &lt;plugin&gt;
                        &lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;
                        &lt;executions&gt;
                        &lt;execution&gt;
                        &lt;id&gt;ant-magic&lt;/id&gt;
                        &lt;phase&gt;prepare-package&lt;/phase&gt;
                        &lt;goals&gt;
                        &lt;goal&gt;run&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                        &lt;tasks&gt;
                        &lt;property name="compile_classpath"
                        refid="maven.compile.classpath"/&gt;
                        &lt;echo file="\${project.build.outputDirectory}/deps.txt"
                        message="compile classpath: \${compile_classpath}"/&gt;

                        &lt;copy todir="\${project.build.outputDirectory}"&gt;
                        &lt;fileset dir="\${project.build.sourceDirectory}"/&gt;
                        &lt;/copy&gt;
                        &lt;/tasks&gt;
                        &lt;/configuration&gt;
                        &lt;/execution&gt;
                        &lt;/executions&gt;
                        &lt;/plugin&gt;
                        &lt;/plugins&gt;
                        &lt;/build&gt;
                        &lt;/project&gt;
----

You can run this script, by executing the package phase.

----
[INFO] Scanning for projects...
                    ...
[INFO] [antrun:run {execution: ant-magic}]
[INFO] Executing tasks
                    [copy] Copying 1 file to ${root.example.dir}/ant/ant-script/target/classes
[INFO] Executed tasks
                    ...
[INFO] BUILD SUCCESSFUL

----

Once this simple Ant script has been completed, the contents of <filename>\${basedir}/target/classes/deps.txt</filename> should contain the following:

----
compile classpath: ${root.example.dir}/ant/ant-script/target/classes
----

=== Running an External Ant Script in a Maven Build

==== Task

You need to execute an external Ant script in a Maven build. </section>

==== Action

Configure the run goal form the Maven AntRun plugin. Define any properties you wish to pass to the external Ant build, and then call the external Ant build with the ant task, specifying the antfile and target you wish to execute.

.Executing an External Ant Script from a Maven Build</title>
----
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                        http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                        &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                        &lt;groupId&gt;org.sonatype.mcookbook&lt;/groupId&gt;
                        &lt;artifactId&gt;ant-script-ex&lt;/artifactId&gt;
                        &lt;packaging&gt;jar&lt;/packaging&gt;
                        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                        &lt;name&gt;ant-script-ex&lt;/name&gt;
                        &lt;build&gt;
                        &lt;plugins&gt;
                        &lt;plugin&gt;
                        &lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;
                        &lt;executions&gt;
                        &lt;execution&gt;
                        &lt;id&gt;ant-magic&lt;/id&gt;
                        &lt;phase&gt;prepare-package&lt;/phase&gt;
                        &lt;goals&gt;
                        &lt;goal&gt;run&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                        &lt;tasks&gt;
                        &lt;property name="compile_classpath" 
                        refid="maven.compile.classpath"/&gt;
                        &lt;property name="outputDir"
                        value="\${project.build.outputDirectory}"/&gt;
                        &lt;property name="sourceDir"
                        value="\${project.build.sourceDirectory}"/&gt;
                        &lt;ant antfile="\${basedir}/src/main/ant/create-deps.xml"
                        target="create"/&gt;
                        &lt;/tasks&gt;
                        &lt;/configuration&gt;
                        &lt;/execution&gt;
                        &lt;/executions&gt;
                        &lt;/plugin&gt;
                        &lt;/plugins&gt;
                        &lt;/build&gt;
                        &lt;/project&gt;
----

To execute this external Ant build, run <command>mvn package</command>.

----
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building ant-script-ex
                    ...
[INFO] [antrun:run {execution: ant-magic}]
[INFO] Executing tasks

                    create:
                    [copy] Copying 1 file to ${root.example.dir}/ant/ant-script-ex/target/classes
[INFO] Executed tasks
                    ...
[INFO] BUILD SUCCESSFUL
----

Once this simple Ant script has been completed, the contents of <filename>\${basedir}/target/classes/deps.txt</filename> should contain the following:

----
compile classpath: ${root.example.dir}/ant/ant-script-ex/target/classes
----

=== Creating an Ant Maven Plugin

While Maven is an improvement on Ant, Ant can still be useful when describing parts of the build process. Ant provides a set of tasks which can come in handy when you need to perform file operations or <acronym>XSLT</acronym> transformations or any other operation you could think of. There is a large library of available Ant tasks for everything from running JUnit tests to transforming <acronym>XML</acronym> to copying files to a remote server using <acronym>SCP</acronym>. An overview of available Ant tasks can be found online in the <ulink url="http://ant.apache.org/manual/tasksoverview.html">Apache Ant Manual</ulink>. You can use these tasks as a low-level build customization language, and you can also write a Maven plugin where, instead of a Mojo written in Java, you can pass parameters to a Mojo which is an Ant build target.

==== Task

You need to write a Maven Plugin in Ant. </section>

==== Action

To create a Maven plugin using Ant, you will need to have a <filename>pom.xml</filename> and a single Mojo implemented in Ant. To get started, create a project directory named firstant-maven-plugin. Place the following <filename>pom.xml</filename> in this directory.

.POM for an Ant Maven Plugin</title>
----
&lt;project&gt;
                        &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                        &lt;groupId&gt;org.sonatype.mavenbook.plugins&lt;/groupId&gt;
                        &lt;artifactId&gt;firstant-maven-plugin&lt;/artifactId&gt;
                        &lt;name&gt;Example Ant Mojo - firstant-maven-plugin&lt;/name&gt;
                        &lt;packaging&gt;maven-plugin&lt;/packaging&gt;
                        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                        &lt;dependencies&gt;
                        &lt;dependency&gt;
                        &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;
                        &lt;artifactId&gt;maven-script-ant&lt;/artifactId&gt;
                        &lt;version&gt;${maven.version}&lt;/version&gt;
                        &lt;/dependency&gt;
                        &lt;/dependencies&gt;
                        &lt;build&gt;
                        &lt;plugins&gt;
                        &lt;plugin&gt;
                        &lt;artifactId&gt;maven-plugin-plugin&lt;/artifactId&gt;
                        &lt;version&gt;2.4&lt;/version&gt;
                        &lt;dependencies&gt;
                        &lt;dependency&gt;
                        &lt;groupId&gt;org.apache.maven.plugin-tools&lt;/groupId&gt;
                        &lt;artifactId&gt;maven-plugin-tools-ant&lt;/artifactId&gt;
                        &lt;version&gt;2.4&lt;/version&gt;
                        &lt;/dependency&gt;
                        &lt;/dependencies&gt;
                        &lt;/plugin&gt;
                        &lt;/plugins&gt;
                        &lt;/build&gt;
                        &lt;/project&gt;
----

Next, you will need to create your Ant Mojo. An Ant mojo consists of two parts: the Ant tasks in an <acronym>XML</acronym> file, and a file which supplies Mojo descriptor information. The Ant plugin tools are going to look for both of these files in <filename>\${basedir}/src/main/scripts</filename>. One file will be named <filename>echo.build.xml</filename> and it will contain the Ant <acronym>XML</acronym>.

.Echo Ant Mojo</title>
----
&lt;project&gt;
                        &lt;target name="echotarget"&gt;
                        &lt;echo&gt;\${message}&lt;/echo&gt;
                        &lt;/target&gt;
                        &lt;/project&gt;
----

The other file will describe the Echo Ant Mojo and will be in the <filename>echo.mojos.xml</filename> file also in <filename>\${basedir}/src/main/scripts</filename>.

.Echo Ant Mojo Descriptor</title>
----
&lt;pluginMetadata&gt;
                        &lt;mojos&gt;
                        &lt;mojo&gt;
                        &lt;goal&gt;echo&lt;/goal&gt;
                        &lt;call&gt;echotarget&lt;/call&gt;
                        &lt;description&gt;Echos a Message&lt;/description&gt;
                        &lt;parameters&gt;
                        &lt;parameter&gt;
                        &lt;name&gt;message&lt;/name&gt;
                        &lt;property&gt;message&lt;/property&gt;
                        &lt;required&gt;false&lt;/required&gt;
                        &lt;expression&gt;\${message}&lt;/expression&gt;
                        &lt;type&gt;java.lang.Object&lt;/type&gt;
                        &lt;defaultValue&gt;Hello Maven World&lt;/defaultValue&gt;
                        &lt;description&gt;Prints a message&lt;/description&gt;
                        &lt;/parameter&gt;
                        &lt;/parameters&gt;
                        &lt;/mojo&gt;
                        &lt;/mojos&gt;
                        &lt;/pluginMetadata&gt;
----

This <filename>echo.mojos.xml</filename> file configures the Mojo descriptor for this plugin. It supplies the goal name "echo", and it tells Maven what Ant task to call in the call element. In addition to configuring the description, this <acronym>XML</acronym> file configures the message parameter to use the expression <varname>\${message}</varname> and to have a default value of "Hello Maven World."

If you've configured your plugin groups in <filename>~/.m2/settings.xml</filename> to include <varname>org.sonatype.mavenbook.plugins</varname>, you can install this Ant plugin by executing the following command at the command-line:

----
[INFO] ------------------------------------------------------------------------
[INFO] Building Example Ant Mojo - firstant-maven-plugin
[INFO]    task-segment: [install]
[INFO] ------------------------------------------------------------------------
[INFO] [plugin:descriptor]
[INFO] Using 3 extractors.
[INFO] Applying extractor for language: java
[INFO] Extractor for language: java found 0 mojo descriptors.
[INFO] Applying extractor for language: bsh
[INFO] Extractor for language: bsh found 0 mojo descriptors.
[INFO] Applying extractor for language: ant
[INFO] Extractor for language: ant found 1 mojo descriptors.
                    ...
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
----

Note that the <varname>plugin:descriptor</varname> goal found a single Ant mojo descriptor. To run this goal, you would execute the following command-line:

----
                    ...
[INFO] [firstant:echo]

                    echotarget:
                    [echo] Hello Maven World
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------

----

The <varname>echo</varname> goal executed and printed out the default value of the <varname>message</varname> parameter. If you are used to Apache Ant build scripts, you will notice that Ant prints out the name of the target executed and then adds a logging prefix to the output of the echo Ant task. </section>

==== Detail

While Maven is an improvement on Ant, Ant can still be useful when describing parts of the build process. Ant provides a set of tasks which can come in handy when you need to perform file operations or <acronym>XSLT</acronym> transformations or any other operation you could think of. There is a large library of available Ant tasks for everything from running JUnit tests to transforming <acronym>XML</acronym> to copying files to a remote server using <acronym>SCP</acronym>. An overview of available Ant tasks can be found online in the <ulink url="http://ant.apache.org/manual/tasksoverview.html">Apache Ant Manual</ulink>. You can use these tasks as a low-level build customization language, and you can also write a Maven plugin where, instead of a Mojo written in Java, you can pass parameters to a Mojo which is an Ant build target. </section> </section> </chapter>

[[ruby]]
== Ruby and Maven

[[ruby-sect-intro]]
=== Introduction

    Ant and Maven? Yes, it is true.
        </section>

[[writing-plugins-alternative-sect-jruby]]
=== Writing Plugins in JRuby

Ruby is an object-oriented scripting language which provides a rich set of facilities for meta-programming and reflection. Ruby's reliance on closures and blocks make for a programming style that is both compact and powerful. Although Ruby has been around since 1993, most people came to know Ruby after it was made popular by a Ruby-based web framework known as Ruby on Rails. JRuby is a Ruby interpreter written in Java. For more information about the Ruby language, see: <ulink url="http://www.ruby-lang.org/">http://www.ruby-lang.org/</ulink>, and for more information about JRuby, see: <ulink url="http://jruby.codehaus.org/">http://jruby.codehaus.org/</ulink>.

[[writing-plugins-alternative-sect-creating-jruby]]
=== Creating a JRuby Plugin

        To create a Maven plugin using JRuby, you will need to have a
                    <filename>pom.xml</filename> and a single Mojo implemented in Ruby. To
                    get started, create a project directory named
                    <varname>firstruby-maven-plugin</varname>. Place the following
                    <filename>pom.xml</filename> in this directory.

                <example>
                    <title>POM for a JRuby Maven Plugin</title>

                    <programlisting language="xml">&lt;project&gt;
                        &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                        &lt;groupId&gt;org.sonatype.mavenbook.plugins&lt;/groupId&gt;
                        &lt;artifactId&gt;firstruby-maven-plugin&lt;/artifactId&gt;
                        &lt;name&gt;Example Ruby Mojo - firstruby-maven-plugin&lt;/name&gt;
                        &lt;packaging&gt;maven-plugin&lt;/packaging&gt;
                        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                        &lt;dependencies&gt;
                        &lt;dependency&gt;
                        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                        &lt;artifactId&gt;jruby-maven-plugin&lt;/artifactId&gt;
                        &lt;version&gt;1.0-beta-4&lt;/version&gt;
                        &lt;scope&gt;runtime&lt;/scope&gt;
                        &lt;/dependency&gt;
                        &lt;/dependencies&gt;
                        &lt;build&gt;
                        &lt;plugins&gt;
                        &lt;plugin&gt;
                        &lt;artifactId&gt;maven-plugin-plugin&lt;/artifactId&gt;
                        &lt;version&gt;2.4&lt;/version&gt;
                        &lt;dependencies&gt;
                        &lt;dependency&gt;
                        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                        &lt;artifactId&gt;jruby-maven-plugin&lt;/artifactId&gt;
                        &lt;version&gt;1.0-beta-4&lt;/version&gt;
                        &lt;/dependency&gt;
                        &lt;/dependencies&gt;
                        &lt;/plugin&gt;
                        &lt;/plugins&gt;
                        &lt;/build&gt;
                        &lt;/project&gt;</programlisting>
                </example>

        Next, you will need to create a Mojo implemented in Ruby. Maven is
                    going to look for a Ruby Mojo in
                    <filename>\${basedir}/src/main/scripts</filename>. Put the following
                    Ruby class in
                    <filename>\${basedir}/src/main/scripts/echo.rb</filename>.

                <example>
                    <title>The Echo Ruby Mojo</title>

                    <programlisting># Prints a message
                        # @goal "echo"
                        # @phase "validate"
                        class Echo &lt; Mojo

                        # @parameter type="java.lang.String" default-value="Hello Maven World" \
                        expression="\${message}"
                        def message
                        end

                        def execute
                        info $message
                        end

                        end

                        run_mojo Echo
                    </programlisting>
                </example>

        The <classname>Echo</classname> class must extend
                    <classname>Mojo</classname>, and it must override the
                    <methodname>execute()</methodname> method. At the end of the
                    <filename>echo.rb</filename> file, you will need to run the mojo with
                    "<code>run_mojo Echo</code>". To install this plugin, run mvn
                    install:

----

[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building Example Ruby Mojo - firstruby-maven-plugin
[INFO]    task-segment: [install]
[INFO] ------------------------------------------------------------------------
                    ...
[INFO] [plugin:descriptor]
                    ...
[INFO] Applying extractor for language: jruby
[INFO] Ruby Mojo File: /echo.rb
[INFO] Extractor for language: jruby found 1 mojo descriptors.
                    ...
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------

----

        During the build, you should see that the Maven Plugin Plugin's
                    descriptor goal applies the JRuby extractor to create a
                    <filename>plugin.xml</filename> which captures the annotations in the
                    <classname>Echo</classname> class. If you've configured your default
                    plugin groups to include
                    <varname>org.sonatype.mavenbook.plugins</varname>, you should be able to
                    run this echo goal with the following command-line:

----

                    ...
[INFO] [firstruby:echo]
[INFO] Hello Maven World
                    ...
----
            </section>

[[writing-plugins-alternative-sect-ruby-mojo]]
=== Ruby Mojo Implementations

Ruby Mojos are annotated using comments in Ruby source files. A single annotation like <classname>@parameter</classname> takes a number of attributes, and each of these attributes must be specified on the same line. There can be no line-breaks between an annotations attribute in the Ruby source. Both classes and parameters are annotated. Parameters are annotated with four annotations: <classname>@parameter</classname>, <classname>@required</classname>, <classname>@readonly</classname>, and <classname>@deprecated</classname>. The <classname>@parameter</classname> attribute takes the following attributes:

                <variablelist>
                    <varlistentry>
                        <term>alias</term>

                        <listitem>
                    An alias for the parameter. An alternate name which can be
                                used to populate the same parameter.
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term>default-value</term>

                        <listitem>
                    Provides a default value to the parameter if the supplied
                                value or the parameter expression produces a null result. In
                                <filename>echo.rb</filename>, we specify the default as "Hello
                                Maven World".
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term>expression</term>

                        <listitem>
                    Contains an expression which can resolve to a Maven property
                                or a System property.
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term>type</term>

                        <listitem>
                    The fully qualified Java type of the parameter. If the type
                                is not specified it will default to
                                <classname>java.lang.String</classname>.
                        </listitem>
                    </varlistentry>
                </variablelist>

        In addition to the <classname>@parameter</classname> annotation, a
                    parameter can take the following annotations:

                <variablelist>
                    <varlistentry>
                        <term>@required "&lt;true|false&gt;"</term>

                        <listitem>
                    Marks the parameter as being required. The default value is
                                false.
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term>@readonly "&lt;true|false&gt;"</term>

                        <listitem>
                    Marks the parameter as read-only. If this is true, you may
                                not override the default value or the value from the expression
                                from the command line. The default value is false.
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term>@deprecated "&lt;true|false&gt;"</term>

                        <listitem>
                    Marks the parameter as deprecated. The default value is
                                false.
                        </listitem>
                    </varlistentry>
                </variablelist>

        Putting this altogether, a fully annotated message parameter from
                    <filename>echo.rb</filename> would look like the following code:

                <programlisting># @parameter type="java.lang.String" default-value="Hello Maven World" \
                    expression="\${message}"
                    # @readonly true
                    # @required false
                    # @deprecated false
                    def message
                    end
                </programlisting>

        Ruby Mojo classes are annotated with the following
                    attributes:

                <variablelist>
                    <varlistentry>
                        <term>@goal</term>

                        <listitem>
                    Specifies the name of the goal.
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term>@phase</term>

                        <listitem>
                    The default phase to bind this goal to.
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term>@requiresDependencyResolution</term>

                        <listitem>
                    True if the Mojo requires that dependencies be resolved
                                before execution.
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term>@aggregator</term>

                        <listitem>
                    Marks this mojo as an aggregator.
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term>@execute</term>

                        <listitem>
                    Provides the opportunity to execute a goal or lifecycle
                                phase before executing this Mojo. The @execute annotation takes
                                the following attributes:

                            <variablelist>
                                <varlistentry>
                                    <term>goal</term>

                                    <listitem>
                                Name of the goal to execute
                                    </listitem>
                                </varlistentry>

                                <varlistentry>
                                    <term>phase</term>

                                    <listitem>
                                Name of the lifecycle phase to execute
                                    </listitem>
                                </varlistentry>

                                <varlistentry>
                                    <term>lifecycle</term>

                                    <listitem>
                                Name of the lifecycle (if other than default)
                                    </listitem>
                                </varlistentry>
                            </variablelist>
                        </listitem>
                    </varlistentry>
                </variablelist>

        For an example of an annotated Mojo class, consider the following
                    code example:

                <programlisting># Completes some build task
                    # @goal custom-goal
                    # @phase install
                    # @requiresDependencyResolution false
                    # @execute phase=compile
                    class CustomMojo &lt; Mojo
                    ...
                    end</programlisting>

        Mojo parameters can reference Java classes and Maven properties.
                    The following example shows you how to get access to the Maven Project
                    object from a Ruby Mojo.

                <example>
                    <title>Referencing a Maven Project from a Ruby Mojo</title>

                    <programlisting># This is a mojo description
                        # @goal test
                        # @phase validate
                        class Test &lt; Mojo
                        # @parameter type="java.lang.String" default-value="nothing" alias="a_string"
                        def prop
                        end  

                        # @parameter type="org.apache.maven.project.MavenProject" \
                        expression="\${project}"
                        # @required true  
                        def project
                        end  

                        def execute    
                        info "The following String was passed to prop: '#{$prop}'"    
                        info "My project artifact is: #{$project.artifactId}"  
                        end
                        end

                        run_mojo Test
                    </programlisting>

            In the previous example, we can access properties on the
                        <classname>Project</classname> class using standard Ruby syntax. If
                        you put <filename>test.rb</filename> in
                        <varname>firstruby-maven-plugin</varname>'s
                        <filename>src/main/scripts</filename> directory, install the plugin,
                        and then run it, you will see the following output:

----

                        ...
[INFO] [plugin:descriptor]
[INFO] Using 3 extractors.
[INFO] Applying extractor for language: java
                        ...
[INFO] Applying extractor for language: jruby
[INFO] Ruby Mojo File: /echo.rb
[INFO] Ruby Mojo File: /test.rb
[INFO] Extractor for language: jruby found 2 mojo descriptors.
                        ...
                        $ <command>mvn firstruby:test</command>
                        ...
[INFO] [firstruby:test]
[INFO] The following String was passed to prop: 'nothing'
[INFO] My project artifact is: firstruby-maven-plugin

----
                </example>
            </section>

[[writing-plugins-alternative-sect-logging-ruby]]
=== Logging from a Ruby Mojo

        To log from a Ruby Mojo, call the <methodname>info()</methodname>,
                    <methodname>debug()</methodname>, and <methodname>error()</methodname>
                    methods with a message.

                <programlisting># Tests Logging
                    # @goal logtest
                    # @phase validate
                    class LogTest &lt; Mojo

                    def execute
                    info "Prints an INFO message"
                    error "Prints an ERROR message"
                    debug "Prints to the Console"
                    end

                    end

                    run_mojo LogTest
                </programlisting>
            </section>

[[writing-plugins-alternative-sect-raising-mojo-error]]
=== Raising a MojoError

        If there is an unrecoverable error in a Ruby Mojo, you will need
                    to raise a <classname>MojoError</classname>. <xref
                                                                      linkend="ex-raise-ruby-error" /> shows you how to raise a
                    <classname>MojoError</classname>. This example mojo prints out a message
                    and then raises a <classname>MojoError</classname>.

                <example id="ex-raise-ruby-error">
                    <title>Raising a MojoError from a Ruby Mojo</title>

                    <programlisting># Prints a Message
                        # @goal error
                        # @phase validate
                        class Error &lt; Mojo

                        # @parameter type="java.lang.String" default-value="Hello Maven World" \
                        expression="\${message}"
                        # @required true
                        # @readonly false
                        # @deprecated false
                        def message
                        end

                        def execute
                        info $message
                        raise MojoError.new( "This Mojo Raised a MojoError" )
                        end

                        end

                        run_mojo Error
                    </programlisting>
                </example>

        Running this Mojo, produces the following output:

----
$ mvn firstruby:error
                    ...
                    INFO] [firstruby:error]
[INFO] Hello Maven World
                    [ERROR] This Mojo Raised a MojoError

----
            </section>

[[writing-plugins-alternative-sect-referencing-plexus-ruby]]
=== Referencing Plexus Components from JRuby

        A Ruby Mojo can depend on a Plexus component. To do this, you
                    would use the <varname>expression</varname> attribute of the
                    <classname>@parameter</classname> annotation to specify a role and a
                    hint for Plexus. The following example Ruby Mojo, depends upon an
                    Archiver component which Maven will retrieve from Plexus.

                <example>
                    <title>Depending on a Plexus Component from a Ruby Mojo</title>

                    <programlisting># This mojo tests plexus integration
                        # @goal testplexus
                        # @phase validate
                        class TestPlexus &lt; Mojo

                        # @parameter type="org.codehaus.plexus.archiver.Archiver" \
                        expression="\${component.org.codehaus.plexus.archiver.Archiver#zip}"
                        def archiver
                        end

                        def execute
                        info $archiver
                        end
                        end

                        run_mojo TestPlexus
                    </programlisting>
                </example>

        Please note that the attributes for an annotation in a Ruby Mojo
                    cannot span multiple lines. If you were to run this goal, you would see
                    Maven attempt to retrieve a component from Plexus with a role of
                    <varname>org.codehaus.plexus.arhiver.Archiver</varname> and a hint of
                    <varname>zip</varname>.
            </section>
        </section>
    </chapter>

[[web]]
== Web Development

This is a test

[[web-sect-running-war]]
=== Running a Web Application in a Servlet Container

==== Task

        You need to run a web application in a servlet container.
            </section>

==== Action

        Configure your web application's Maven project to inlcude the
                    Maven Jetty plugin as shown in the following POM:

                <programlisting db:wrap="force"
                                xmlns:db="http://discursive.com/plugins/docbook">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;groupId&gt;org.sonatype.mcookbook&lt;/groupId&gt;
                    &lt;artifactId&gt;sample-web&lt;/artifactId&gt;
                    &lt;packaging&gt;war&lt;/packaging&gt;
                    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                    &lt;name&gt;sample-web Maven Webapp&lt;/name&gt;
                    &lt;url&gt;http://maven.apache.org&lt;/url&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;junit&lt;/groupId&gt;
                    &lt;artifactId&gt;junit&lt;/artifactId&gt;
                    &lt;version&gt;3.8.1&lt;/version&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
                    &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
                    &lt;version&gt;2.5&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;build&gt;
                    &lt;finalName&gt;sample-web&lt;/finalName&gt;
                    &lt;plugins&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
                    &lt;version&gt;6.1.22&lt;/version&gt;
                    &lt;/plugin&gt;
                    &lt;/plugins&gt;
                    &lt;/build&gt;
                    &lt;/project&gt;
                </programlisting>

        To start the web application in Jetty, run the run goal from the
                    Maven Jetty plugin by running <command>mvn jetty:run</command>.

----

[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building sample-web Maven Webapp
[INFO]    task-segment: [jetty:run]
[INFO] ------------------------------------------------------------------------
[INFO] Preparing jetty:run
[INFO] [resources:resources {execution: default-resources}]
                    [WARNING] Using platform encoding (MacRoman actually) to copy filtered 
                    resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:compile {execution: default-compile}]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources {execution: default-testResources}]
                    [WARNING] Using platform encoding (MacRoman actually) to copy filtered 
                    resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory ~/maven-cookbook/
                    mcookbook-examples/web/sample-web/src/test/resources
[INFO] [compiler:testCompile {execution: default-testCompile}]
[INFO] No sources to compile
[INFO] [jetty:run {execution: default-cli}]
[INFO] Configuring Jetty for project: sample-web Maven Webapp
[INFO] Webapp source directory = ~/maven-cookbook/mcookbook-examples/web/
                    sample-web/src/main/webapp
[INFO] Reload Mechanic: automatic
[INFO] Classes = ~/maven-cookbook/mcookbook-examples/web/sample-web/
                    target/classes
                    2009-11-28 19:25:18.129:INFO::Logging to STDERR via org.mortbay.log.StdErrLog
[INFO] Context path = /sample-web
[INFO] Tmp directory =  determined at runtime
[INFO] Web defaults = org/mortbay/jetty/webapp/webdefault.xml
[INFO] Web overrides =  none
[INFO] web.xml file = ~/maven-cookbook/mcookbook-examples/web/sample-web/
                    src/main/webapp/WEB-INF/web.xml
[INFO] Webapp directory = ~/maven-cookbook/mcookbook-examples/web/sample-web
                    /src/main/webapp
[INFO] Starting jetty 6.1.22 ...
                    2009-11-28 19:25:18.231:INFO::jetty-6.1.22
                    2009-11-28 19:25:18.405:INFO::No Transaction manager found - if your webapp 
                    requires one, please configure one.
                    2009-11-28 19:25:18.800:INFO::Started SelectChannelConnector@0.0.0.0:8080
[INFO] Started Jetty Server
----

        At this point, you can use a web browser to navigate to <ulink
                                                                                   url="http://localhost:8080/sample-web/">http://localhost:8080/sample-web/</ulink>
                    to interact with the web application.
            </section>

==== Detail

        Consider a simple web application with a single index.jsp page
                    that contains a form, and a single Servlet that calculates a number from
                    the Fibonacci sequence.

                <example>
                    <title>Simple Form Accepting an Index to Pass to the Fibonacci
                        Servlet</title>

                    <programlisting db:wrap="force"
                                    xmlns:db="http://discursive.com/plugins/docbook">&lt;html&gt;
                        &lt;body&gt;
                        &lt;h2&gt;Fibonacci Page&lt;/h2&gt;
                        &lt;form action="fib" method="GET"&gt;
                        &lt;p&gt;Fetch Fibonacci Sequence Index:
                        &lt;input type="text" name="index" size="5"/&gt;&lt;/p&gt;
                        &lt;input type="submit" value="Calculate"/&gt;
                        &lt;/form&gt;
                        &lt;/body&gt;
                        &lt;/html&gt;
                    </programlisting>
                </example>

        The following class is the Servlet which calculates the Fibonacci
                    sequence. It takes a single parameter index and simply prints of the
                    number at the specified position of the Fibonacci sequence.

                <example>
                    <title>Fibonacci Servlet which Calculates a Number from the Fibonacci
                        Sequence</title>

                    <programlisting db:wrap="force"
                                    xmlns:db="http://discursive.com/plugins/docbook">package org.sonatype.mcookbook;

                        import java.io.IOException;
                        import java.util.Enumeration;

                        import javax.servlet.ServletException;
                        import javax.servlet.http.HttpServlet;
                        import javax.servlet.http.HttpServletRequest;
                        import javax.servlet.http.HttpServletResponse;

                        public class FibonacciServlet extends HttpServlet {

                        protected void doGet(HttpServletRequest req, HttpServletResponse resp)
                        throws ServletException, IOException {
                        int index = Integer.parseInt(req.getParameter("index"));
                        resp.getWriter().write( fib(index) + "" );
                        resp.getWriter().flush();
                        resp.getWriter().close();
                        }

                        public long fib(int n) {
                        if (n &lt;= 1) return n;
                        else return fib(n-1) + fib(n-2);
                        }
                        }
                    </programlisting>
                </example>

        The following web.xml configures the FibonacciServlet to respond
                    to the request path <filename>&lt;context&gt;/fib</filename>.

                <example>
                    <title>Web Application Descriptor for sample-web</title>

                    <programlisting db:wrap="force"
                                    xmlns:db="http://discursive.com/plugins/docbook">&lt;!DOCTYPE web-app PUBLIC
                        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
                        "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;

                        &lt;web-app&gt;
                        &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;
                        &lt;servlet&gt;
                        &lt;servlet-name&gt;fibonacci&lt;/servlet-name&gt;
                        &lt;servlet-class&gt;org.sonatype.mcookbook.FibonacciServlet&lt;/servlet-class&gt;
                        &lt;/servlet&gt;
                        &lt;servlet-mapping&gt;
                        &lt;servlet-name&gt;fibonacci&lt;/servlet-name&gt;
                        &lt;url-pattern&gt;/fib&lt;/url-pattern&gt;
                        &lt;/servlet-mapping&gt;
                        &lt;/web-app&gt;
                    </programlisting>
                </example>

        After running mvn:jetty, you can load the initial form by going to
                    http://localhost:8080/sample-web/index.jsp. Populating the form with an
                    index and pressing calculate will load the Fibonacci servlet and print
                    out the number at that position of the sequence.
            </section>
        </section>

=== Configuring a Servlet Container
    
        </section>

=== Starting a WAR Dependency in a Servlet Container

==== Task

        You need to configure Maven to download and start a web
                    application from a repository manager.
            </section>

==== Action

        Use the Maven Dependency plugin to copy the web application's WAR
                    artifact to your project. Then configure the Maven Jetty plugin to
                    execute the web application using the plugin's dependencies element to
                    configure the classpath for Jetty.

                <programlisting db:wrap="force"
                                xmlns:db="http://discursive.com/plugins/docbook">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;groupId&gt;org.sonatype.mcookbook&lt;/groupId&gt;
                    &lt;artifactId&gt;start-jackrabbit&lt;/artifactId&gt;
                    &lt;packaging&gt;jar&lt;/packaging&gt;
                    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                    &lt;name&gt;start-jackrabbit&lt;/name&gt;
                    &lt;build&gt;
                    &lt;plugins&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;
                    &lt;executions&gt;
                    &lt;execution&gt;
                    &lt;id&gt;default-cli&lt;/id&gt;<co id="web-co-run-war-1"
                                                        linkends="web-cr-run-war-1" />
                    &lt;configuration&gt;
                    &lt;artifactItems&gt;
                    &lt;artifactItem&gt;
                    &lt;groupId&gt;org.apache.jackrabbit&lt;/groupId&gt;
                    &lt;artifactId&gt;jackrabbit-webapp&lt;/artifactId&gt;
                    &lt;version&gt;1.6.0&lt;/version&gt;
                    &lt;type&gt;war&lt;/type&gt;
                    &lt;overWrite&gt;true&lt;/overWrite&gt;
                    &lt;destFileName&gt;jackrabbit-webapp.war&lt;/destFileName&gt;
                    &lt;/artifactItem&gt;
                    &lt;/artifactItems&gt;
                    &lt;outputDirectory&gt;
                    \${project.build.directory}/war
                    &lt;/outputDirectory&gt;
                    &lt;overWriteReleases&gt;true&lt;/overWriteReleases&gt;
                    &lt;overWriteSnapshots&gt;true&lt;/overWriteSnapshots&gt;
                    &lt;/configuration&gt;
                    &lt;/execution&gt;
                    &lt;/executions&gt;
                    &lt;/plugin&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
                    &lt;version&gt;6.1.22&lt;/version&gt;
                    &lt;executions&gt;
                    &lt;execution&gt;
                    &lt;id&gt;default-cli&lt;/id&gt;<co id="web-co-run-war-2"
                                                        linkends="web-cr-run-war-2" />
                    &lt;configuration&gt;
                    &lt;contextPath&gt;jackrabbit&lt;/contextPath&gt;
                    &lt;daemon&gt;false&lt;/daemon&gt;
                    &lt;webApp
                    \${project.build.directory}/war/jackrabbit-webapp.war
                    &lt;/webApp&gt;
                    &lt;/configuration&gt;
                    &lt;/execution&gt;
                    &lt;/executions&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt;<co id="web-co-run-war-3"
                                          linkends="web-cr-run-war-3" />
                    &lt;groupId&gt;org.apache.jackrabbit&lt;/groupId&gt;
                    &lt;artifactId&gt;jackrabbit-webapp&lt;/artifactId&gt;
                    &lt;version&gt;1.6.0&lt;/version&gt;
                    &lt;type&gt;war&lt;/type&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;javax.jcr&lt;/groupId&gt;
                    &lt;artifactId&gt;jcr&lt;/artifactId&gt;
                    &lt;version&gt;2.0&lt;/version&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/plugin&gt;
                    &lt;/plugins&gt;
                    &lt;/build&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt;<co id="web-co-run-war-4" linkends="web-cr-run-war-4" />
                    &lt;groupId&gt;org.apache.jackrabbit&lt;/groupId&gt;
                    &lt;artifactId&gt;jackrabbit-webapp&lt;/artifactId&gt;
                    &lt;version&gt;1.6.0&lt;/version&gt;
                    &lt;type&gt;war&lt;/type&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/project&gt;
                </programlisting>

        This POM uses some advanced concepts to configure the default
                    command-line options for both the Maven Dependency plugin and the Maven
                    Jetty plugin. It also downloads and executes the jackrabbit-webapp.war
                    artifact from the Central Maven repository.

                <calloutlist>
                    <callout arearefs="web-co-run-war-1" id="web-cr-run-war-1">
                This particular plugin configuration configures the default
                            command-line execution of a goal by using the default-cli
                            identifier. This configures the default configuration that is used
                            when a plugin goal is executed directly on the command-line (i.e.
                            mvn dependency:copy). In this section of the POM, the Maven
                            Dependency plugin is configured to download the Jackrabbit web
                            application artifact and to save this file in
                            \${project.build.directory}/war/jackrabbit-webapp.war.
                    </callout>

                    <callout arearefs="web-co-run-war-2" id="web-cr-run-war-2">
                Again, using the identifier of default-cli specifies the
                            configuration of the plugin when one of its goals is executed on the
                            command-line. This particular configuration points the Jetty plugin
                            at the downloaded jackrabbit-webapp.war file, sets the context path
                            to jackrabbit, and sets the daemon parameter to false. Setting
                            daemon to false will cause the Maven build to block and wait for the
                            Jetty process.
                    </callout>

                    <callout arearefs="web-co-run-war-3" id="web-cr-run-war-3">
                This dependencies element under the Maven Jetty plugin
                            configuration configures the classpath for the Jetty servlet
                            container. Without declaring these dependencies, the Jackrabbit web
                            application would not have access to the libraries that are required
                            for execution. Listing the jackrabbit-webapp artifact as a
                            dependency for this plugin execution causes Maven to read the POM
                            for this artifact and download all of the transitive dependencies of
                            the web application artifact. This element also adds in an
                            implementation of the Java Content Repository (JCR) API.
                    </callout>

                    <callout arearefs="web-co-run-war-3" id="web-cr-run-war-4">
                Even though this project is nothing more than a place-holder
                            project for the plugin configuration contained in the POM it does
                            declare a dependency on the jackrabbit-webapp artifact it requires
                            for execution. This particular dependency block is unnecessary, but
                            its presence helps to declare the explicit dependency for other
                            tools which may consume this POM.
                    </callout>
                </calloutlist>

        To download the Jackrabbit web application and execute it in
                    Jetty, copy the POM to an empty directory and run <command>mvn clean
                        dependency:copy jetty:run-war</command>. Because you've configured the
                    default command-line options in the POM, you should Maven downloading
                    Jackrabbit, all of its dependencies, and starting the application in
                    Jetty on port 8080.

----

[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building start-jackrabbit
[INFO]    task-segment: [clean, dependency:copy, jetty:run-war]
[INFO] ------------------------------------------------------------------------
[INFO] [clean:clean {execution: default-clean}]
[INFO] Deleting directory /Users/Tim/Library/Code/sonatype/maven-cookbook/mcookbook-examples/web/\
                    start-jackrabbit/target
[INFO] [dependency:copy {execution: default-cli}]
[INFO] Configured Artifact: org.apache.jackrabbit:jackrabbit-webapp:1.6.0:war
[INFO] Copying jackrabbit-webapp-1.6.0.war to /Users/Tim/Library/Code/sonatype/maven-cookbook/\
                    mcookbook-examples/web/start-jackrabbit/target/war/jackrabbit-webapp.war
                    ...
[INFO] [jetty:run-war {execution: default-cli}]
[INFO] Configuring Jetty for project: start-jackrabbit
                    2009-11-29 18:57:26.676:INFO::Logging to STDERR via org.mortbay.log.StdErrLog
[INFO] Context path = /jackrabbit
[INFO] Tmp directory =  determined at runtime
[INFO] Web defaults = org/mortbay/jetty/webapp/webdefault.xml
[INFO] Web overrides =  none
[INFO] Starting jetty 6.1.22 ...
                    2009-11-29 18:57:26.811:INFO::jetty-6.1.22
                    2009-11-29 18:57:26.845:INFO::Extract /Users/Tim/Library/Code/sonatype/maven-cookbook/mcookbook-examples/\
                    web/start-jackrabbit/target/war/jackrabbit-webapp.war to \
                    /Users/Tim/Library/Code/sonatype/maven-cookbook/mcookbook-examples/web/start-jackrabbit/target/\
                    work/webapp
                    2009-11-29 18:57:27.796:INFO::No Transaction manager found - if your webapp requires one, please configure one
                    29.11.2009 18:57:28 *INFO * root: Logging initialized. (LoggingServlet.java, line 87)
                    29.11.2009 18:57:28 *INFO * RepositoryStartupServlet: RepositoryStartupServlet initializing... 
                    (RepositoryStartupServlet.java, line 235)
                    29.11.2009 18:57:28 *ERROR* RepositoryStartupServlet: Repository startup configuration is not valid but a 
                    bootstrap config is specified. (RepositoryStartupServlet.java, line 366)
                    29.11.2009 18:57:28 *ERROR* RepositoryStartupServlet: Either create the jackrabbit/bootstrap.properties file 
                    or (RepositoryStartupServlet.java, line 367)
                    29.11.2009 18:57:28 *ERROR* RepositoryStartupServlet: use the '/config/index.jsp' for easy configuration. 
                    (RepositoryStartupServlet.java, line 368)
                    29.11.2009 18:57:28 *ERROR* RepositoryStartupServlet: RepositoryStartupServlet initializing failed: 
                    javax.servlet.ServletException: Repository startup configuration is not valid. 
                    (RepositoryStartupServlet.java, line 245)
                    29.11.2009 18:57:28 *INFO * RepositoryAccessServlet: RepositoryAccessServlet initialized. 
                    (RepositoryAccessServlet.java, line 98)
                    29.11.2009 18:57:28 *INFO * SimpleWebdavServlet: resource-path-prefix = '/repository' 
                    (SimpleWebdavServlet.java, line 145)
                    29.11.2009 18:57:28 *INFO * SimpleWebdavServlet: WWW-Authenticate header = 'Basic realm="Jackrabbit Webdav 
                    Server"' (SimpleWebdavServlet.java, line 151)
                    2009-11-29 18:57:28.982:INFO::Started SelectChannelConnector@0.0.0.0:8080
[INFO] Started Jetty Server

----

        Once Maven has started Jetty with the jackrabbit-webapp.war JAR,
                    go to a web browser and open <ulink
                                                      url="http://localhost:8080/jackrabbit">http://localhost:8080/jackrabbit</ulink>.
                    You should see the Apache Jackrabbit administrative web
                    interface.

                <note>
            The first time you start the Jackrabbit web application, it will
                        print an exception stack trace as it tries to locate a Jackrabbit
                        database. This stack trace disappears once you load the Jackrabbit
                        administrative interface and create a new Jackrabbit database.
                </note>

        While this isn't the most straightforward use of a Maven POM, it
                    does demonstrate the power of using Maven's dependency management and
                    plugin configuration to distribute the settings necessary to execute a
                    web application. If you used such a mechanism to distribute your own web
                    applications, you could configure a web application and all of the
                    information required to download your web application, it's
                    dependencies, the servlet container, and any configuration needed to run
                    your application.
            </section>
        </section>
    </chapter>

[[unit-testing]]
== Unit Testing with Maven

[[unit-testing-sect-intro]]
=== Introduction

    Maven can run Unit Tests, this chapter shows you how.
        </section>

[[unit-sect-junit-run]]
=== Running JUnit Tests

==== Task

        You need to run all JUnit tests in a given project.
            </section>

==== Action

        To execute all of the unit tests in a project, include JUnit as a
                    test scoped dependency in your project's pom.xml:

                <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;groupId&gt;org.sonatype.mcookbook&lt;/groupId&gt;
                    &lt;artifactId&gt;junit-tests&lt;/artifactId&gt;
                    &lt;packaging&gt;jar&lt;/packaging&gt;
                    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                    &lt;name&gt;junit-tests&lt;/name&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;junit&lt;/groupId&gt;
                    &lt;artifactId&gt;junit&lt;/artifactId&gt;
                    &lt;version&gt;4.5&lt;/version&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/project&gt;</programlisting>

        Your project should then store unit classes in the default
                    location of <filename>\${basedir}/src/test/java</filename>. The Maven Surefire plugin will
                    scan these directory for JUnit tests. In this example, a component named
                    SeriousComponent has a corresponding JUnit test named
                    SeriousComponentTest.

                <figure id="fig-unit_junit-directory-structure">
                    <title>Project Structure for Unit Tests</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/unit_junit-directory-structure.png" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata fileref="figs/print/osgi_osgi-project-filesystems.pdf" />
                        </imageobject>
                    </mediaobject>
                </figure>

        In this example, the simple component being tested is named
                    SeriousComponent. SeriousComponent contains a single static method to be
                    tested.

                <example>
                    <title>SeriousComponent class</title>

                    <programlisting>package org.sonatype.mcookbook;

                        public class SeriousComponent {

                        /**
                        * This function tests the seriousness of a String.
                        * Returns false if the string contains the word
                        * "FUNNY", returns true otherwise.
                        */
                        public static boolean testSeriousness( String text ) {
                        return !text.toUpperCase().contains( "FUNNY" );
                        }
                        }</programlisting>
                </example>

        This class is tested by a simple JUnit test - SeriousComponentTest
                    shown in the following exmple:

                <example>
                    <title>JUnit test for SeriousComponent</title>

                    <programlisting>package org.sonatype.mcookbook;

                        import junit.framework.TestCase;

                        public class SeriousComponentTest extends TestCase {

                        public SeriousComponentTest(String name) {
                        super( name );
                        }

                        public void testSeriousness() throws Exception {
                        assertTrue( SeriousComponent.testSeriousness( "SAD" ) );
                        assertTrue( SeriousComponent.testSeriousness( "SERIOUS" ) );
                        assertTrue( SeriousComponent.testSeriousness( "CRAZY" ) );
                        assertTrue( !SeriousComponent.testSeriousness( "FUNNY" ) );
                        }
                        }</programlisting>
                </example>

        To execute your unit test, you don't need to do anything. Maven's
                    default settings are to scan <filename>\${basedir}/src/test/java</filename> for unit tests
                    matching the pattern <filename>*Test.java</filename>. To run your unit
                    test specify the test phase of the default Maven lifecycle and run
                    <command>mvn test</command>.

----

[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building junit-tests
[INFO]    task-segment: [test]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources {execution: default-resources}]
                    [WARNING] Using platform encoding (MacRoman actually) to copy filtered 
                    resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:compile {execution: default-compile}]
[INFO] Compiling 1 source file to /Users/Tim/Library/Code/sonatype/
                    maven-cookbook/mcookbook-examples/unit/junit-tests/target/classes
[INFO] [resources:testResources {execution: default-testResources}]
                    [WARNING] Using platform encoding (MacRoman actually) to copy filtered 
                    resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:testCompile {execution: default-testCompile}]
[INFO] Compiling 1 source file to /Users/Tim/Library/Code/sonatype/
                    maven-cookbook/mcookbook-examples/unit/junit-tests/target/test-classes
[INFO] [surefire:test {execution: default-test}]
[INFO] Surefire report directory: /Users/Tim/Library/Code/sonatype/
                    maven-cookbook/mcookbook-examples/unit/junit-tests/target/surefire-reports

                    -------------------------------------------------------
                    T E S T S
                    -------------------------------------------------------
                    Running org.sonatype.mcookbook.SeriousComponentTest
                    Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.065 sec

                    Results :

                    Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 5 seconds
[INFO] Finished at: Wed Nov 25 14:42:39 CST 2009
[INFO] Final Memory: 17M/80M
[INFO] ------------------------------------------------------------------------
----
            </section>

==== Detail

        The test results will be made available in
                    <filename>\${basedir}/target/surefire-reports</filename> as both an XML file and a text
                    file.

                <figure id="fig-unit_junit-directory-structure-results">
                    <title>Project Structure for JUnit Test Results</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/unit_junit-directory-structure-results.png" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata fileref="figs/web/unit_junit-directory-structure-results.pdf" />
                        </imageobject>
                    </mediaobject>
                </figure>

        The TEST-org.sonatype.mcookbook.SeriousComponentTest.xml contains
                    an XML document describing the environment and state of the JVM in
                    addition to data about the test cases which have been executed, and the
                    org.sonatype.mcookbook.SeriousComponentTest.txt file a summary of a
                    successful test or output that contains stack traces generated by a test
                    failure.

        If your unit test passes, the
                    org.sonatypemcookbook.SeriousComponentTest.txt will contain the
                    following output:

                <programlisting>$ <command>cd target/surefire-reports/</command>
                    $ <command>more org.sonatype.mcookbook.SeriousComponentTest.txt</command> 
                    -------------------------------------------------------------------------------
                    Test set: org.sonatype.mcookbook.SeriousComponentTest
                    -------------------------------------------------------------------------------
                    Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.065 sec</programlisting>

        If the unit test fails the same file will contain a stack trace
                    that points to a failed assertion on a specific line of the unit test as
                    shown below:

                <programlisting>-------------------------------------------------------------------------------
                    Test set: org.sonatype.mcookbook.SeriousComponentTest
                    -------------------------------------------------------------------------------
                    Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.062 sec 
                    &lt;&lt;&lt; FAILURE!
                    testSeriousness(org.sonatype.mcookbook.SeriousComponentTest)  Time elapsed: 
                    0.017 sec  &lt;&lt;&lt; FAILURE!
                    junit.framework.AssertionFailedError: null
                    at junit.framework.Assert.fail(Assert.java:47)
                    at junit.framework.Assert.assertTrue(Assert.java:20)
                    at junit.framework.Assert.assertTrue(Assert.java:27)
                    at org.sonatype.mcookbook.SeriousComponentTest.testSeriousness(
                    SeriousComponentTest.java:15)
                    ....</programlisting>
            </section>
        </section>

=== Running TestNG Tests

==== Task

        You need to run all TestNG tests in a given project.
            </section>

==== Action

        To use TestNG, you will need to add TestNG as a dependency in your
                    project's POM. Since the TestNG unit test shown in this section uses
                    Java 5 annotation, you will also need to configure the Maven Compiler
                    plugin to target Java 5. The following POM shows the minimum required
                    configuration for running TestNG tests with Java 5 annotations.

                <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;groupId&gt;org.sonatype.mcookbook&lt;/groupId&gt;
                    &lt;artifactId&gt;testng-tests&lt;/artifactId&gt;
                    &lt;packaging&gt;jar&lt;/packaging&gt;
                    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                    &lt;name&gt;testng-tests&lt;/name&gt;
                    &lt;build&gt;
                    &lt;plugins&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;source&gt;1.5&lt;/source&gt;
                    &lt;target&gt;1.5&lt;/target&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;
                    &lt;/plugins&gt;
                    &lt;/build&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.testng&lt;/groupId&gt;
                    &lt;artifactId&gt;testng&lt;/artifactId&gt;
                    &lt;version&gt;5.10&lt;/version&gt;
                    &lt;classifier&gt;jdk15&lt;/classifier&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/project&gt;
                </programlisting>

        You would then put your TestNG unit test classses in the
                    <filename>\${basedir}/src/test/java</filename> directory. The following
                    TestNG test uses Java 5 annotations to mark a class and a method as a
                    TestNG test. The following TestNG unit test duplicates the JUnit test
                    shown in <xref linkend="unit-sect-junit-run" />, and it tests the
                    SeriousComponent class.

                <example>
                    <title>TestNG Test for the SeriousComponent</title>

                    <programlisting>package org.sonatype.mcookbook;

                        import org.testng.annotations.Test;

                        @Test
                        public class SeriousComponentTest {

                        @Test
                        public void testSeriousness() throws Exception {
                        assert SeriousComponent.testSeriousness("SAD");
                        assert SeriousComponent.testSeriousness("SERIOUS");
                        assert SeriousComponent.testSeriousness("CRAZY");
                        assert !SeriousComponent.testSeriousness("FUNNY");
                        }
                        }</programlisting>
                </example>

        There is no other configuration necessary to have Maven execute
                    any TestNG tests it locates under <filename>\${basedir}/src/test/java</filename> which match
                    the pattern <filename>*Test.java</filename>. Running <command>mvn
                        test</command> will execute your TestNG unit tests.

----

[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building testng-tests
[INFO]    task-segment: [test]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources {execution: default-resources}]
                    [WARNING] Using platform encoding (MacRoman actually) to copy filtered 
                    resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:compile {execution: default-compile}]
[INFO] Compiling 1 source file to /Users/Tim/Library/Code/sonatype/
                    maven-cookbook/mcookbook-examples/unit/testng-tests/target/classes
[INFO] [resources:testResources {execution: default-testResources}]
                    [WARNING] Using platform encoding (MacRoman actually) to copy filtered 
                    resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:testCompile {execution: default-testCompile}]
[INFO] Compiling 1 source file to /Users/Tim/Library/Code/sonatype/
                    maven-cookbook/mcookbook-examples/unit/testng-tests/target/test-classes
[INFO] [surefire:test {execution: default-test}]
[INFO] Surefire report directory: /Users/Tim/Library/Code/sonatype/
                    maven-cookbook/mcookbook-examples/unit/testng-tests/target/surefire-reports

                    -------------------------------------------------------
                    T E S T S
                    -------------------------------------------------------
                    Running TestSuite
                    Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.292 sec

                    Results :

                    Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 4 seconds
[INFO] Finished at: Thu Nov 26 08:24:02 CST 2009
[INFO] Final Memory: 17M/80M
[INFO] ------------------------------------------------------------------------

----
            </section>

==== Detail

        Once the TestNG unit tests have been executed, you will have a
                    TestNG HTML report under
                    <filename>\${basedir}/target/surfire-reports/index.html</filename>. To
                    view a report which displays statistics about which tests failed and
                    which tests passed, load this HTML page in a web browser.

                <figure id="fig-unit_testng-directory-structure-results">
                    <title>Project Structure for TestNG Test Results</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/unit_testng-directory-structure-results.png" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata fileref="figs/web/unit_testng-directory-structure-results.pdf" />
                        </imageobject>
                    </mediaobject>
                </figure>
            </section>
        </section>

=== Running Specific TestNG Test Groups

==== Task

        You want to configure the Maven Surefire plugin to run specific
                    tests that are defined in a TestNG Test Suite XML descriptor.
            </section>

==== Action

        Consider a TestNG test class which contains five methods with the
                    @Test annotation. Each method also configures the groups parameter. Four
                    methods are in the "unit" group and one method is in the "integration"
                    group. This might be a common situation for a project that contains
                    different kinds of tests that are to be run during different times of
                    the software development lifecycle. Very often, there is a set of tests
                    that should be run every time a programmer makes a change to source
                    code. There may also be a certain kind of test that can only be executed
                    on a specific integration and testing machine, and there can be other
                    tests which require too much time and resources to be associated with a
                    developer's daily development cycle.

        Here is the SeriousComponentTest with five annotated test
                    methods:

                <programlisting>package org.sonatype.mcookbook;

                    import org.testng.annotations.Test;

                    public class SeriousComponentTest {

                    @Test(groups={"unit"})
                    public void testSad() throws Exception {
                    assert SeriousComponent.testSeriousness("SAD");
                    }

                    @Test(groups={"unit"})
                    public void testSerious() throws Exception {
                    assert SeriousComponent.testSeriousness("SERIOUS");
                    }

                    @Test(groups={"unit"})
                    public void testCrazy() throws Exception {
                    assert SeriousComponent.testSeriousness("CRAZY");
                    }

                    @Test(groups={"unit"})
                    public void testFunny() throws Exception {
                    assert !SeriousComponent.testSeriousness("FUNNY");
                    }

                    @Test(groups={"integration"})
                    public void testLargeFile() throws Exception {
                    String text = "TEST";
                    // Imagine that this method contained some serious
                    // code that loaded a 100k line text file and
                    // tested each line.
                    assert SeriousComponent.testSeriousness(text);
                    }
                    }</programlisting>

        The first four methods are executed quickly as unit tests, but the
                    last method requires more time to execute, and if going to be run
                    periodically by a continuous integration server like Hudson. To make the
                    development cycle more efficient for your developers, you would add the
                    following Maven Surefire plugin configuration to your project's POM.
                    Specifying the groups parameter allows you to select one or more,
                    comma-separate group names which will be executed by TestNG.

                <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;groupId&gt;org.sonatype.mcookbook&lt;/groupId&gt;
                    &lt;artifactId&gt;testng-groups&lt;/artifactId&gt;
                    &lt;packaging&gt;jar&lt;/packaging&gt;
                    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                    &lt;name&gt;testng-groups&lt;/name&gt;
                    &lt;build&gt;
                    &lt;plugins&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;source&gt;1.5&lt;/source&gt;
                    &lt;target&gt;1.5&lt;/target&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;groups&gt;unit&lt;/groups&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;
                    &lt;/plugins&gt;
                    &lt;/build&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.testng&lt;/groupId&gt;
                    &lt;artifactId&gt;testng&lt;/artifactId&gt;
                    &lt;version&gt;5.10&lt;/version&gt;
                    &lt;classifier&gt;jdk15&lt;/classifier&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/project&gt;
                </programlisting>

        When you execute <command>mvn test</command>, you will see that
                    the Maven Surefire plugin will only execute four of the five tests in
                    SeriousComponentTest.
            </section>

==== Detail

        If you wanted to run all tests in the SeriousComponentTest, you
                    could configure your POM to have the following Maven Surefire
                    configuration:

                <programlisting>      &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;groups&gt;unit, integration&lt;/groups&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;</programlisting>

        Alternatively, you could just define a dependency on the "unit"
                    group withint the SeriousComponentTest class on the testLargeFile()
                    method. Here's the annotation syntax you would use to do this:

                <programlisting>  @Test(groups={"integration"}, dependsOnGroups={"unit"})
                    public void testLargeFile() throws Exception {
                    String text = "TEST";
                    // Imagine that this method contained some serious
                    // code that loaded a 100k line text file and
                    // tested each line.
                    assert SeriousComponent.testSeriousness(text);
                    }
                </programlisting>

        Then, in your project's POM, you would simply configure TestNG to
                    run the "integration" group. TestNG would take note of the dependency
                    defined in the test class and execute the "unit" group before the
                    "integration" group.

                <programlisting>      &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;groups&gt;integration&lt;/groups&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;</programlisting>

        TestNG supports a very rich set of configuration possibilities for
                    defining groups. You can have groups which depend on other groups,
                    groups can be defined in Test Suite XML files, and you can match groups
                    based on regular expressions to allow for platform specific
                    customizations. Getting into the details of TestNG groups is well beyond
                    the scope of this book, if you would like more information about TestNG,
                    please see the TestNG project documentation here: <ulink
                                                                           url="http://testng.org/doc/documentation-main.html#test-groups">http://testng.org/doc/documentation-main.html#test-groups</ulink>.
            </section>
        </section>

=== Configuring TestNG Tests

==== Task

        You need to pass configuration parameters to TestNG unit
                    tests.
            </section>

==== Action

        Consider the following TestNG unit test which declares the
                    parameter "databaseHostname" using the @Parameters annotation.

                <programlisting>package org.sonatype.mcookbook;

                    import org.testng.annotations.Parameters;
                    import org.testng.annotations.Test;

                    @Test
                    public class SeriousComponentTest {

                    @Parameters({"databaseHostname"})
                    @Test
                    public void testSeriousness(String databaseHostname) throws Exception {
                    assert SeriousComponent.testSeriousness("SAD");
                    assert SeriousComponent.testSeriousness("SERIOUS");
                    assert SeriousComponent.testSeriousness("CRAZY");
                    assert !SeriousComponent.testSeriousness("FUNNY");
                    System.out.println( "Database Hostname: " + databaseHostname );
                    }
                    }</programlisting>

        This "databaseHostname" parameter can be configured by using the
                    systemProperties configuration parameter of the Maven Surefire plugin.
                    The following POM passes in a value of "testDb01" for the
                    "databaseHostname" test parameter.

                <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;groupId&gt;org.sonatype.mcookbook&lt;/groupId&gt;
                    &lt;artifactId&gt;testng-config&lt;/artifactId&gt;
                    &lt;packaging&gt;jar&lt;/packaging&gt;
                    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                    &lt;name&gt;testng-config&lt;/name&gt;
                    &lt;build&gt;
                    &lt;plugins&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;source&gt;1.5&lt;/source&gt;
                    &lt;target&gt;1.5&lt;/target&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;systemProperties&gt;
                    &lt;property&gt;
                    &lt;name&gt;databaseHostname&lt;/name&gt;
                    &lt;value&gt;testDb01&lt;/value&gt;
                    &lt;/property&gt;
                    &lt;/systemProperties&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;
                    &lt;/plugins&gt;
                    &lt;/build&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.testng&lt;/groupId&gt;
                    &lt;artifactId&gt;testng&lt;/artifactId&gt;
                    &lt;version&gt;5.10&lt;/version&gt;
                    &lt;classifier&gt;jdk15&lt;/classifier&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;

                    &lt;/project&gt;
                </programlisting>

        Running the test phase will execute the unit test passing the
                    value from the POM to the unit test as a system property.

----

[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building testng-config
[INFO]    task-segment: [test]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources {execution: default-resources}]
                    [WARNING] Using platform encoding (MacRoman actually) to copy filtered 
                    resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:compile {execution: default-compile}]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources {execution: default-testResources}]
                    [WARNING] Using platform encoding (MacRoman actually) to copy filtered 
                    resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:testCompile {execution: default-testCompile}]
[INFO] Compiling 1 source file to /Users/Tim/Library/Code/sonatype/
                    maven-cookbook/mcookbook-examples/unit/testng-config/target/test-classes
[INFO] [surefire:test {execution: default-test}]
[INFO] Surefire report directory: /Users/Tim/Library/Code/sonatype/
                    maven-cookbook/mcookbook-examples/unit/testng-config/target/surefire-reports

                    -------------------------------------------------------
                    T E S T S
                    -------------------------------------------------------
                    Running TestSuite
                    Database Hostname: testDb01
                    Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.358 sec

                    Results :

                    Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 4 seconds
[INFO] Finished at: Thu Nov 26 13:32:44 CST 2009
[INFO] Final Memory: 17M/80M
[INFO] ------------------------------------------------------------------------
----
            </section>

==== Detail

        For more information about TestNG parameters, see the TestNG
                    project documentation here: <ulink
                                                     url="http://testng.org/doc/documentation-main.html#parameters">http://testng.org/doc/documentation-main.html#parameters</ulink>.
            </section>
        </section>

=== Running TestNG Tests in Parallel

==== Task

        You would like to run your unit tests in parallel to speed up your
                    builds.
            </section>

==== Action

        To illustrate executing tests in parallel, we can create a
                    component to be tests that sleeps for 5 seconds. The following listing
                    is the SeriousComponent.java class which would be stored in
                    <filename>\${basedir}/src/main/java</filename> under the org.sonatype.mcookbook
                    package:

                <programlisting>package org.sonatype.mcookbook;

                    public class SeriousComponent {

                    /**
                    * This function tests the seriousness of a String.
                    * Returns false if the string contains the word
                    * "FUNNY", returns truje otherwise.
                    */
                    public static boolean testSeriousness( String text ) {
                    try {
                    Thread.sleep( 5000 );
                    } catch (InterruptedException e) {
                    }
                    return !text.toUpperCase().contains( "FUNNY" );
                    }
                    }</programlisting>

        This class has a single static method which sleeps for five
                    seconds and then tests a string for the presence of the word "funny". To
                    test this class, there is a SeriousComponentTest.java class in
                    <filename>\${basedir}/src/test/java</filename> under the
                    org.sonatype.mcookbook package which contains the following four test
                    methods:

                <programlisting>package org.sonatype.mcookbook;

                    import org.testng.annotations.Test;

                    @Test
                    public class SeriousComponentTest {

                    @Test
                    public void testSad() throws Exception {
                    assert SeriousComponent.testSeriousness("SAD");
                    }

                    @Test
                    public void testSerious() throws Exception {
                    assert SeriousComponent.testSeriousness("SERIOUS");
                    }

                    @Test
                    public void testCrazy() throws Exception {
                    assert SeriousComponent.testSeriousness("CRAZY");
                    }

                    @Test
                    public void testFunny() throws Exception {
                    assert !SeriousComponent.testSeriousness("FUNNY");
                    }
                    }</programlisting>

        If you ran this test in a single thread, it would take
                    approximately 20 seconds to execute. To speed up your build, configure
                    Maven to execute each test method in parallel and set the available
                    thread count for parallel test execution to 4. To do this, add the
                    following plugin configuration to your project's POM.

                <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;groupId&gt;org.sonatype.mcookbook&lt;/groupId&gt;
                    &lt;artifactId&gt;testng-parallel&lt;/artifactId&gt;
                    &lt;packaging&gt;jar&lt;/packaging&gt;
                    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                    &lt;name&gt;testng-tests&lt;/name&gt;
                    &lt;build&gt;
                    &lt;plugins&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;source&gt;1.5&lt;/source&gt;
                    &lt;target&gt;1.5&lt;/target&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;parallel&gt;methods&lt;/parallel&gt;
                    &lt;threadCount&gt;4&lt;/threadCount&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;
                    &lt;/plugins&gt;
                    &lt;/build&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.testng&lt;/groupId&gt;
                    &lt;artifactId&gt;testng&lt;/artifactId&gt;
                    &lt;version&gt;5.10&lt;/version&gt;
                    &lt;classifier&gt;jdk15&lt;/classifier&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/project&gt;
                </programlisting>

        Execute the TestNG test in parallel by running <command>mvn
                        test</command> and take note of the time it takes to execute all four
                    tests.

----

[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building testng-tests
[INFO]    task-segment: [test]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources {execution: default-resources}]
                    [WARNING] Using platform encoding (MacRoman actually) to copy filtered 
                    resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:compile {execution: default-compile}]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources {execution: default-testResources}]
                    [WARNING] Using platform encoding (MacRoman actually) to copy filtered 
                    resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:testCompile {execution: default-testCompile}]
[INFO] Nothing to compile - all classes are up to date
[INFO] [surefire:test {execution: default-test}]
[INFO] Surefire report directory: /Users/Tim/Library/Code/sonatype/
                    maven-cookbook/mcookbook-examples/unit/testng-parallel/target/surefire-reports

                    -------------------------------------------------------
                    T E S T S
                    -------------------------------------------------------
                    Running TestSuite
                    Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.342 sec

                    Results :

                    Tests run: 4, Failures: 0, Errors: 0, Skipped: 0

----

        You can see that the execution of four tests took a total of 5.342
                    sec. This is a clear indication that the tests were being run in
                    parallel given the fact that the function being tested has a 5 second
                    sleep built-in. Now, change the parallel configuration parameter to
                    "classes" and rerun the test. Find the Maven Surefire plugin
                    configuration in the project's POM and change the configuration to
                    this:

                <programlisting>      &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;parallel&gt;classes&lt;/parallel&gt;
                    &lt;threadCount&gt;4&lt;/threadCount&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;</programlisting>

        Now, run <command>mvn test</command> and notice how long it takes
                    to run the unit tests - 20 seconds. When you run the tests in parallel
                    using classes, TestNG is going to create an independent test execution
                    thread for each class. The four test methods in SeriousComponentTest are
                    going to be executed in one, single thread instead of the four
                    simultaneous threads that were used when the parallel configuration
                    parameter was set to "methods".

----

[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building testng-tests
[INFO]    task-segment: [test]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources {execution: default-resources}]
                    [WARNING] Using platform encoding (MacRoman actually) to copy filtered 
                    resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:compile {execution: default-compile}]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources {execution: default-testResources}]
                    [WARNING] Using platform encoding (MacRoman actually) to copy filtered 
                    resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:testCompile {execution: default-testCompile}]
[INFO] Nothing to compile - all classes are up to date
[INFO] [surefire:test {execution: default-test}]
[INFO] Surefire report directory: /Users/Tim/Library/Code/sonatype/
                    maven-cookbook/mcookbook-examples/unit/testng-parallel/target/surefire-reports

                    -------------------------------------------------------
                    T E S T S
                    -------------------------------------------------------
                    Running TestSuite
                    Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 20.411 sec

                    Results :

                    Tests run: 4, Failures: 0, Errors: 0, Skipped: 0

----
            </section>

==== Detail

        If waiting around for your unit tests is eating up too much of
                    your time, this is a great way to make your builds a bit faster.

        You use the following values in the parallel configuration
                    parmeter:

                <variablelist>
                    <varlistentry>
                        <term>classes</term>

                        <listitem>
                    Each test class will be executed in an independent execution
                                thread.
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term>methods</term>

                        <listitem>
                    Each test method will be run as an independent test in a
                                separate thread. Note that if one method states and explicit
                                dependency on another method, TestNG will note the dependency and
                                execute both methods in the same Thread.
                        </listitem>
                    </varlistentry>

                    <varlistentry>
                        <term>tests</term>

                        <listitem>
                    If you use a TestNG Suite XML file and you list a test
                                element that groups a number of related tests, listing test in the
                                parallel configuration element will configure TestNG to use a
                                separate thread for each &lt;test&gt; element. This option is only
                                relevant if you have configured the Maven Surefire plugin to use a
                                custom TestNG Suite XML file with one or more &lt;test&gt;
                                elements.
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>
        </section>

=== Skipping Unit Tests

==== Task

        You need to skip unit tests in a Maven build.
            </section>

==== Action

        To skip unit tests in a Maven build, pass a value of true to the
                    parameter maven.test.skip to Maven on the command line.

----

[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building testng-groups
[INFO]    task-segment: [install]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources {execution: default-resources}]
                    [WARNING] Using platform encoding (MacRoman actually) to copy filtered 
                    resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:compile {execution: default-compile}]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources {execution: default-testResources}]
                    [WARNING] Using platform encoding (MacRoman actually) to copy filtered 
                    resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:testCompile {execution: default-testCompile}]
[INFO] Not compiling test sources
[INFO] [surefire:test {execution: default-test}]
[INFO] Tests are skipped.
[INFO] [jar:jar {execution: default-jar}]
[INFO] Building jar: /Users/Tim/Library/Code/sonatype/maven-cookbook/
                    mcookbook-examples/unit/testng-groups/target/testng-groups-1.0-SNAPSHOT.jar
[INFO] [install:install {execution: default-install}]
[INFO] Installing /Users/Tim/Library/Code/sonatype/maven-cookbook/
                    mcookbook-examples/unit/testng-groups/target/testng-groups-1.0-SNAPSHOT.jar 
                    to /Users/Tim/.m2/repository/org/sonatype/mcookbook/testng-groups/
                    1.0-SNAPSHOT/testng-groups-1.0-SNAPSHOT.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 4 seconds
[INFO] Finished at: Thu Nov 26 12:32:14 CST 2009
[INFO] Final Memory: 15M/80M
[INFO] ------------------------------------------------------------------------
----
            </section>

==== Detail

        If you need to configure a Maven build to skip tests, you would
                    add the following Maven Surefire configuration.

                <programlisting>     &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;skip&gt;true&lt;/skip&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;</programlisting>
            </section>
        </section>

=== Running a Single Unit Test

==== Task

        You want to run a single test class from a Maven project.
            </section>

==== Action

        To run a specific unit test in a Maven build, pass the name of the
                    test class to the parameter test on the command line.

----

[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building testng-groups
[INFO]    task-segment: [test]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources {execution: default-resources}]
                    [WARNING] Using platform encoding (MacRoman actually) to copy filtered 
                    resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:compile {execution: default-compile}]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources {execution: default-testResources}]
                    [WARNING] Using platform encoding (MacRoman actually) to copy filtered 
                    resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:testCompile {execution: default-testCompile}]
[INFO] Nothing to compile - all classes are up to date
[INFO] [surefire:test {execution: default-test}]
[INFO] Surefire report directory: /Users/Tim/Library/Code/sonatype/
                    maven-cookbook/mcookbook-examples/unit/testng-groups/target/surefire-reports

                    -------------------------------------------------------
                    T E S T S
                    -------------------------------------------------------
                    Running TestSuite
                    Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.466 sec

                    Results :

                    Tests run: 5, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 5 seconds
[INFO] Finished at: Thu Nov 26 13:01:58 CST 2009
[INFO] Final Memory: 11M/80M
[INFO] ------------------------------------------------------------------------

----
            </section>
        </section>
    </chapter>

[[int-testing]]
== Integration Testing with Maven

[[int-testing-sect-intro]]
=== Introduction

    This chapter covers integration testing with Maven.
        </section>

=== Running a Selenium Test

==== Task

        You need to write a Selenium test to test a web application or a
                    web site.
            </section>

==== Action

        Selenium is a very straightforward way to test a web application,
                    you can write a unit test in any number of languages and then use the
                    Selenium Remote Control to automate a browser and perform assertions
                    about the presence of text or UI elements in a page. This recipe uses a
                    TestNG test which includes the appropriate Selenium code to test a well
                    known web site: http://www.twitter.com. In a Maven project devoted to
                    integration testing, the following test class connects to a Twitter user
                    page and verifies the correct user name.

                <example>
                    <title>TwitterTest a Selenium Test written in TestNG</title>

                    <programlisting>package org.sonatype.mcookbook;

                        import org.testng.annotations.AfterClass;
                        import org.testng.annotations.BeforeClass;
                        import org.testng.annotations.Parameters;
                        import org.testng.annotations.Test;

                        import com.thoughtworks.selenium.DefaultSelenium;
                        import com.thoughtworks.selenium.Selenium;
                        import com.thoughtworks.selenium.SeleniumException;

                        public class TwitterTest {

                        private Selenium selenium;

                        @BeforeClass
                        public void startSelenium() {
                        this.selenium = new DefaultSelenium("localhost", 4444, "*safari",
                        "http://www.twitter.com");
                        this.selenium.start();
                        }

                        @Test
                        @Parameters( { "user", "name" })
                        public void testTwitter(String user, String name) {
                        try {
                        selenium.open("http://www.twitter.com/" + user);
                        selenium.waitForPageToLoad("3000");
                        assert selenium.isTextPresent(name);

                        } catch (SeleniumException e) {
                        throw e;
                        }
                        }

                        @AfterClass(alwaysRun = true)
                        public void stopSelenium() {
                        this.selenium.stop();
                        }

                        }
                    </programlisting>
                </example>

        The following POM contains the following configuration to
                    configure the Selenium server and the Selenium integration tests:

                <itemizedlist>
                    <listitem>
                The Maven Surefire plugin is configured to skip tests. This
                            will prevent the Surefire plugin from executing any unit tests
                            during the test phase.
                    </listitem>

                    <listitem>
                An execution of the Surefire plugin is configured not to skip
                            tests during the integration-test phase. This configuration coupled
                            with the previous configuration simply moves the execution of the
                            tests into the integration-test phase of the lifecycle.
                    </listitem>

                    <listitem>
                The user and name properties that the testTwitter() method
                            relies upon are configured via the systemProperties configuration
                            parameter of the Maven Surefire plugin.
                    </listitem>

                    <listitem>
                The Selenium Maven plugin's start-server goal is configured to
                            run in the pre-integration-test phase. This has the effect of
                            starting Selenium before the Surefire plugin executes the
                            integration tests. No configuration options are passed to the
                            start-server goal so Selenium will be started on a default port of
                            4444.
                    </listitem>

                    <listitem>
                A dependency on selenium-java-client-driver exposes the
                            Selenium API to the test cases and allows the Surefire test to
                            interact with the Selenium server.
                    </listitem>
                </itemizedlist>

                <example>
                    <title>POM configuring SureFire to Execute Selenium Remote
                        Control</title>

                    <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                        http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                        &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                        &lt;groupId&gt;org.sonatype.mcookbook&lt;/groupId&gt;
                        &lt;artifactId&gt;selenium-reddit&lt;/artifactId&gt;
                        &lt;packaging&gt;jar&lt;/packaging&gt;
                        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                        &lt;name&gt;selenium-reddit&lt;/name&gt;
                        &lt;build&gt;
                        &lt;plugins&gt;
                        &lt;plugin&gt;
                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                        &lt;configuration&gt;
                        &lt;source&gt;1.5&lt;/source&gt;
                        &lt;target&gt;1.5&lt;/target&gt;
                        &lt;/configuration&gt;
                        &lt;/plugin&gt;
                        &lt;plugin&gt;
                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                        &lt;configuration&gt;
                        &lt;skip&gt;true&lt;/skip&gt;
                        &lt;systemProperties&gt;
                        &lt;property&gt;
                        &lt;name&gt;user&lt;/name&gt;
                        &lt;value&gt;tobrien&lt;/value&gt;
                        &lt;/property&gt;
                        &lt;property&gt;
                        &lt;name&gt;name&lt;/name&gt;
                        &lt;value&gt;Tim O'Brien&lt;/value&gt;
                        &lt;/property&gt;
                        &lt;/systemProperties&gt;
                        &lt;/configuration&gt;
                        &lt;executions&gt;
                        &lt;execution&gt;
                        &lt;phase&gt;integration-test&lt;/phase&gt;
                        &lt;goals&gt;
                        &lt;goal&gt;test&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                        &lt;skip&gt;false&lt;/skip&gt;
                        &lt;/configuration&gt;
                        &lt;/execution&gt;
                        &lt;/executions&gt;
                        &lt;/plugin&gt;
                        &lt;plugin&gt;
                        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                        &lt;artifactId&gt;selenium-maven-plugin&lt;/artifactId&gt;
                        &lt;executions&gt;
                        &lt;execution&gt;
                        &lt;phase&gt;pre-integration-test&lt;/phase&gt;
                        &lt;goals&gt;
                        &lt;goal&gt;start-server&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                        &lt;background&gt;true&lt;/background&gt;
                        &lt;/configuration&gt;
                        &lt;/execution&gt;
                        &lt;/executions&gt;
                        &lt;/plugin&gt;
                        &lt;/plugins&gt;
                        &lt;/build&gt;
                        &lt;dependencies&gt;
                        &lt;dependency&gt;
                        &lt;groupId&gt;org.testng&lt;/groupId&gt;
                        &lt;artifactId&gt;testng&lt;/artifactId&gt;
                        &lt;version&gt;5.10&lt;/version&gt;
                        &lt;classifier&gt;jdk15&lt;/classifier&gt;
                        &lt;scope&gt;test&lt;/scope&gt;
                        &lt;/dependency&gt;
                        &lt;dependency&gt;
                        &lt;groupId&gt;org.seleniumhq.selenium.client-drivers&lt;/groupId&gt;
                        &lt;artifactId&gt;selenium-java-client-driver&lt;/artifactId&gt;
                        &lt;version&gt;1.0.1&lt;/version&gt;
                        &lt;scope&gt;test&lt;/scope&gt;
                        &lt;/dependency&gt;
                        &lt;/dependencies&gt;
                        &lt;/project&gt;
                    </programlisting>
                </example>

If you run Maven to the integration-test phase, Maven will start the Selenium server before it executes the integration-test phase. In the output shown below, the section that starts with selenium:start-server is the pre-integration-test execution of the start-server goal in the Selenium Maven plugin. This is followed by an invocation of the test goal from the Maven Surefire plugin which will execute the TestNG tests which rely on the Selenium server.

----
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building selenium-reddit
[INFO]    task-segment: [integration-test]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources {execution: default-resources}]
                    [WARNING] Using platform encoding (MacRoman actually) to copy filtered 
                    resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:compile {execution: default-compile}]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources {execution: default-testResources}]
                    [WARNING] Using platform encoding (MacRoman actually) to copy filtered 
                    resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:testCompile {execution: default-testCompile}]
[INFO] Compiling 1 source file to /Users/Tim/Library/Code/sonatype/
                    maven-cookbook/mcookbook-examples/integrate/selenium-reddit/
                    target/test-classes
[INFO] [surefire:test {execution: default-test}]
[INFO] Tests are skipped.
[INFO] [jar:jar {execution: default-jar}]
[INFO] Building jar: /Users/Tim/Library/Code/sonatype/maven-cookbook/
                    mcookbook-examples/integrate/selenium-reddit/
                    target/selenium-reddit-1.0-SNAPSHOT.jar
[INFO] [selenium:start-server {execution: default}]
                    Created dir: /Users/Tim/Library/Code/sonatype/maven-cookbook/
                    mcookbook-examples/integrate/selenium-reddit/target/selenium
                    Launching Selenium Server
                    Waiting for Selenium Server...
[INFO] User extensions: /Users/Tim/Library/Code/sonatype/maven-cookbook/
                    mcookbook-examples/integrate/selenium-reddit/
                    target/selenium/user-extensions.js
                    23:41:46,726 INFO  [SeleniumServer] Java: Apple Inc. 14.1-b02-90
                    23:41:46,727 INFO  [SeleniumServer] OS: Mac OS X 10.6.1 x86_64
                    23:41:46,735 INFO  [SeleniumServer] v1.0.1 [2697], with Core 
                    23:41:46,829 INFO  [HttpServer] Version Jetty/5.1.x
                    23:41:46,830 INFO  [Container] Started HttpContext[/selenium-server/driver,
                    /selenium-server/driver]
                    23:41:46,832 INFO  [Container] Started HttpContext[/selenium-server,
                    /selenium-server]
                    23:41:46,832 INFO  [Container] Started HttpContext[/,/]
                    23:41:46,846 INFO  [SocketListener] Started SocketListener on 0.0.0.0:4444
                    23:41:46,846 INFO  [Container] Started org.mortbay.jetty.Server@4a4e79f1
                    23:41:47,262 INFO  [Credential] Checking Resource aliases
                    Selenium Server started
[INFO] [surefire:test {execution: default}]
[INFO] Surefire report directory: /Users/Tim/Library/Code/sonatype/
                    maven-cookbook/mcookbook-examples/integrate/selenium-reddit/
                    target/surefire-reports

                    -------------------------------------------------------
                    T E S T S
                    -------------------------------------------------------
                    Running TestSuite
                    23:41:48,178 INFO  [org.mortbay.util.Credential] Checking Resource aliases
                    23:41:48,184 INFO  [org.openqa.selenium.server.SeleniumDriverResourceHandler] 
                    Command request: getNewBrowserSession[*safari, http://www.twitter.com, ] on 
                    session null
                    23:41:48,187 INFO  [org.openqa.selenium.server.BrowserSessionFactory] 
                    creating new remote session
                    23:41:48,436 INFO  [org.openqa.selenium.server.BrowserSessionFactory] 
                    Allocated session 2a66870a3c894a60a19ef6f2e7a1dc74 for 
                    http://www.twitter.com, launching...
                    23:41:48,519 INFO  [org.openqa.selenium.server.browserlaunchers.
                    SafariCustomProfileLauncher] Launching Safari to visit... 
                    23:41:53,251 INFO  [org.openqa.selenium.server.SeleniumDriverResourceHandler] 
                    Got result: OK, on session 
                    23:41:53,265 INFO  [org.openqa.selenium.server.SeleniumDriverResourceHandler] 
                    Command request: open[http://www.twitter.com/tobrien, ] on session 
                    23:41:56,231 INFO  [org.openqa.selenium.server.SeleniumDriverResourceHandler] 
                    Got result: OK on session 
                    23:41:56,256 INFO  [org.openqa.selenium.server.SeleniumDriverResourceHandler] 
                    Command request: waitForPageToLoad[3000, ] on session 
                    23:41:56,270 INFO  [org.openqa.selenium.server.SeleniumDriverResourceHandler] 
                    Got result: OK on session 
                    23:41:56,284 INFO  [org.openqa.selenium.server.SeleniumDriverResourceHandler] 
                    Command request: isTextPresent[Tim O'Brien, ] on session 
                    23:41:56,343 INFO  [org.openqa.selenium.server.SeleniumDriverResourceHandler] 
                    Got result: OK,true on session 
                    23:41:56,352 INFO  [org.openqa.selenium.server.SeleniumDriverResourceHandler] 
                    Command request: testComplete[, ] on session 
                    23:41:56,370 INFO  [org.openqa.selenium.server.SeleniumDriverResourceHandler] 
                    Got result: OK on session 
                    Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 8.609 sec

                    Results :

                    Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 18 seconds
[INFO] Finished at: Fri Nov 27 23:41:56 CST 2009
[INFO] Final Memory: 32M/80M
[INFO] ------------------------------------------------------------------------

----
            </section>
        </section>

=== Running Integration Tests Against a Servlet Container

==== Task

        You are testing a web application and you need to start a servlet
                    container prior to running integration tests.
            </section>

==== Action

        Use the Maven Jetty Plugin to start an instance of a server prior
                    to running your integration tests. Assume that you are writing
                    integration tests to test the sample web application project that was
                    introduced in <xref linkend="web-sect-running-war" />. If you have some
                    Selenium tests for the web application, you can start an instance of
                    Jetty running the web application as a daemon in the
                    pre-integration-test phase and stop the instance in the
                    post-integration-test phase.

        Your web application is in the org.sonatype.mcookbook:sample-web
                    project and your integration tests are in the
                    org.sonatype-mcookbook:sample-web-it project. You can configure the
                    Maven Dependency plugin to copy the WAR to the sample-web-it project
                    during the package phase, then during the pre-integation-test phase you
                    will configure the Maven Jetty plugin to start an instance of Jetty to
                    run the sample-web.war as well as to start the Selenium server. The
                    Maven Surefire plugin will then execute the unit tests, and after the
                    tests are complete the Jetty server will be stopped in the
                    post-integration-test phase.

        Our TestNG integration tests is as follows. It is going to connect
                    to the default Jetty host and port of localhost:8080, and submit a form
                    that calculates the tenth number in the Fibonacci sequence
                    (F<subscript>10</subscript>). This integration test is stored in
                    <filename>\${basedir}/src/test/java</filename>.

                <programlisting>package org.sonatype.mcookbook;

                    import org.testng.annotations.AfterClass;
                    import org.testng.annotations.BeforeClass;
                    import org.testng.annotations.Parameters;
                    import org.testng.annotations.Test;

                    import com.thoughtworks.selenium.DefaultSelenium;
                    import com.thoughtworks.selenium.Selenium;
                    import com.thoughtworks.selenium.SeleniumException;

                    public class FibTest {

                    private Selenium selenium;

                    @BeforeClass
                    public void startSelenium() {
                    this.selenium = new DefaultSelenium("localhost", 4444, "*safari",
                    "http://localhost:8080");
                    this.selenium.start();
                    }

                    @Test public void testSequence() throws Exception {
                    selenium.open("/sample-web/");
                    selenium.type("index", "10");
                    selenium.click("//input[@value='Calculate']");
                    selenium.waitForPageToLoad("30000");
                    assert selenium.isTextPresent("55");
                    }
                    
                    @AfterClass(alwaysRun = true)
                    public void stopSelenium() {
                    this.selenium.stop();
                    }

                    }
                </programlisting>

        The POM to configure the sample-web-it is shown below.

                <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                    http://maven.apache.org/maven-v4_0_0.xsd"&gt;
                    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
                    &lt;groupId&gt;org.sonatype.mcookbook&lt;/groupId&gt;
                    &lt;artifactId&gt;sample-web-it&lt;/artifactId&gt;
                    &lt;packaging&gt;jar&lt;/packaging&gt;
                    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                    &lt;name&gt;sample-web-it&lt;/name&gt;
                    &lt;build&gt;
                    &lt;plugins&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;source&gt;1.5&lt;/source&gt;
                    &lt;target&gt;1.5&lt;/target&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;
                    &lt;executions&gt;
                    &lt;execution&gt;
                    &lt;id&gt;copy&lt;/id&gt;<co id="int-co-run-war-1"
                                                 linkends="int-cr-run-war-1" />
                    &lt;phase&gt;package&lt;/phase&gt;
                    &lt;goals&gt;
                    &lt;goal&gt;copy&lt;/goal&gt;
                    &lt;/goals&gt;
                    &lt;configuration&gt;
                    &lt;artifactItems&gt;
                    &lt;artifactItem&gt;
                    &lt;groupId&gt;org.sonatype.mcookbook&lt;/groupId&gt;
                    &lt;artifactId&gt;sample-web&lt;/artifactId&gt;
                    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                    &lt;type&gt;war&lt;/type&gt;
                    &lt;overWrite&gt;true&lt;/overWrite&gt;
                    &lt;destFileName&gt;sample-web.war&lt;/destFileName&gt;
                    &lt;/artifactItem&gt;
                    &lt;/artifactItems&gt;
                    &lt;outputDirectory&gt;
                    \${project.build.directory}/war
                    &lt;/outputDirectory&gt;
                    &lt;overWriteReleases&gt;true&lt;/overWriteReleases&gt;
                    &lt;overWriteSnapshots&gt;true&lt;/overWriteSnapshots&gt;
                    &lt;/configuration&gt;
                    &lt;/execution&gt;
                    &lt;/executions&gt;
                    &lt;/plugin&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                    &lt;configuration&gt;
                    &lt;skip&gt;true&lt;/skip&gt;
                    &lt;/configuration&gt;
                    &lt;executions&gt;
                    &lt;execution&gt;
                    &lt;phase&gt;integration-test&lt;/phase&gt;<co
                                                                    id="int-co-run-war-2" linkends="int-cr-run-war-2" />
                    &lt;goals&gt;
                    &lt;goal&gt;test&lt;/goal&gt;
                    &lt;/goals&gt;
                    &lt;configuration&gt;
                    &lt;skip&gt;false&lt;/skip&gt;
                    &lt;/configuration&gt;
                    &lt;/execution&gt;
                    &lt;/executions&gt;
                    &lt;/plugin&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
                    &lt;artifactId&gt;selenium-maven-plugin&lt;/artifactId&gt;
                    &lt;executions&gt;
                    &lt;execution&gt;
                    &lt;phase&gt;pre-integration-test&lt;/phase&gt;<co
                                                                        id="int-co-run-war-3" linkends="int-cr-run-war-3" />
                    &lt;goals&gt;
                    &lt;goal&gt;start-server&lt;/goal&gt;
                    &lt;/goals&gt;
                    &lt;configuration&gt;
                    &lt;background&gt;true&lt;/background&gt;
                    &lt;/configuration&gt;
                    &lt;/execution&gt;
                    &lt;/executions&gt;
                    &lt;/plugin&gt;
                    &lt;plugin&gt;
                    &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
                    &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
                    &lt;version&gt;6.1.22&lt;/version&gt;
                    &lt;executions&gt;
                    &lt;execution&gt;
                    &lt;id&gt;start-jetty&lt;/id&gt;<co id="int-co-run-war-4"
                                                        linkends="int-cr-run-war-4" />
                    &lt;phase&gt;pre-integration-test&lt;/phase&gt;
                    &lt;goals&gt;
                    &lt;goal&gt;run-war&lt;/goal&gt;
                    &lt;/goals&gt;
                    &lt;configuration&gt;
                    &lt;contextPath&gt;sample-web&lt;/contextPath&gt;
                    &lt;daemon&gt;true&lt;/daemon&gt;
                    &lt;webApp&gt;
                    \${project.build.directory}/war/sample-web.war
                    &lt;/webApp&gt;
                    &lt;/configuration&gt;
                    &lt;/execution&gt;
                    &lt;execution&gt;
                    &lt;id&gt;stop-jetty&lt;/id&gt;<co id="int-co-run-war-5"
                                                       linkends="int-cr-run-war-5" />
                    &lt;phase&gt;post-integration-test&lt;/phase&gt;
                    &lt;goals&gt;
                    &lt;goal&gt;stop&lt;/goal&gt;
                    &lt;/goals&gt;
                    &lt;/execution&gt;
                    &lt;/executions&gt;
                    &lt;configuration&gt;<co id="int-co-run-war-6"
                                             linkends="int-cr-run-war-6" />
                    &lt;stopPort&gt;9991&lt;/stopPort&gt;
                    &lt;stopKey&gt;test&lt;/stopKey&gt;
                    &lt;/configuration&gt;
                    &lt;/plugin&gt;
                    &lt;/plugins&gt;
                    &lt;/build&gt;
                    &lt;dependencies&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.testng&lt;/groupId&gt;
                    &lt;artifactId&gt;testng&lt;/artifactId&gt;
                    &lt;version&gt;5.10&lt;/version&gt;
                    &lt;classifier&gt;jdk15&lt;/classifier&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.seleniumhq.selenium.client-drivers&lt;/groupId&gt;
                    &lt;artifactId&gt;selenium-java-client-driver&lt;/artifactId&gt;
                    &lt;version&gt;1.0.1&lt;/version&gt;
                    &lt;scope&gt;test&lt;/scope&gt;
                    &lt;/dependency&gt;
                    &lt;dependency&gt;
                    &lt;groupId&gt;org.sonatype.mcookbook&lt;/groupId&gt;<co
                                                                              id="int-co-run-war-7" linkends="int-cr-run-war-7" />
                    &lt;artifactId&gt;sample-web&lt;/artifactId&gt;
                    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                    &lt;type&gt;war&lt;/type&gt;
                    &lt;/dependency&gt;
                    &lt;/dependencies&gt;
                    &lt;/project&gt;
                </programlisting>

        This POM contains the following configuration:

                <calloutlist>
                    <callout arearefs="int-co-run-war-1" id="int-cr-run-war-1">
                The Maven Dependency plugin is configured to copy the
                            sample-web web application archive to the
                            \${project.build.directory}/war/sample-web.war file. The copy goal is
                            bound to the package phase.
                    </callout>

                    <callout arearefs="int-co-run-war-2" id="int-cr-run-war-2">
                The Surefire plugin is configured to skip all tests during the
                            test phase and to execute all tests during the integration-test
                            phase.
                    </callout>

                    <callout arearefs="int-co-run-war-3" id="int-cr-run-war-3">
                The Selenium server is started during the pre-integration-test
                            phase as a background process. This makes the Selenium server
                            available to any integration tests that need to interact with a
                            browser.
                    </callout>

                    <callout arearefs="int-co-run-war-4" id="int-cr-run-war-4">
                The start-jetty execution starts the Jetty server in the
                            pre-integration-test phase. This execution references the WAR
                            downloaded by the Maven Dependency plugin and it also sets the
                            context path to "sample-web". Setting daemon to "true" runs Jetty in
                            the background and continues to progress through the Maven
                            lifecycle. If daemon were set to "false", the Maven build would stop
                            and wait for the Jetty process to complete.
                    </callout>

                    <callout arearefs="int-co-run-war-5" id="int-cr-run-war-5">
                The stop-jetty execution stops the Jetty server after the
                            integration tests have been executed.
                    </callout>

                    <callout arearefs="int-co-run-war-6" id="int-cr-run-war-6">
                To stop the Jetty server we need to supply a stop port and a
                            stop key. Both the run-war and stop goals of the Jetty plugin will
                            use this configuration so it is defined at the plugin level instead
                            of the execution level. The stop port defines the port number that
                            Jetty will listen to for a stop command, and the stop key is a
                            string that will be used by the jetty:stop goal to stop the Jetty
                            process.
                    </callout>

                    <callout arearefs="int-co-run-war-7" id="int-cr-run-war-7">
                Adding a dependency to the web application project that is
                            being tested will make sure that this project is ordered after the
                            web application in a multi-module build.
                    </callout>
                </calloutlist>

        When you run the integration-test phase of this build, you will
                    see that Maven runs through the lifecycle and starts Selenium and Jetty
                    before running the integration tests.

----

[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building sample-web-it
[INFO]    task-segment: [clean, integration-test]
[INFO] ------------------------------------------------------------------------
[INFO] [clean:clean {execution: default-clean}]
                    ...
[INFO] [resources:resources {execution: default-resources}]
                    ...
[INFO] [resources:testResources {execution: default-testResources}]
                    ...
[INFO] [compiler:testCompile {execution: default-testCompile}]
[INFO] Compiling 1 source file to 
                    ~/Code/sonatype/maven-cookbook/mcookbook-examples/integrate/sample-web-it/
                    target/test-classes
[INFO] [surefire:test {execution: default-test}]
[INFO] Tests are skipped.
[INFO] [jar:jar {execution: default-jar}]
                    ...
[INFO] [dependency:copy {execution: copy}]
                    ...
[INFO] [selenium:start-server {execution: default}]
                    Created dir: ~/maven-cookbook/mcookbook-examples/integrate/sample-web-it/
                    target/selenium
                    Launching Selenium Server
                    Waiting for Selenium Server...
                    ...
[INFO] [dependency:copy {execution: copy}]
[INFO] Configured Artifact: org.sonatype.mcookbook:sample-web:1.0-SNAPSHOT:war
[INFO] Copying sample-web-1.0-SNAPSHOT.war to 
                    ~/maven-cookbook/mcookbook-examples/integrate/sample-web-it/
                    target/war/sample-web.war
[INFO] [jetty:run-war {execution: start-jetty}]
[INFO] Configuring Jetty for project: sample-web-it
                    2009-11-29 04:21:37.994:INFO::Logging to STDERR via org.mortbay.log.StdErrLog
[INFO] Context path = /sample-web
[INFO] Starting jetty 6.1.22 ...
                    2009-11-29 04:21:38.683:INFO::Started SelectChannelConnector@0.0.0.0:8080
[INFO] Started Jetty Server
[INFO] [surefire:test {execution: default}]

                    -------------------------------------------------------
                    T E S T S
                    -------------------------------------------------------
                    Running TestSuite
                    04:21:39,436 INFO  [org.mortbay.util.Credential] Checking Resource aliases
                    ...
                    Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.597 sec

                    Results :

                    Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] [jetty:stop {execution: stop-jetty}]
[INFO] Stopping server 0
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 13 seconds
[INFO] Finished at: Sun Nov 29 04:21:42 CST 2009
[INFO] Final Memory: 48M/99M
[INFO] ------------------------------------------------------------------------
                    2009-11-29 04:21:43.201:INFO::Shutdown hook executing
                    2009-11-29 04:21:43.822:INFO::Shutdown hook complete
----

[[release]]
== Releasing Software with Maven

[[release-sect-intro]]
=== Introduction

    In Maven existing four different
                possibilities to release an artifact. The release of an artifact
                has different meaning in different areas where you release an artifact.
            
        </section>

[[release-sect-install]]
=== Install Artifact
    Installing an artifact means to deploy an
                artifact into the users Maven repository (<filename>~/.m2/repository</filename>).
                This makes it possible to use an artifact as a dependency for an other
                project by this user on the same machine.
            
        </section>


[[release-sect-deploy]]
=== Deploying Artifact
    Deploying is meant to be releasing an artifact (SNAPSHOT) into
                a repository outside users machine which means to make it usable
                by others of the team into their projects.
            
        </section>

[[release-sect-release]]
=== Releasing an Artifact

    Releasing an artifact in Maven comprises of two
                separated steps which are the <command>release:prepare</command> and the
                <command>release:perform</command>. The two steps can be manually
                or automatically by any Continuous Integration system.

[[release-sect-release-prepare]]
=== Release Prepare

        If you think your project reached a particular step of your
                    development the time comes to do a release of your project which simply
                    can be achieved by using Mavens release process. The first step is to do
                    <command>mvn release:prepare</command> in your current state of your
                    project. The <command>release:prepare</command> will check if you missed
                    code changes to check in and take a look at the projects dependencies that
                    it has no SNAPSHOT dependencies and furthermore change the versions in
                    the POMs from X-SNAPSHOT to a new version (you will be prompted for that).
                    The next thing is that the SCM information in the projects POM will be
                    changed to point to the final destination of the tag and all tests will be
                    run against the modified POMs to confirm everything is working fine.
                    Now the modified POMs will be committed and the code in the SCM
                    will be tagged by a version name (prompted for) and change the POMs
                    to use a new version y-SNAPSHOT (these values have been prompted for before)
                    and finally commit the modified POMs into the SCM system.
                
        XXXXX
                
            </section>

[[release-sect-release-perform]]
=== Release Perform

        The <command>release:perform</command> will checkout the code from
                    the previously create tag and run the predefined Maven goals (by default:
                    <command>deploy site-deploy</command>) on it.
                

            </section>
        </section>

    </chapter>

[[repoman]]
== Repository Management

[[repoman-sect-install-os]]
=== Installing and Running Nexus Open Source

==== Task

        You need to download and install Nexus Open Source to proxy and
                    host Maven repositories.
            </section>

==== Action

        To download and install Sonatype Nexus Open Source, follow the
                    instructions in <ulink
                                         url="http://www.sonatype.com/books/nexus-book-stage/reference/install.html#installing-sect-dl-open">Section
                        2.1.1, "Downloading Nexus Open Source",</ulink> and <ulink
                                                                                 url="http://www.sonatype.com/books/nexus-book-stage/reference/ch02s02.html#installing-sect-open-source">Section
                        2.2.2, "Installing Nexus Open Source",</ulink> from "Repository
                    Management with Nexus".

        If you've installed Nexus on the default port 8081 listening on
                    localhost, going to <ulink
                                             url="http://localhost:8081/nexus/">http://localhost:8081/nexus/</ulink>
                    will load the interface shown in <xref
                                                          linkend="fig-repoman_nexus-open-source-interface" />.

                <figure floatstyle="" id="fig-repoman_nexus-open-source-unauthenticated">
                    <title>Nexus Open Source Prior to Authentication</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/repoman_nexus-open-source-unauthenticated.png" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata align="center"
                                       fileref="figs/print/repoman_nexus-open-source-unauthenticated.pdf"
                                       scalefit="0" security="" width="100%" />
                        </imageobject>
                    </mediaobject>
                </figure>

        Clicking on the Log In link in the upper right-hand corner of the
                    window, will prompt you for a username and password in the Nexus Log In
                    dialogin shown in <xref linkend="fig-repoman_nexus-login" />. The
                    default administrative username is "admin" and the default
                    administrative password is "admin123".

                <figure floatstyle="" id="fig-repoman_nexus-login">
                    <title>The Nexus Log In Dialog</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/repoman_nexus-login.png" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata align="center"
                                       fileref="figs/print/repoman_nexus-login.pdf"
                                       scalefit="0" security="" width="100%" />
                        </imageobject>
                    </mediaobject>
                </figure>

        Once you have successfully authenticated as an administrative
                    user, you will see the full Nexus user interface as shown in <xref
                                                                                      linkend="fig-repoman_nexus-open-source-interface" />.

                <figure floatstyle="" id="fig-repoman_nexus-open-source-interface">
                    <title>Crowd Menu Link under the Security Section of the Nexus
                        Menu</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/repoman_nexus-open-source-interface.png" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata align="center"
                                       fileref="figs/print/repoman_nexus-open-source-interface.pdf"
                                       scalefit="0" security="" width="100%" />
                        </imageobject>
                    </mediaobject>
                </figure>
            </section>
        </section>

[[repoman-sect-proxy-repo" label="]]
=== Proxying a Remote Repository

==== Task

        You and your team or organization are heavy users of remote
                    repositories. Every time a user installs a development environment, they
                    end up downloading data directly from the remote repository. You want to
                    create a caching proxy of the remote repository that will increase the
                    speed of your builds and give you some stability in case the remote
                    repository is unavailable.
            </section>

==== Action

        To configure a new Proxy repository, open the Repositories panel
                    by clicking on Repositories under Views/Repositories section of the
                    Nexus menu. Clicking Repositories should display the Repositories panel
                    shown in <xref linkend="fig-repoman_open-repositories" />.

                <figure floatstyle="" id="fig-repoman_open-repositories">
                    <title>Opening the Repositories Panel</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/repoman_open-repositories.png" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata align="center"
                                       fileref="figs/print/repoman_open-repositories.pdf"
                                       scalefit="0" security="" width="100%" />
                        </imageobject>
                    </mediaobject>
                </figure>

        To create a new proxy repository, click on the Add... button and
                    select Proxy Repository from the dropdown as shown in <xref
                                                                               linkend="fig-repoman_create-proxy" />.

                <figure floatstyle="" id="fig-repoman_create-proxy">
                    <title>Creating a New Proxy Repository</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/repoman_create-proxy.png" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata align="center"
                                       fileref="figs/print/repoman_create-proxy.pdf"
                                       scalefit="0" security="" width="100%" />
                        </imageobject>
                    </mediaobject>
                </figure>

        When you create a new proxy repository, you'll need to choose a
                    Repository ID. A Repository ID is an internal identifier which is used
                    in the URL that you will connect your clients to. The standard for
                    Repository IDs is to use a lower case word or words separated by a
                    hyphen. Examples of valid Repository IDs are: "central", "internal", and
                    "custom-snapshots".

        Other important fields in the form shown in <xref
                                                                       linkend="fig-repoman_create-proxy" />, are: Repository Policy, Remote
                    Storage Location, and Download Remote Indexes. The repository policy
                    controls what artifacts can be stored in a repository: snapshot
                    artifacts or release artifacts. The Remote Storage Location is the URL
                    of the remote repository, and Download Remote Indexes tells Nexus to
                    download an index that will enable searching and browsing from the
                    remote repository.
            </section>
        </section>

[[repoman-sect-browsing]]
=== Browsing a Nexus Repository

==== Task

        You want to browse the contents of a Nexus repository.
            </section>

==== Action

        If your Nexus repository is a proxy repository, you will have two
                    browsing tabs available: Browse Storage and Browse Index. If your Nexus
                    repository is a hosted repository, you will only see the Browse Storage
                    option, and if you are browsing a repository group, you will see both
                    Browse Storage and Browse Index.

        The Browse Storage tab shown in <xref
                                                           linkend="fig-repoman_browse-storage-repo-tab" />, allows you to see the
                    artifacts that available available in the local disk storage associated
                    with a repostiory. If you are browsing a hosted repository, the storage
                    contains the entire repository. If you are browsing a proxy repository,
                    the Browse Storage tab will display only the artifacts that have been
                    referenced, downloaded, and cached by Nexus.

                <figure floatstyle="" id="fig-repoman_browse-storage-repo-tab">
                    <title>Browsing Repository Storage</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/repoman_browse-storage-repo-tab.png" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata align="center"
                                       fileref="figs/print/repoman_browse-storage-repo-tab.pdf"
                                       scalefit="0" security="" width="100%" />
                        </imageobject>
                    </mediaobject>
                </figure>

        If you are browsing a proxy repository and you have configured
                    Nexus to download the remote repository index, you will be able to
                    browse the entire repository in the Browse Index tab as shown in <xref
                                                                                          linkend="fig-repoman_browse-index-repo-tab" />. 

                <figure floatstyle="" id="fig-repoman_browse-index-repo-tab">
                    <title>Crowd Menu Link under the Security Section of the Nexus
                        Menu</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/repoman_browse-index-repo-tab.png" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata align="center"
                                       fileref="figs/print/repoman_browse-index-repo-tab.pdf"
                                       scalefit="0" security="" width="100%" />
                        </imageobject>
                    </mediaobject>
                </figure>
            </section>
        </section>

[[repoman-sect-configuring]]
=== Configuring a Nexus Repository

==== Task

        You need to change the configuration of a Nexus repository.
            </section>

==== Action

        To configure a Nexus repository, click on Repositories under the
                    Views/Repositories section of the Nexus menu, and then select the
                    repository you wish to configure. Once the repository is select, click
                    on the Configuration tab to display the form shown in <xref
                                                                               linkend="fig-repoman_browse-configuration-repo-tab" />.

                <figure floatstyle="" id="fig-repoman_browse-configuration-repo-tab">
                    <title>Crowd Menu Link under the Security Section of the Nexus
                        Menu</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/repoman_configuration-repo-tab.png" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata align="center"
                                       fileref="figs/print/repoman_configuration-repo-tab.pdf"
                                       scalefit="0" security="" width="100%" />
                        </imageobject>
                    </mediaobject>
                </figure>
            </section>
        </section>

[[repoman-sect-summary]]
=== Viewing Summary Information for Nexus Repositories

==== Task

        You need to view some summary information about a particular
                    repository in Nexus.
            </section>

==== Action

        To view summary information about a Nexus repository, click on
                    Repositories under the Views/Repositories section of the Nexus menu, and
                    then select the repository you wish to view. Once the repository is
                    select, click on the Summary tab to display the form shown in <xref
                                                                                       linkend="fig-repoman_browse-summary-repo-tab" />.

                <figure floatstyle="" id="fig-repoman_browse-summary-repo-tab">
                    <title>Crowd Menu Link under the Security Section of the Nexus
                        Menu</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/repoman_summary-repo-tab.png" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata align="center"
                                       fileref="figs/print/repoman_summary-repo-tab.pdf"
                                       scalefit="0" security="" width="100%" />
                        </imageobject>
                    </mediaobject>
                </figure>
            </section>
        </section>

[[repoman-sect-mirrors]]
=== Using Mirrors for Proxy Repositories

==== Task

        You want to help ease the traffic and bandwidth burden on the
                    Central Maven repository by configuring your Nexus instance to use a
                    mirror to download artifacts.
            </section>

==== Action

        Once you have created a proxy repository, you should configure
                    Nexus to download artifacts from one or more mirrors. To configure
                    mirrors, click on Repositories under the View/Repositories section of
                    the Nexus menu, select the proxy repository you want to configure, and
                    then select the Mirrors tab for this repository. Clicking on the Mirrors
                    tab will display the form shown in <xref
                                                            linkend="fig-repoman_browse-mirror-repo-tab" />.

                <figure floatstyle="" id="fig-repoman_browse-mirror-repo-tab">
                    <title>Configuring Mirrors for Proxy Repositories</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/repoman_mirror-repo-tab.png" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata align="center"
                                       fileref="figs/print/repoman_mirror-repo-tab.pdf"
                                       scalefit="0" security="" width="100%" />
                        </imageobject>
                    </mediaobject>
                </figure>

        The Central Maven repository contains an XML file which will be
                    used to populate the mirrors dropdown shown in <xref
                                                                        linkend="fig-repoman_browse-mirror-repo-tab" />. To configure a mirror,
                    select it from the dropdown, and click on the Add button to add the
                    mirror to the list of Mirror URLs.
            </section>

==== Details

        When a proxy repository is confgured to retrieve artifacts from a
                    Mirror, it will consult each configured mirror in the order shown in the
                    Mirror URLs list from <xref
                                               linkend="fig-repoman_browse-mirror-repo-tab" />. While Nexus will
                    retrieve POM information, checksums, and PGP signatures from the
                    original repository, it will retrieve all artfiacts directly from the
                    first available mirror.
            </section>
        </section>

[[repoman-sect-grouping" label="]]
=== Grouping Repositories

==== Task

        You want to consolidate access to multiple repositories with a
                    single repository URL.
            </section>

==== Action

        Nexus Open Source provides for the ability to group one or more
                    repositories into a Repository Group. The default installation of Nexus
                    is preconfigured with two Repository Groups: Public Repositories and
                    Public Snapshot Repositories. Public Repositories groups all of the
                    repositories with a Release policy together, and Public Snapshot
                    Repositories groups all of the repositories with a Snapshot policy
                    together. To add a repository to the Public Repositories group, click on
                    Repositories under the View/Repositories section of the Nexus menu, and
                    then click on the Repository Group that you want to add a Repository to.
                    Once the group is selected, click on the Configuration tab shown in
                    <xref linkend="fig-repoman_add-to-group" />, and drag the repository you
                    wich to add from the Available Repositories list to the Ordered Group
                    Repositories list.

                <figure floatstyle="" id="fig-repoman_add-to-group">
                    <title>Adding a Repository to a Repository Group</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/repoman_add-to-group.png" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata align="center"
                                       fileref="figs/print/repoman_add-to-group.pdf"
                                       scalefit="0" security="" width="100%" />
                        </imageobject>
                    </mediaobject>
                </figure>

        To add a new Repository Group, click on the Add.. button and
                    choose Repository Group.

                <figure floatstyle="" id="fig-repoman_nexus-adding-new-group">
                    <title>Adding a New Repository Group</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/repoman_nexus-adding-new-group.png" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata align="center"
                                       fileref="figs/print/repoman_nexus-adding-new-group.pdf"
                                       scalefit="0" security="" width="100%" />
                        </imageobject>
                    </mediaobject>
                </figure>
            </section>
        </section>

[[repoman-sect-install-pro]]
=== Installing Nexus Professional

==== Task

        You need to download and install Nexus Professional to integrate
                    your repository manager with enteprise security, manage the procurement
                    of software artifacts, and track staged software releases.
            </section>

==== Action

        To download and install Sonatype Nexus Professional, follow the
                    instructions in <ulink
                                         url="http://www.sonatype.com/books/nexus-book-stage/reference/install.html#install-sect-download">Section
                        2.1.2, "Downloading Nexus Professional",</ulink> and <ulink
                                                                                  url="http://www.sonatype.com/books/nexus-book-stage/reference/ch02s02.html#install-sect-pro">Section
                        2.2.3, "Installing Nexus Professional",</ulink> from "Repository
                    Management with Nexus".
            </section>
        </section>

        <section id="repoman-staging">
            <title>Configuring a Staging Repository for Deployment in Nexus
                Professional</title>

    There might be any number of reasons why you might want to require
                your developers to use a staging repository. You might want to make sure
                that software artifacts contain valid POMs using a Staging Ruleset, or you
                might want to make sure that your process guarantees that QA has the final
                decision making authority to either promote or drop a release candidate.
                Staged software releases are very easy to implement using the Staging
                Plugin in <ulink url="http://www.sonatype.com/products/nexus">Nexus
                    Professional</ulink>. If you want to learn how to make a staged release,
                you can watch this <ulink
                                        url="http://www.sonatype.com/people/2009/01/nexus-professional-what-is-staging/">video</ulink>.
                or read the remainder of this section.

==== Task

        Deploy an artifact to a staging repository in Nexus
                    Professional.
            </section>

==== Action

        First step, is to download Nexus Professional if you don’t already
                    have it installed, you can do so, by going to the Nexus Professional
                    product page and clicking on the download link in the right-hand menu.
                    Once you’ve downloaded Nexus, log in as an administrator as you must
                    have administrative rights to perform the following
                    configuration:

                <orderedlist>
                    <listitem>
                From Nexus, click on the ‘Repositories’ link in left
                            navigation.
                    </listitem>

                    <listitem>
                Click on the repository you want to use, or create one (If you
                            need help with that take a look at the Nexus book, <ulink
                                                                                    url="http://www.sonatype.com/books/nexus-book/reference/procure-sect-configure.html#procue-sect-create-hosted">here</ulink>)
                    </listitem>

                    <listitem>
                Click on the ‘Configuration’ tab.
                    </listitem>

                    <listitem>
                Set the ‘Deployment Policy’ field to "Read Only".
                    </listitem>

                    <listitem>
                Click the Save button.
                    </listitem>
                </orderedlist>

                <figure floatstyle="" id="fig-repoman_stage-allow-deploy-release">
                    <title>Prohibit Direct Deployment to a Release Repository</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/repoman_stage-allow-deploy-release.png" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata align="center"
                                       fileref="figs/print/repoman_stage-allow-deploy-release.pdf"
                                       scalefit="0" security="" width="100%" />
                        </imageobject>
                    </mediaobject>
                </figure>

        That is it! Users will not be able to deploy or upload artifacts
                    directly to the repository. All artifacts must be staged and promoted to
                    this repository. For more information on staging and promoting take a
                    look at <ulink type=""
                                   url="http://www.sonatype.com/books/nexus-book/reference/staging-sect-managing-staging.html">this</ulink>,
                    or with the maven plugin, <ulink
                                                   url="http://www.sonatype.com/books/nexus-book/reference/ch09s07.html">here</ulink>.

        Next, create a staging repository. To create a staging
                    repository:

                <orderedlist>
                    <listitem>
                From Nexus, click on the ‘Staging’ link in left
                            navigation.
                    </listitem>

                    <listitem>
                Click the ‘Add’ button then the ‘Staging Profile’ item.
                    </listitem>

                    <listitem>
                Enter the following information:

                        <itemizedlist>
                            <listitem>
                        Profile Name: Staging Demo Profile
                            </listitem>

                            <listitem>
                        Profile Repository Target: All (Maven2)
                            </listitem>

                            <listitem>
                        Staging Repository ID Template: staging-demo
                            </listitem>

                            <listitem>
                        Staging Repository Name Template: Staging Demo
                            </listitem>

                            <listitem>
                        Staging Repository Template: Default Release Hosted
                                    Repository Template
                            </listitem>

                            <listitem>
                        Target Groups: Public Releases
                            </listitem>
                        </itemizedlist>
                    </listitem>

                    <listitem>
                Click the ‘Save’ button
                    </listitem>
                </orderedlist>

                <figure floatstyle="" id="fig-repoman_stage-create-stage-profile">
                    <title>Configuring a Staging Profile</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/repoman_stage-create-stage-profile.png" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata align="center"
                                       fileref="figs/print/repoman_stage-create-stage-profile.pdf"
                                       scalefit="0" security="" width="100%" />
                        </imageobject>
                    </mediaobject>
                </figure>

        Next, assign new permissions to users who will need to deploy to
                    the staging repository. A new role is created for each staging profile
                    that is created ( in this example the role is ‘Staging Deployer:
                    (Staging Demo Profile)’). Assign the new role to your users. You can
                    find more details on user management, <ulink
                                                               url="http://www.sonatype.com/books/nexus-book/reference/config.html#config-sect-managing-users">here</ulink>.

                <figure floatstyle="" id="fig-repoman_stage-roles">
                    <title>Assigning Staging Roles</title>

                    <mediaobject>
                        <imageobject role="web">
                            <imagedata fileref="figs/web/repoman_stage-roles.png" />
                        </imageobject>

                        <imageobject role="print">
                            <imagedata align="center"
                                       fileref="figs/print/repoman_stage-roles.pdf"
                                       scalefit="0" security="" width="100%" />
                        </imageobject>
                    </mediaobject>
                </figure>
            </section>
        </section>
    </chapter>

