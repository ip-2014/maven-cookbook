<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="web">
  <title>Web Development</title>

  <para>This is a test</para>

  <section id="web-sect-running-war">
    <title>Running a Web Application in a Servlet Container</title>

    <section>
      <title>Task</title>

      <para>You need to run a web application in a servlet container.</para>
    </section>

    <section>
      <title>Action</title>

      <para>Configure your web application's Maven project to inlcude the
      Maven Jetty plugin as shown in the following POM:</para>

      <programlisting db:wrap="force"
                      xmlns:db="http://discursive.com/plugins/docbook">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.mcookbook&lt;/groupId&gt;
  &lt;artifactId&gt;sample-web&lt;/artifactId&gt;
  &lt;packaging&gt;war&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;sample-web Maven Webapp&lt;/name&gt;
  &lt;url&gt;http://maven.apache.org&lt;/url&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;3.8.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
      &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
      &lt;version&gt;2.5&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;build&gt;
    &lt;finalName&gt;sample-web&lt;/finalName&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
        &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
        &lt;version&gt;6.1.22&lt;/version&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;
</programlisting>

      <para>To start the web application in Jetty, run the run goal from the
      Maven Jetty plugin by running <command>mvn jetty:run</command>.</para>

      <screen>$ <command>mvn jetty:run</command>
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building sample-web Maven Webapp
[INFO]    task-segment: [jetty:run]
[INFO] ------------------------------------------------------------------------
[INFO] Preparing jetty:run
[INFO] [resources:resources {execution: default-resources}]
[WARNING] Using platform encoding (MacRoman actually) to copy filtered 
resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:compile {execution: default-compile}]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources {execution: default-testResources}]
[WARNING] Using platform encoding (MacRoman actually) to copy filtered 
resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory ~/maven-cookbook/
mcookbook-examples/web/sample-web/src/test/resources
[INFO] [compiler:testCompile {execution: default-testCompile}]
[INFO] No sources to compile
[INFO] [jetty:run {execution: default-cli}]
[INFO] Configuring Jetty for project: sample-web Maven Webapp
[INFO] Webapp source directory = ~/maven-cookbook/mcookbook-examples/web/
sample-web/src/main/webapp
[INFO] Reload Mechanic: automatic
[INFO] Classes = ~/maven-cookbook/mcookbook-examples/web/sample-web/
target/classes
2009-11-28 19:25:18.129:INFO::Logging to STDERR via org.mortbay.log.StdErrLog
[INFO] Context path = /sample-web
[INFO] Tmp directory =  determined at runtime
[INFO] Web defaults = org/mortbay/jetty/webapp/webdefault.xml
[INFO] Web overrides =  none
[INFO] web.xml file = ~/maven-cookbook/mcookbook-examples/web/sample-web/
src/main/webapp/WEB-INF/web.xml
[INFO] Webapp directory = ~/maven-cookbook/mcookbook-examples/web/sample-web
/src/main/webapp
[INFO] Starting jetty 6.1.22 ...
2009-11-28 19:25:18.231:INFO::jetty-6.1.22
2009-11-28 19:25:18.405:INFO::No Transaction manager found - if your webapp 
requires one, please configure one.
2009-11-28 19:25:18.800:INFO::Started SelectChannelConnector@0.0.0.0:8080
[INFO] Started Jetty Server</screen>

      <para>At this point, you can use a web browser to navigate to <ulink
      url="http://localhost:8080/sample-web/">http://localhost:8080/sample-web/</ulink>
      to interact with the web application.</para>
    </section>

    <section>
      <title>Detail</title>

      <para>Consider a simple web application with a single index.jsp page
      that contains a form, and a single Servlet that calculates a number from
      the Fibonacci sequence.</para>

      <example>
        <title>Simple Form Accepting an Index to Pass to the Fibonacci
        Servlet</title>

        <programlisting db:wrap="force"
                        xmlns:db="http://discursive.com/plugins/docbook">&lt;html&gt;
&lt;body&gt;
&lt;h2&gt;Fibonacci Page&lt;/h2&gt;
&lt;form action="fib" method="GET"&gt;
  &lt;p&gt;Fetch Fibonacci Sequence Index:
  &lt;input type="text" name="index" size="5"/&gt;&lt;/p&gt;
  &lt;input type="submit" value="Calculate"/&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</programlisting>
      </example>

      <para>The following class is the Servlet which calculates the Fibonacci
      sequence. It takes a single parameter index and simply prints of the
      number at the specified position of the Fibonacci sequence.</para>

      <example>
        <title>Fibonacci Servlet which Calculates a Number from the Fibonacci
        Sequence</title>

        <programlisting db:wrap="force"
                        xmlns:db="http://discursive.com/plugins/docbook">package org.sonatype.mcookbook;

import java.io.IOException;
import java.util.Enumeration;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class FibonacciServlet extends HttpServlet {

  protected void doGet(HttpServletRequest req, HttpServletResponse resp)
      throws ServletException, IOException {
    int index = Integer.parseInt(req.getParameter("index"));
    resp.getWriter().write( fib(index) + "" );
    resp.getWriter().flush();
    resp.getWriter().close();
  }

  public long fib(int n) {
    if (n &lt;= 1) return n;
    else return fib(n-1) + fib(n-2);
  }
}
</programlisting>
      </example>

      <para>The following web.xml configures the FibonacciServlet to respond
      to the request path <filename>&lt;context&gt;/fib</filename>.</para>

      <example>
        <title>Web Application Descriptor for sample-web</title>

        <programlisting db:wrap="force"
                        xmlns:db="http://discursive.com/plugins/docbook">&lt;!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;

&lt;web-app&gt;
  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;
  &lt;servlet&gt;
    &lt;servlet-name&gt;fibonacci&lt;/servlet-name&gt;
    &lt;servlet-class&gt;org.sonatype.mcookbook.FibonacciServlet&lt;/servlet-class&gt;
  &lt;/servlet&gt;
  &lt;servlet-mapping&gt;
    &lt;servlet-name&gt;fibonacci&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/fib&lt;/url-pattern&gt;
  &lt;/servlet-mapping&gt;
&lt;/web-app&gt;
</programlisting>
      </example>

      <para>After running mvn:jetty, you can load the initial form by going to
      http://localhost:8080/sample-web/index.jsp. Populating the form with an
      index and pressing calculate will load the Fibonacci servlet and print
      out the number at that position of the sequence.</para>
    </section>
  </section>

  <section>
    <title>Configuring a Servlet Container</title>

    <para></para>
  </section>

  <section>
    <title>Starting a WAR Dependency in a Servlet Container</title>

    <section>
      <title>Task</title>

      <para>You need to configure Maven to download and start a web
      application from a repository manager.</para>
    </section>

    <section>
      <title>Action</title>

      <para>Use the Maven Dependency plugin to copy the web application's WAR
      artifact to your project. Then configure the Maven Jetty plugin to
      execute the web application using the plugin's dependencies element to
      configure the classpath for Jetty.</para>

      <programlisting db:wrap="force"
                      xmlns:db="http://discursive.com/plugins/docbook">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
           http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.mcookbook&lt;/groupId&gt;
  &lt;artifactId&gt;start-jackrabbit&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;start-jackrabbit&lt;/name&gt;
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;id&gt;default-cli&lt;/id&gt;<co id="web-co-run-war-1"
          linkends="web-cr-run-war-1" />
            &lt;configuration&gt;
              &lt;artifactItems&gt;
                &lt;artifactItem&gt;
                  &lt;groupId&gt;org.apache.jackrabbit&lt;/groupId&gt;
                  &lt;artifactId&gt;jackrabbit-webapp&lt;/artifactId&gt;
                  &lt;version&gt;1.6.0&lt;/version&gt;
                  &lt;type&gt;war&lt;/type&gt;
                  &lt;overWrite&gt;true&lt;/overWrite&gt;
                  &lt;destFileName&gt;jackrabbit-webapp.war&lt;/destFileName&gt;
                &lt;/artifactItem&gt;
              &lt;/artifactItems&gt;
              &lt;outputDirectory&gt;
                \${project.build.directory}/war
              &lt;/outputDirectory&gt;
              &lt;overWriteReleases&gt;true&lt;/overWriteReleases&gt;
              &lt;overWriteSnapshots&gt;true&lt;/overWriteSnapshots&gt;
            &lt;/configuration&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
        &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
        &lt;version&gt;6.1.22&lt;/version&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;id&gt;default-cli&lt;/id&gt;<co id="web-co-run-war-2"
          linkends="web-cr-run-war-2" />
            &lt;configuration&gt;
              &lt;contextPath&gt;jackrabbit&lt;/contextPath&gt;
              &lt;daemon&gt;false&lt;/daemon&gt;
              &lt;webApp
                \${project.build.directory}/war/jackrabbit-webapp.war
              &lt;/webApp&gt;
            &lt;/configuration&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
        &lt;dependencies&gt;
          &lt;dependency&gt;<co id="web-co-run-war-3"
          linkends="web-cr-run-war-3" />
            &lt;groupId&gt;org.apache.jackrabbit&lt;/groupId&gt;
            &lt;artifactId&gt;jackrabbit-webapp&lt;/artifactId&gt;
            &lt;version&gt;1.6.0&lt;/version&gt;
            &lt;type&gt;war&lt;/type&gt;
          &lt;/dependency&gt;
          &lt;dependency&gt;
            &lt;groupId&gt;javax.jcr&lt;/groupId&gt;
            &lt;artifactId&gt;jcr&lt;/artifactId&gt;
            &lt;version&gt;2.0&lt;/version&gt;
          &lt;/dependency&gt;
        &lt;/dependencies&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;<co id="web-co-run-war-4" linkends="web-cr-run-war-4" />
      &lt;groupId&gt;org.apache.jackrabbit&lt;/groupId&gt;
      &lt;artifactId&gt;jackrabbit-webapp&lt;/artifactId&gt;
      &lt;version&gt;1.6.0&lt;/version&gt;
      &lt;type&gt;war&lt;/type&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>

      <para>This POM uses some advanced concepts to configure the default
      command-line options for both the Maven Dependency plugin and the Maven
      Jetty plugin. It also downloads and executes the jackrabbit-webapp.war
      artifact from the Central Maven repository.</para>

      <calloutlist>
        <callout arearefs="web-co-run-war-1" id="web-cr-run-war-1">
          <para>This particular plugin configuration configures the default
          command-line execution of a goal by using the default-cli
          identifier. This configures the default configuration that is used
          when a plugin goal is executed directly on the command-line (i.e.
          mvn dependency:copy). In this section of the POM, the Maven
          Dependency plugin is configured to download the Jackrabbit web
          application artifact and to save this file in
          \${project.build.directory}/war/jackrabbit-webapp.war.</para>
        </callout>

        <callout arearefs="web-co-run-war-2" id="web-cr-run-war-2">
          <para>Again, using the identifier of default-cli specifies the
          configuration of the plugin when one of its goals is executed on the
          command-line. This particular configuration points the Jetty plugin
          at the downloaded jackrabbit-webapp.war file, sets the context path
          to jackrabbit, and sets the daemon parameter to false. Setting
          daemon to false will cause the Maven build to block and wait for the
          Jetty process.</para>
        </callout>

        <callout arearefs="web-co-run-war-3" id="web-cr-run-war-3">
          <para>This dependencies element under the Maven Jetty plugin
          configuration configures the classpath for the Jetty servlet
          container. Without declaring these dependencies, the Jackrabbit web
          application would not have access to the libraries that are required
          for execution. Listing the jackrabbit-webapp artifact as a
          dependency for this plugin execution causes Maven to read the POM
          for this artifact and download all of the transitive dependencies of
          the web application artifact. This element also adds in an
          implementation of the Java Content Repository (JCR) API.</para>
        </callout>

        <callout arearefs="web-co-run-war-3" id="web-cr-run-war-4">
          <para>Even though this project is nothing more than a place-holder
          project for the plugin configuration contained in the POM it does
          declare a dependency on the jackrabbit-webapp artifact it requires
          for execution. This particular dependency block is unnecessary, but
          its presence helps to declare the explicit dependency for other
          tools which may consume this POM.</para>
        </callout>
      </calloutlist>

      <para>To download the Jackrabbit web application and execute it in
      Jetty, copy the POM to an empty directory and run <command>mvn clean
      dependency:copy jetty:run-war</command>. Because you've configured the
      default command-line options in the POM, you should Maven downloading
      Jackrabbit, all of its dependencies, and starting the application in
      Jetty on port 8080.</para>

      <screen db:wrap="force" xmlns:db="http://discursive.com/plugins/docbook">$ <command>mvn clean dependency:copy jetty:run-war</command>
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building start-jackrabbit
[INFO]    task-segment: [clean, dependency:copy, jetty:run-war]
[INFO] ------------------------------------------------------------------------
[INFO] [clean:clean {execution: default-clean}]
[INFO] Deleting directory /Users/Tim/Library/Code/sonatype/maven-cookbook/mcookbook-examples/web/start-jackrabbit/target
[INFO] [dependency:copy {execution: default-cli}]
[INFO] Configured Artifact: org.apache.jackrabbit:jackrabbit-webapp:1.6.0:war
[INFO] Copying jackrabbit-webapp-1.6.0.war to /Users/Tim/Library/Code/sonatype/maven-cookbook/mcookbook-examples/web/start-jackrabbit/target/war/jackrabbit-webapp.war
...
[INFO] [jetty:run-war {execution: default-cli}]
[INFO] Configuring Jetty for project: start-jackrabbit
2009-11-29 18:57:26.676:INFO::Logging to STDERR via org.mortbay.log.StdErrLog
[INFO] Context path = /jackrabbit
[INFO] Tmp directory =  determined at runtime
[INFO] Web defaults = org/mortbay/jetty/webapp/webdefault.xml
[INFO] Web overrides =  none
[INFO] Starting jetty 6.1.22 ...
2009-11-29 18:57:26.811:INFO::jetty-6.1.22
2009-11-29 18:57:26.845:INFO::Extract /Users/Tim/Library/Code/sonatype/maven-cookbook/mcookbook-examples/web/start-jackrabbit/target/war/jackrabbit-webapp.war to /Users/Tim/Library/Code/sonatype/maven-cookbook/mcookbook-examples/web/start-jackrabbit/target/work/webapp
2009-11-29 18:57:27.796:INFO::No Transaction manager found - if your webapp requires one, please configure one.
29.11.2009 18:57:28 *INFO * root: Logging initialized. (LoggingServlet.java, line 87)
29.11.2009 18:57:28 *INFO * RepositoryStartupServlet: RepositoryStartupServlet initializing... (RepositoryStartupServlet.java, line 235)
29.11.2009 18:57:28 *ERROR* RepositoryStartupServlet: Repository startup configuration is not valid but a bootstrap config is specified. (RepositoryStartupServlet.java, line 366)
29.11.2009 18:57:28 *ERROR* RepositoryStartupServlet: Either create the jackrabbit/bootstrap.properties file or (RepositoryStartupServlet.java, line 367)
29.11.2009 18:57:28 *ERROR* RepositoryStartupServlet: use the '/config/index.jsp' for easy configuration. (RepositoryStartupServlet.java, line 368)
29.11.2009 18:57:28 *ERROR* RepositoryStartupServlet: RepositoryStartupServlet initializing failed: javax.servlet.ServletException: Repository startup configuration is not valid. (RepositoryStartupServlet.java, line 245)
29.11.2009 18:57:28 *INFO * RepositoryAccessServlet: RepositoryAccessServlet initialized. (RepositoryAccessServlet.java, line 98)
29.11.2009 18:57:28 *INFO * SimpleWebdavServlet: resource-path-prefix = '/repository' (SimpleWebdavServlet.java, line 145)
29.11.2009 18:57:28 *INFO * SimpleWebdavServlet: WWW-Authenticate header = 'Basic realm="Jackrabbit Webdav Server"' (SimpleWebdavServlet.java, line 151)
2009-11-29 18:57:28.982:INFO::Started SelectChannelConnector@0.0.0.0:8080
[INFO] Started Jetty Server
</screen>

      <para>Once Maven has started Jetty with the jackrabbit-webapp.war JAR,
      go to a web browser and open <ulink
      url="http://localhost:8080/jackrabbit">http://localhost:8080/jackrabbit</ulink>.
      You should see the Apache Jackrabbit administrative web
      interface.</para>

      <note>
        <para>The first time you start the Jackrabbit web application, it will
        print an exception stack trace as it tries to locate a Jackrabbit
        database. This stack trace disappears once you load the Jackrabbit
        administrative interface and create a new Jackrabbit database.</para>
      </note>

      <para>While this isn't the most straightforward use of a Maven POM, it
      does demonstrate the power of using Maven's dependency management and
      plugin configuration to distribute the settings necessary to execute a
      web application. If you used such a mechanism to distribute your own web
      applications, you could configure a web application and all of the
      information required to download your web application, it's
      dependencies, the servlet container, and any configuration needed to run
      your application.</para>
    </section>
  </section>
</chapter>
