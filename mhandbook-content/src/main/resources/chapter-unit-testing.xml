<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="unit-testing">
  <title>Unit Testing with Maven</title>

  <section id="unit-testing-sect-intro">
    <title>Introduction</title>

    <para>Maven can run Unit Tests, this chapter shows you how.</para>
  </section>

  <section id="unit-sect-junit-run">
    <title>Running JUnit Tests</title>

    <section>
      <title>Task</title>

      <para>You need to run all JUnit tests in a given project.</para>
    </section>

    <section>
      <title>Action</title>

      <para>To execute all of the unit tests in a project, include JUnit as a
      test scoped dependency in your project's pom.xml:</para>

      <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.mhandbook&lt;/groupId&gt;
  &lt;artifactId&gt;junit-tests&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;junit-tests&lt;/name&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;4.5&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;</programlisting>

      <para>Your project should then store unit classes in the default
      location of ${basedir}/src/test/java. The Maven Surefire plugin will
      scan these directory for JUnit tests. In this example, a component named
      SeriousComponent has a corresponding JUnit test named
      SeriousComponentTest.</para>

      <figure id="fig-unit_junit-directory-structure">
        <title>Project Structure for Unit Tests</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/unit_junit-directory-structure.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata fileref="figs/print/osgi_osgi-project-filesystems.pdf" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>In this example, the simple component being tested is named
      SeriousComponent. SeriousComponent contains a single static method to be
      tested.</para>

      <example>
        <title>SeriousComponent class</title>

        <programlisting>package org.sonatype.mhandbook;

public class SeriousComponent {

 /**
  * This function tests the seriousness of a String.
  * Returns false if the string contains the word
  * "FUNNY", returns true otherwise.
  */
  public static boolean testSeriousness( String text ) {
    return !text.toUpperCase().contains( "FUNNY" );
  }
}</programlisting>
      </example>

      <para>This class is tested by a simple JUnit test - SeriousComponentTest
      shown in the following exmple:</para>

      <example>
        <title>JUnit test for SeriousComponent</title>

        <programlisting>package org.sonatype.mhandbook;

import junit.framework.TestCase;

public class SeriousComponentTest extends TestCase {

        public SeriousComponentTest(String name) {
                super( name );
        }

        public void testSeriousness() throws Exception {
                assertTrue( SeriousComponent.testSeriousness( "SAD" ) );
                assertTrue( SeriousComponent.testSeriousness( "SERIOUS" ) );
                assertTrue( SeriousComponent.testSeriousness( "CRAZY" ) );
                assertTrue( !SeriousComponent.testSeriousness( "FUNNY" ) );
        }
}</programlisting>
      </example>

      <para>To execute your unit test, you don't need to do anything. Maven's
      default settings are to scan ${basedir}/src/test/java for unit tests
      matching the pattern <filename>*Test.java</filename>. To run your unit
      test specify the test phase of the default Maven lifecycle and run
      <command>mvn test</command>.</para>

      <screen>$ <command>mvn test</command>
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building junit-tests
[INFO]    task-segment: [test]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources {execution: default-resources}]
[WARNING] Using platform encoding (MacRoman actually) to copy filtered 
resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:compile {execution: default-compile}]
[INFO] Compiling 1 source file to /Users/Tim/Library/Code/sonatype/
maven-cookbook/mhandbook-examples/unit/junit-tests/target/classes
[INFO] [resources:testResources {execution: default-testResources}]
[WARNING] Using platform encoding (MacRoman actually) to copy filtered 
resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:testCompile {execution: default-testCompile}]
[INFO] Compiling 1 source file to /Users/Tim/Library/Code/sonatype/
maven-cookbook/mhandbook-examples/unit/junit-tests/target/test-classes
[INFO] [surefire:test {execution: default-test}]
[INFO] Surefire report directory: /Users/Tim/Library/Code/sonatype/
maven-cookbook/mhandbook-examples/unit/junit-tests/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.sonatype.mhandbook.SeriousComponentTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.065 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 5 seconds
[INFO] Finished at: Wed Nov 25 14:42:39 CST 2009
[INFO] Final Memory: 17M/80M
[INFO] ------------------------------------------------------------------------</screen>
    </section>

    <section>
      <title>Detail</title>

      <para>The test results will be made available in
      ${basedir}/target/surefire-reports as both an XML file and a text
      file.</para>

      <figure id="fig-unit_junit-directory-structure">
        <title>Project Structure for JUnit Test Results</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/unit_junit-directory-structure-results.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata fileref="figs/web/unit_junit-directory-structure-results.pdf" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The TEST-org.sonatype.mhandbook.SeriousComponentTest.xml contains
      an XML document describing the environment and state of the JVM in
      addition to data about the test cases which have been executed, and the
      org.sonatype.mhandbook.SeriousComponentTest.txt file a summary of a
      successful test or output that contains stack traces generated by a test
      failure.</para>

      <para>If your unit test passes, the
      org.sonatypemhandbook.SeriousComponentTest.txt will contain the
      following output:</para>

      <programlisting>$ <command>cd target/surefire-reports/</command>
$ <command>more org.sonatype.mhandbook.SeriousComponentTest.txt</command> 
-------------------------------------------------------------------------------
Test set: org.sonatype.mhandbook.SeriousComponentTest
-------------------------------------------------------------------------------
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.065 sec</programlisting>

      <para>If the unit test fails the same file will contain a stack trace
      that points to a failed assertion on a specific line of the unit test as
      shown below:</para>

      <programlisting>-------------------------------------------------------------------------------
Test set: org.sonatype.mhandbook.SeriousComponentTest
-------------------------------------------------------------------------------
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.062 sec 
&lt;&lt;&lt; FAILURE!
testSeriousness(org.sonatype.mhandbook.SeriousComponentTest)  Time elapsed: 
0.017 sec  &lt;&lt;&lt; FAILURE!
junit.framework.AssertionFailedError: null
        at junit.framework.Assert.fail(Assert.java:47)
        at junit.framework.Assert.assertTrue(Assert.java:20)
        at junit.framework.Assert.assertTrue(Assert.java:27)
        at org.sonatype.mhandbook.SeriousComponentTest.testSeriousness(
SeriousComponentTest.java:15)
....</programlisting>
    </section>
  </section>

  <section>
    <title>Running TestNG Tests</title>

    <section>
      <title>Task</title>

      <para>You need to run all TestNG tests in a given project.</para>
    </section>

    <section>
      <title>Action</title>

      <para>To use TestNG, you will need to add TestNG as a dependency in your
      project's POM. Since the TestNG unit test shown in this section uses
      Java 5 annotation, you will also need to configure the Maven Compiler
      plugin to target Java 5. The following POM shows the minimum required
      configuration for running TestNG tests with Java 5 annotations.</para>

      <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
           http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.mhandbook&lt;/groupId&gt;
  &lt;artifactId&gt;testng-tests&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;testng-tests&lt;/name&gt;
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;source&gt;1.5&lt;/source&gt;
          &lt;target&gt;1.5&lt;/target&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.testng&lt;/groupId&gt;
      &lt;artifactId&gt;testng&lt;/artifactId&gt;
      &lt;version&gt;5.10&lt;/version&gt;
      &lt;classifier&gt;jdk15&lt;/classifier&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>

      <para>You would then put your TestNG unit test classses in the
      <filename>${basedir}/src/test/java</filename> directory. The following
      TestNG test uses Java 5 annotations to mark a class and a method as a
      TestNG test. The following TestNG unit test duplicates the JUnit test
      shown in <xref linkend="unit-sect-junit-run" />, and it tests the
      SeriousComponent class.</para>

      <example>
        <title>TestNG Test for the SeriousComponent</title>

        <programlisting>package org.sonatype.mhandbook;

import org.testng.annotations.Test;

@Test
public class SeriousComponentTest {

  @Test
  public void testSeriousness() throws Exception {
    assert SeriousComponent.testSeriousness("SAD");
    assert SeriousComponent.testSeriousness("SERIOUS");
    assert SeriousComponent.testSeriousness("CRAZY");
    assert !SeriousComponent.testSeriousness("FUNNY");
  }
}</programlisting>
      </example>

      <para>There is no other configuration necessary to have Maven execute
      any TestNG tests it locates under ${basedir}/src/test/java which match
      the pattern <filename>s*Test.java</filename>. Running <command>mvn
      test</command> will execute your TestNG unit tests.</para>

      <screen>$ <command>mvn test</command>
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building testng-tests
[INFO]    task-segment: [test]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources {execution: default-resources}]
[WARNING] Using platform encoding (MacRoman actually) to copy filtered 
resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:compile {execution: default-compile}]
[INFO] Compiling 1 source file to /Users/Tim/Library/Code/sonatype/
maven-cookbook/mhandbook-examples/unit/testng-tests/target/classes
[INFO] [resources:testResources {execution: default-testResources}]
[WARNING] Using platform encoding (MacRoman actually) to copy filtered 
resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:testCompile {execution: default-testCompile}]
[INFO] Compiling 1 source file to /Users/Tim/Library/Code/sonatype/
maven-cookbook/mhandbook-examples/unit/testng-tests/target/test-classes
[INFO] [surefire:test {execution: default-test}]
[INFO] Surefire report directory: /Users/Tim/Library/Code/sonatype/
maven-cookbook/mhandbook-examples/unit/testng-tests/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running TestSuite
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.292 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 4 seconds
[INFO] Finished at: Thu Nov 26 08:24:02 CST 2009
[INFO] Final Memory: 17M/80M
[INFO] ------------------------------------------------------------------------
</screen>
    </section>

    <section>
      <title>Detail</title>

      <para>Once the TestNG unit tests have been executed, you will have a
      TestNG HTML report under
      <filename>${basedir}/target/surfire-reports/index.html</filename>. To
      view a report which displays statistics about which tests failed and
      which tests passed, load this HTML page in a web browser.</para>

      <figure id="fig-unit_testng-directory-structure">
        <title>Project Structure for TestNG Test Results</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/unit_testng-directory-structure-results.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata fileref="figs/web/unit_testng-directory-structure-results.pdf" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>Using TestNG Suite XML Files</title>

    <para></para>
  </section>

  <section>
    <title>Configuring TestNG Tests</title>

    <para></para>
  </section>

  <section>
    <title>Running TestNG Tests in Parallel</title>

    <section>
      <title>Task</title>

      <para>You would like to run your unit tests in parallel to speed up your
      builds.</para>
    </section>

    <section>
      <title>Action</title>

      <para>To illustrate executing tests in parallel, we can create a
      component to be tests that sleeps for 5 seconds. The following listing
      is the SeriousComponent.java class which would be stored in
      ${basedir}/src/main/java under the org.sonatype.mhandbook
      package:</para>

      <programlisting>package org.sonatype.mhandbook;

public class SeriousComponent {

 /**
  * This function tests the seriousness of a String.
  * Returns false if the string contains the word
  * "FUNNY", returns truje otherwise.
  */
  public static boolean testSeriousness( String text ) {
    try {
      Thread.sleep( 5000 );
    } catch (InterruptedException e) {
    }
    return !text.toUpperCase().contains( "FUNNY" );
  }
}</programlisting>

      <para>This class has a single static method which sleeps for five
      seconds and then tests a string for the presence of the word "funny". To
      test this class, there is a SeriousComponentTest.java class in
      ${basedir}/src/test/java under the org.sonatype.mhandbook package which
      contains the following four test methods:</para>

      <programlisting>package org.sonatype.mhandbook;

import org.testng.annotations.Test;

@Test
public class SeriousComponentTest {

  @Test
  public void testSad() throws Exception {
    assert SeriousComponent.testSeriousness("SAD");
  }

  @Test
  public void testSerious() throws Exception {
    assert SeriousComponent.testSeriousness("SERIOUS");
  }

  @Test
  public void testCrazy() throws Exception {
    assert SeriousComponent.testSeriousness("CRAZY");
  }

  @Test
  public void testFunny() throws Exception {
    assert !SeriousComponent.testSeriousness("FUNNY");
  }
}</programlisting>

      <para>If you ran this test in a single thread, it would take
      approximately 20 seconds to execute. To speed up your build, configure
      Maven to execute each test method in parallel and set the available
      thread count for parallel test execution to 4. To do this, add the
      following plugin configuration to your project's POM.</para>

      <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
           http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.mhandbook&lt;/groupId&gt;
  &lt;artifactId&gt;testng-parallel&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;testng-tests&lt;/name&gt;
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;source&gt;1.5&lt;/source&gt;
          &lt;target&gt;1.5&lt;/target&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;parallel&gt;methods&lt;/parallel&gt;
          &lt;threadCount&gt;4&lt;/threadCount&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.testng&lt;/groupId&gt;
      &lt;artifactId&gt;testng&lt;/artifactId&gt;
      &lt;version&gt;5.10&lt;/version&gt;
      &lt;classifier&gt;jdk15&lt;/classifier&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>

      <para>Execute the TestNG test in parallel by running mvn test and take
      note of the time it takes to execute all four tests.</para>

      <screen>$ mvn test
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building testng-tests
[INFO]    task-segment: [test]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources {execution: default-resources}]
[WARNING] Using platform encoding (MacRoman actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:compile {execution: default-compile}]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources {execution: default-testResources}]
[WARNING] Using platform encoding (MacRoman actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:testCompile {execution: default-testCompile}]
[INFO] Nothing to compile - all classes are up to date
[INFO] [surefire:test {execution: default-test}]
[INFO] Surefire report directory: /Users/Tim/Library/Code/sonatype/maven-cookbook/mhandbook-examples/unit/testng-parallel/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running TestSuite
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.342 sec

Results :

Tests run: 4, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 9 seconds
[INFO] Finished at: Thu Nov 26 10:43:45 CST 2009
[INFO] Final Memory: 11M/80M
[INFO] ------------------------------------------------------------------------</screen>

      <para></para>

      <programlisting>      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;parallel&gt;classes&lt;/parallel&gt;
          &lt;threadCount&gt;4&lt;/threadCount&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;</programlisting>

      <para></para>

      <screen>$ <command>mvn test</command>
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building testng-tests
[INFO]    task-segment: [test]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources {execution: default-resources}]
[WARNING] Using platform encoding (MacRoman actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:compile {execution: default-compile}]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources {execution: default-testResources}]
[WARNING] Using platform encoding (MacRoman actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:testCompile {execution: default-testCompile}]
[INFO] Nothing to compile - all classes are up to date
[INFO] [surefire:test {execution: default-test}]
[INFO] Surefire report directory: /Users/Tim/Library/Code/sonatype/maven-cookbook/mhandbook-examples/unit/testng-parallel/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running TestSuite
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 20.411 sec

Results :

Tests run: 4, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 23 seconds
[INFO] Finished at: Thu Nov 26 10:34:40 CST 2009
[INFO] Final Memory: 11M/80M
[INFO] ------------------------------------------------------------------------</screen>
    </section>

    <section>
      <title>Detail</title>

      <para>If your unit tests are straightforward, this is a great way to
      make your builds a bit faster.</para>

      <para>You use the following values in the parallel configuration
      parmeter:</para>

      <variablelist>
        <varlistentry>
          <term>classes</term>

          <listitem>
            <para>Each test class will be executed in an independent execution
            thread.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>methods</term>

          <listitem>
            <para>Each test method will be run as an independent test in a
            separate thread. Note that if one method states and explicit
            dependency on another method, TestNG will note the dependency and
            execute both methods in the same Thread.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>tests</term>

          <listitem>
            <para>If you use a TestNG Suite XML file and you list a test
            element that groups a number of related tests, listing test in the
            parallel configuration element will configure TestNG to use a
            separate thread for each &lt;test&gt; element. This option is only
            relevant if you have configured the Maven Surefire plugin to use a
            custom TestNG Suite XML file with one or more &lt;test&gt;
            elements.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>

  <section>
    <title>Skipping Unit Tests</title>

    <para></para>
  </section>

  <section>
    <title>Running a Single Unit Test</title>

    <para></para>
  </section>
</chapter>
