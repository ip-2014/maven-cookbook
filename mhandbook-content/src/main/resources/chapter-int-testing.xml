<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="int-testing">
  <title>Integration Testing with Maven</title>

  <section id="int-testing-sect-intro">
    <title>Introduction</title>

    <para>This chapter covers integration testing with Maven.</para>
  </section>

  <section>
    <title>Running a Selenium Test</title>

    <section>
      <title>Task</title>

      <para>You need to write a Selenium test to test a web application or a
      web site.</para>
    </section>

    <section>
      <title>Action</title>

      <para>Selenium is a very straightforward way to test a web application,
      you can write a unit test in any number of languages and then use the
      Selenium Remote Control to automate a browser and perform assertions
      about the presence of text or UI elements in a page. This recipe uses a
      TestNG test which includes the appropriate Selenium code to test a well
      known web site: http://www.twitter.com. In a Maven project devoted to
      integration testing, the following test class connects to a Twitter user
      page and verifies the correct user name.</para>

      <example>
        <title>TwitterTest a Selenium Test written in TestNG</title>

        <programlisting>package org.sonatype.mhandbook;

import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.thoughtworks.selenium.DefaultSelenium;
import com.thoughtworks.selenium.Selenium;
import com.thoughtworks.selenium.SeleniumException;

public class TwitterTest {

  private Selenium selenium;

  @BeforeClass
  public void startSelenium() {
    this.selenium = new DefaultSelenium("localhost", 4444, "*safari",
        "http://www.twitter.com");
    this.selenium.start();
  }

  @Test
  @Parameters( { "user", "name" })
  public void testTwitter(String user, String name) {
    try {
      selenium.open("http://www.twitter.com/" + user);
      selenium.waitForPageToLoad("3000");
      assert selenium.isTextPresent(name);

    } catch (SeleniumException e) {
      throw e;
    }
  }

  @AfterClass(alwaysRun = true)
  public void stopSelenium() {
    this.selenium.stop();
  }

}
</programlisting>
      </example>

      <para>The following POM contains the following configuration to
      configure the Selenium server and the Selenium integration tests:</para>

      <itemizedlist>
        <listitem>
          <para>The Maven Surefire plugin is configured to skip tests. This
          will prevent the Surefire plugin from executing any unit tests
          during the test phase.</para>
        </listitem>

        <listitem>
          <para>An execution of the Surefire plugin is configured not to skip
          tests during the integration-test phase. This configuration coupled
          with the previous configuration simply moves the execution of the
          tests into the integration-test phase of the lifecycle.</para>
        </listitem>

        <listitem>
          <para>The user and name properties that the testTwitter() method
          relies upon are configured via the systemProperties configuration
          parameter of the Maven Surefire plugin.</para>
        </listitem>

        <listitem>
          <para>The Selenium Maven plugin's start-server goal is configured to
          run in the pre-integration-test phase. This has the effect of
          starting Selenium before the Surefire plugin executes the
          integration tests. No configuration options are passed to the
          start-server goal so Selenium will be started on a default port of
          4444.</para>
        </listitem>

        <listitem>
          <para>A dependency on selenium-java-client-driver exposes the
          Selenium API to the test cases and allows the Surefire test to
          interact with the Selenium server.</para>
        </listitem>
      </itemizedlist>

      <example>
        <title>POM configuring SureFire to Execute Selenium Remote
        Control</title>

        <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
           http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.mhandbook&lt;/groupId&gt;
  &lt;artifactId&gt;selenium-reddit&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;selenium-reddit&lt;/name&gt;
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;source&gt;1.5&lt;/source&gt;
          &lt;target&gt;1.5&lt;/target&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;skip&gt;true&lt;/skip&gt;
          &lt;systemProperties&gt;
            &lt;property&gt;
              &lt;name&gt;user&lt;/name&gt;
              &lt;value&gt;tobrien&lt;/value&gt;
            &lt;/property&gt;
            &lt;property&gt;
              &lt;name&gt;name&lt;/name&gt;
              &lt;value&gt;Tim O'Brien&lt;/value&gt;
            &lt;/property&gt;
          &lt;/systemProperties&gt;
        &lt;/configuration&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;phase&gt;integration-test&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;test&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
              &lt;skip&gt;false&lt;/skip&gt;
            &lt;/configuration&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
        &lt;artifactId&gt;selenium-maven-plugin&lt;/artifactId&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;phase&gt;pre-integration-test&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;start-server&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
              &lt;background&gt;true&lt;/background&gt;
            &lt;/configuration&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.testng&lt;/groupId&gt;
      &lt;artifactId&gt;testng&lt;/artifactId&gt;
      &lt;version&gt;5.10&lt;/version&gt;
      &lt;classifier&gt;jdk15&lt;/classifier&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.seleniumhq.selenium.client-drivers&lt;/groupId&gt;
      &lt;artifactId&gt;selenium-java-client-driver&lt;/artifactId&gt;
      &lt;version&gt;1.0.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>
      </example>

      <para>If you run Maven to the integration-test phase, Maven will start
      the Selenium server before it executes the integration-test phase. In
      the output shown below, the section that starts with
      selenium:start-server is the pre-integration-test execution of the
      start-server goal in the Selenium Maven plugin. This is followed by an
      invocation of the test goal from the Maven Surefire plugin which will
      execute the TestNG tests which rely on the Selenium server.</para>

      <screen>$ <command>mvn integration-test</command>
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building selenium-reddit
[INFO]    task-segment: [integration-test]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources {execution: default-resources}]
[WARNING] Using platform encoding (MacRoman actually) to copy filtered 
resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:compile {execution: default-compile}]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources {execution: default-testResources}]
[WARNING] Using platform encoding (MacRoman actually) to copy filtered 
resources, i.e. build is platform dependent!
[INFO] Copying 0 resource
[INFO] [compiler:testCompile {execution: default-testCompile}]
[INFO] Compiling 1 source file to /Users/Tim/Library/Code/sonatype/
maven-cookbook/mhandbook-examples/integrate/selenium-reddit/
target/test-classes
[INFO] [surefire:test {execution: default-test}]
[INFO] Tests are skipped.
[INFO] [jar:jar {execution: default-jar}]
[INFO] Building jar: /Users/Tim/Library/Code/sonatype/maven-cookbook/
mhandbook-examples/integrate/selenium-reddit/
target/selenium-reddit-1.0-SNAPSHOT.jar
[INFO] [selenium:start-server {execution: default}]
Created dir: /Users/Tim/Library/Code/sonatype/maven-cookbook/
mhandbook-examples/integrate/selenium-reddit/target/selenium
Launching Selenium Server
Waiting for Selenium Server...
[INFO] User extensions: /Users/Tim/Library/Code/sonatype/maven-cookbook/
mhandbook-examples/integrate/selenium-reddit/
target/selenium/user-extensions.js
23:41:46,726 INFO  [SeleniumServer] Java: Apple Inc. 14.1-b02-90
23:41:46,727 INFO  [SeleniumServer] OS: Mac OS X 10.6.1 x86_64
23:41:46,735 INFO  [SeleniumServer] v1.0.1 [2697], with Core 
23:41:46,829 INFO  [HttpServer] Version Jetty/5.1.x
23:41:46,830 INFO  [Container] Started HttpContext[/selenium-server/driver,
/selenium-server/driver]
23:41:46,832 INFO  [Container] Started HttpContext[/selenium-server,
/selenium-server]
23:41:46,832 INFO  [Container] Started HttpContext[/,/]
23:41:46,846 INFO  [SocketListener] Started SocketListener on 0.0.0.0:4444
23:41:46,846 INFO  [Container] Started org.mortbay.jetty.Server@4a4e79f1
23:41:47,262 INFO  [Credential] Checking Resource aliases
Selenium Server started
[INFO] [surefire:test {execution: default}]
[INFO] Surefire report directory: /Users/Tim/Library/Code/sonatype/
maven-cookbook/mhandbook-examples/integrate/selenium-reddit/
target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running TestSuite
23:41:48,178 INFO  [org.mortbay.util.Credential] Checking Resource aliases
23:41:48,184 INFO  [org.openqa.selenium.server.SeleniumDriverResourceHandler] 
Command request: getNewBrowserSession[*safari, http://www.twitter.com, ] on 
session null
23:41:48,187 INFO  [org.openqa.selenium.server.BrowserSessionFactory] 
creating new remote session
23:41:48,436 INFO  [org.openqa.selenium.server.BrowserSessionFactory] 
Allocated session 2a66870a3c894a60a19ef6f2e7a1dc74 for 
http://www.twitter.com, launching...
23:41:48,519 INFO  [org.openqa.selenium.server.browserlaunchers.
SafariCustomProfileLauncher] Launching Safari to visit... 
23:41:53,251 INFO  [org.openqa.selenium.server.SeleniumDriverResourceHandler] 
Got result: OK, on session 
23:41:53,265 INFO  [org.openqa.selenium.server.SeleniumDriverResourceHandler] 
Command request: open[http://www.twitter.com/tobrien, ] on session 
23:41:56,231 INFO  [org.openqa.selenium.server.SeleniumDriverResourceHandler] 
Got result: OK on session 
23:41:56,256 INFO  [org.openqa.selenium.server.SeleniumDriverResourceHandler] 
Command request: waitForPageToLoad[3000, ] on session 
23:41:56,270 INFO  [org.openqa.selenium.server.SeleniumDriverResourceHandler] 
Got result: OK on session 
23:41:56,284 INFO  [org.openqa.selenium.server.SeleniumDriverResourceHandler] 
Command request: isTextPresent[Tim O'Brien, ] on session 
23:41:56,343 INFO  [org.openqa.selenium.server.SeleniumDriverResourceHandler] 
Got result: OK,true on session 
23:41:56,352 INFO  [org.openqa.selenium.server.SeleniumDriverResourceHandler] 
Command request: testComplete[, ] on session 
23:41:56,370 INFO  [org.openqa.selenium.server.SeleniumDriverResourceHandler] 
Got result: OK on session 
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 8.609 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 18 seconds
[INFO] Finished at: Fri Nov 27 23:41:56 CST 2009
[INFO] Final Memory: 32M/80M
[INFO] ------------------------------------------------------------------------
</screen>
    </section>
  </section>

  <section>
    <title>Running Integration Tests Against a Servlet Container</title>

    <section>
      <title>Task</title>

      <para>You are testing a web application and you need to start a servlet
      container prior to running integration tests.</para>
    </section>

    <section>
      <title>Action</title>

      <para>Use the Maven Jetty Plugin to start an instance of a server prior
      to running your integration tests. Assume that you are writing
      integration tests to test the sample web application project that was
      introduced in <xref linkend="web-sect-running-war" />. If you have some
      Selenium tests for the web application, you can start an instance of
      Jetty running the web application as a daemon in the
      pre-integration-test phase and stop the instance in the
      post-integration-test phase.</para>

      <para>Your web application is in the org.sonatype.mhandbook:sample-web
      project and your integration tests are in the
      org.sonatype-mhandbook:sample-web-it project. You can configure the
      Maven Dependency plugin to copy the WAR to the sample-web-it project
      during the package phase, then during the pre-integation-test phase you
      will configure the Maven Jetty plugin to start an instance of Jetty to
      run the sample-web.war as well as to start the Selenium server. The
      Maven Surefire plugin will then execute the unit tests, and after the
      tests are complete the Jetty server will be stopped in the
      post-integration-test phase.</para>

      <para>Our TestNG integration tests is as follows. It is going to connect
      to the default Jetty host and port of localhost:8080, and submit a form
      that calculates the tenth number in the Fibonacci sequence
      (F<subscript>10</subscript>). This integration test is stored in
      <filename>\${basedir}/src/test/java</filename>.</para>

      <programlisting>package org.sonatype.mhandbook;

import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.thoughtworks.selenium.DefaultSelenium;
import com.thoughtworks.selenium.Selenium;
import com.thoughtworks.selenium.SeleniumException;

public class FibTest {

private Selenium selenium;

  @BeforeClass
  public void startSelenium() {
    this.selenium = new DefaultSelenium("localhost", 4444, "*safari",
        "http://localhost:8080");
    this.selenium.start();
  }

  @Test public void testSequence() throws Exception {
    selenium.open("/sample-web/");
    selenium.type("index", "10");
    selenium.click("//input[@value='Calculate']");
    selenium.waitForPageToLoad("30000");
    assert selenium.isTextPresent("55");
  }
  
  @AfterClass(alwaysRun = true)
  public void stopSelenium() {
    this.selenium.stop();
  }

}
</programlisting>

      <para>The POM to configure the sample-web-it is shown below.</para>

      <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
           http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.sonatype.mhandbook&lt;/groupId&gt;
  &lt;artifactId&gt;sample-web-it&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;sample-web-it&lt;/name&gt;
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;source&gt;1.5&lt;/source&gt;
          &lt;target&gt;1.5&lt;/target&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;id&gt;copy&lt;/id&gt;<co id="int-co-run-war-1"
          linkends="int-cr-run-war-1" />
            &lt;phase&gt;package&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;copy&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
              &lt;artifactItems&gt;
                &lt;artifactItem&gt;
                  &lt;groupId&gt;org.sonatype.mhandbook&lt;/groupId&gt;
                  &lt;artifactId&gt;sample-web&lt;/artifactId&gt;
                  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
                  &lt;type&gt;war&lt;/type&gt;
                  &lt;overWrite&gt;true&lt;/overWrite&gt;
                  &lt;destFileName&gt;sample-web.war&lt;/destFileName&gt;
                &lt;/artifactItem&gt;
              &lt;/artifactItems&gt;
              &lt;outputDirectory&gt;
                \${project.build.directory}/war
              &lt;/outputDirectory&gt;
              &lt;overWriteReleases&gt;true&lt;/overWriteReleases&gt;
              &lt;overWriteSnapshots&gt;true&lt;/overWriteSnapshots&gt;
            &lt;/configuration&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;skip&gt;true&lt;/skip&gt;
        &lt;/configuration&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;phase&gt;integration-test&lt;/phase&gt;<co
          id="int-co-run-war-2" linkends="int-cr-run-war-2" />
            &lt;goals&gt;
              &lt;goal&gt;test&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
              &lt;skip&gt;false&lt;/skip&gt;
            &lt;/configuration&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
        &lt;artifactId&gt;selenium-maven-plugin&lt;/artifactId&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;phase&gt;pre-integration-test&lt;/phase&gt;<co
          id="int-co-run-war-3" linkends="int-cr-run-war-3" />
            &lt;goals&gt;
              &lt;goal&gt;start-server&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
              &lt;background&gt;true&lt;/background&gt;
            &lt;/configuration&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
        &lt;artifactId&gt;maven-jetty-plugin&lt;/artifactId&gt;
        &lt;version&gt;6.1.22&lt;/version&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;id&gt;start-jetty&lt;/id&gt;<co id="int-co-run-war-4"
          linkends="int-cr-run-war-4" />
            &lt;phase&gt;pre-integration-test&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;run-war&lt;/goal&gt;
            &lt;/goals&gt;
            &lt;configuration&gt;
              &lt;contextPath&gt;sample-web&lt;/contextPath&gt;
              &lt;daemon&gt;true&lt;/daemon&gt;
              &lt;webApp&gt;
                \${project.build.directory}/war/sample-web.war
              &lt;/webApp&gt;
            &lt;/configuration&gt;
          &lt;/execution&gt;
          &lt;execution&gt;
            &lt;id&gt;stop-jetty&lt;/id&gt;<co id="int-co-run-war-5"
          linkends="int-cr-run-war-5" />
            &lt;phase&gt;post-integration-test&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;stop&lt;/goal&gt;
            &lt;/goals&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
        &lt;configuration&gt;<co id="int-co-run-war-6"
          linkends="int-cr-run-war-6" />
          &lt;stopPort&gt;9991&lt;/stopPort&gt;
          &lt;stopKey&gt;test&lt;/stopKey&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.testng&lt;/groupId&gt;
      &lt;artifactId&gt;testng&lt;/artifactId&gt;
      &lt;version&gt;5.10&lt;/version&gt;
      &lt;classifier&gt;jdk15&lt;/classifier&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.seleniumhq.selenium.client-drivers&lt;/groupId&gt;
      &lt;artifactId&gt;selenium-java-client-driver&lt;/artifactId&gt;
      &lt;version&gt;1.0.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.sonatype.mhandbook&lt;/groupId&gt;<co
          id="int-co-run-war-7" linkends="int-cr-run-war-7" />
      &lt;artifactId&gt;sample-web&lt;/artifactId&gt;
      &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
      &lt;type&gt;war&lt;/type&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</programlisting>

      <para>This POM contains the following configuration:</para>

      <calloutlist>
        <callout arearefs="int-co-run-war-1" id="int-cr-run-war-1">
          <para>The Maven Dependency plugin is configured to copy the
          sample-web web application archive to the
          \${project.build.directory}/war/sample-web.war file. The copy goal is
          bound to the package phase.</para>
        </callout>

        <callout arearefs="int-co-run-war-2" id="int-cr-run-war-2">
          <para>The Surefire plugin is configured to skip all tests during the
          test phase and to execute all tests during the integration-test
          phase.</para>
        </callout>

        <callout arearefs="int-co-run-war-3" id="int-cr-run-war-3">
          <para>The Selenium server is started during the pre-integration-test
          phase as a background process. This makes the Selenium server
          available to any integration tests that need to interact with a
          browser.</para>
        </callout>

        <callout arearefs="int-co-run-war-4" id="int-cr-run-war-4">
          <para>The start-jetty execution starts the Jetty server in the
          pre-integration-test phase. This execution references the WAR
          downloaded by the Maven Dependency plugin and it also sets the
          context path to "sample-web". Setting daemon to "true" runs Jetty in
          the background and continues to progress through the Maven
          lifecycle. If daemon were set to "false", the Maven build would stop
          and wait for the Jetty process to complete.</para>
        </callout>

        <callout arearefs="int-co-run-war-5" id="int-cr-run-war-5">
          <para>The stop-jetty execution stops the Jetty server after the
          integration tests have been executed.</para>
        </callout>

        <callout arearefs="int-co-run-war-6" id="int-cr-run-war-6">
          <para>To stop the Jetty server we need to supply a stop port and a
          stop key. Both the run-war and stop goals of the Jetty plugin will
          use this configuration so it is defined at the plugin level instead
          of the execution level. The stop port defines the port number that
          Jetty will listen to for a stop command, and the stop key is a
          string that will be used by the jetty:stop goal to stop the Jetty
          process.</para>
        </callout>

        <callout arearefs="int-co-run-war-7" id="int-cr-run-war-7">
          <para>Adding a dependency to the web application project that is
          being tested will make sure that this project is ordered after the
          web application in a multi-module build.</para>
        </callout>
      </calloutlist>

      <para>When you run the integration-test phase of this build, you will
      see that Maven runs through the lifecycle and starts Selenium and Jetty
      before running the integration tests.</para>

      <screen>$ <command>mvn clean install</command>
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building sample-web-it
[INFO]    task-segment: [clean, integration-test]
[INFO] ------------------------------------------------------------------------
[INFO] [clean:clean {execution: default-clean}]
...
[INFO] [resources:resources {execution: default-resources}]
...
[INFO] [resources:testResources {execution: default-testResources}]
...
[INFO] [compiler:testCompile {execution: default-testCompile}]
[INFO] Compiling 1 source file to 
~/Code/sonatype/maven-cookbook/mhandbook-examples/integrate/sample-web-it/
target/test-classes
[INFO] [surefire:test {execution: default-test}]
[INFO] Tests are skipped.
[INFO] [jar:jar {execution: default-jar}]
...
[INFO] [dependency:copy {execution: copy}]
...
[INFO] [selenium:start-server {execution: default}]
Created dir: ~/maven-cookbook/mhandbook-examples/integrate/sample-web-it/
target/selenium
Launching Selenium Server
Waiting for Selenium Server...
...
[INFO] [dependency:copy {execution: copy}]
[INFO] Configured Artifact: org.sonatype.mhandbook:sample-web:1.0-SNAPSHOT:war
[INFO] Copying sample-web-1.0-SNAPSHOT.war to 
~/maven-cookbook/mhandbook-examples/integrate/sample-web-it/
target/war/sample-web.war
[INFO] [jetty:run-war {execution: start-jetty}]
[INFO] Configuring Jetty for project: sample-web-it
2009-11-29 04:21:37.994:INFO::Logging to STDERR via org.mortbay.log.StdErrLog
[INFO] Context path = /sample-web
[INFO] Starting jetty 6.1.22 ...
2009-11-29 04:21:38.683:INFO::Started SelectChannelConnector@0.0.0.0:8080
[INFO] Started Jetty Server
[INFO] [surefire:test {execution: default}]

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running TestSuite
04:21:39,436 INFO  [org.mortbay.util.Credential] Checking Resource aliases
...
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.597 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] [jetty:stop {execution: stop-jetty}]
[INFO] Stopping server 0
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 13 seconds
[INFO] Finished at: Sun Nov 29 04:21:42 CST 2009
[INFO] Final Memory: 48M/99M
[INFO] ------------------------------------------------------------------------
2009-11-29 04:21:43.201:INFO::Shutdown hook executing
2009-11-29 04:21:43.822:INFO::Shutdown hook complete</screen>
    </section>
  </section>
</chapter>
